//
// Created by Riverssen on 05.11.18.
//

#ifndef MVM_OPCODES_H
#define MVM_OPCODES_H
enum Op
{
    add                  = 7,/**integer addition**/
    sdiv                 = 11,/**integer signed division**/
    sub                  = 8,/**integer subtraction**/
    mul                  = 9,/**integer multiplication**/
    udiv                 = 10,/**integer unsigned division**/
    store                = 163,/**store max length data**/
    load                 = 157,/**load max length data**/
    mod                  = 12,/**integer modulo**/
    liget                = 103,/**push long int from memory**/
    dfget                = 107,/**push double float from memory**/
    ddget                = 108,/**push double double from memory**/
    llget                = 104,/**push long long from mempory**/
    fget                 = 105,/**push float from memory**/
    dget                 = 106,/**push double from memory**/
    push                 = 48,/**push long data**/
    bget                 = 99,/**push byte from memory**/
    iget                 = 101,/**push int from memory**/
    lget                 = 102,/**push long from memory**/
    sget                 = 100,/**push short from memory**/
    dset                 = 95,/**set point in memory to a double**/
    ddset                = 97,/**set point in memory to a double double**/
    aget                 = 98,/**push pointer from memory**/
    dfset                = 96,/**set point in memory to a double float**/
    lset                 = 91,/**set point in memory to a long**/
    llset                = 93,/**set point in memory to a long long**/
    fset                 = 94,/**set point in memory to a float**/
    liset                = 92,/**set point in memory to a long int**/
    aset                 = 87,/**set point in memory to a pointer**/
    sset                 = 89,/**set point in memory to a short**/
    iset                 = 90,/**set point in memory to an int**/
    bset                 = 88,/**set point in memory to a byte**/
    invoke               = 3,/**invoke a function (static or otherwise)] p=12 {execute(globalTable, nativeTable, globalPointer, basePointer, scope, globalTable[ops.getUnsignedLong()**/
    dconst               = 72,/**push a double**/
    mspsh                = 154,/**push a max length value from parent scope**/
    m2psh                = 155,/**push two max length values from parent scope**/
    m4psh                = 156,/**push four max length values from parent scope**/
    brnf                 = 143,/**branch if false**/
    newline              = 127,
    brnt                 = 142,/**branch if true**/
    negate               = 128,/**negate a byte**/
    store_2              = 166,/**store max length data**/
    ucmpge               = 138,/**compare greater or equal**/
    mark                 = 146,/**mark a check-point**/
    store_3              = 167,/**store max length data**/
    store_4              = 168,/**store max length data**/
    load_1               = 159,/**load max length data**/
    load_2               = 160,/**load max length data**/
    store_1              = 165,/**store max length data**/
    store_0              = 164,/**store max length data**/
    cmpg                 = 130,/**compare greater**/
    load_3               = 161,/**load max length data**/
    load_4               = 162,/**load max length data**/
    load_0               = 158,/**load max length data] p=11**/
    jump                 = 144,/**jump to a point**/
    jmpm                 = 145,/**jump to a marked point**/
    fmul                 = 33,/**double multiplication**/
    fdiv                 = 34,/**double division**/
    ucmpg                = 135,/**compare greater**/
    ucmple               = 137,/**compare less or equal**/
    ucmpe                = 136,/**compare equal**/
    cmpe                 = 131,/**compare equal**/
    cmpge                = 133,/**compare greater or equal**/
    ucmpl                = 134,/**compare less**/
    cmple                = 132,/**compare less or equal**/
    fadd                 = 31,/**double addition**/
    cmpl                 = 129,/**compare less**/
    fsub                 = 32,/**double subtraction**/
    aret                 = 27,/**return a pointer**/
    mret2                = 29,/**return two max_size elements (x128)**/
    mret4                = 30,/**return four max_size elements (x256)**/
    mret                 = 28,/**return max_size element**/
    ret                  = 26,/**return from scope**/
    invokedynamic        = 5,/**invoke a function using a function pointer] p=10 {execute(globalTable, nativeTable, globalPointer, basePointer, scope, globalTable[scope.popUnsignedLong()**/
    push_0               = 49,/**push 0L**/
    ifcmpg               = 141,
    ifcmpl               = 140,
    l2d                  = 76,/**cast long to short**/
    strprint             = 153,
    dcmp                 = 147,/**compare two double doubles**/
    cmpub                = 149,/**compare two unsigned long longs**/
    cmpb                 = 148,/**compare two long longs**/
    invokespecial        = 4,/**invoke a native function] p=10 {nativeTable[ops.getUnsignedLong()**/
    ifcmpe               = 139,
    expt                 = 13,/**integer pow(x, y)**/
    bdiv                 = 39,/**x256 int unsigned division**/
    bsub                 = 37,/**x256 int subtraction**/
    bmul                 = 38,/**x256 int multiplication**/
    bsdiv                = 40,/**x256 int signed division**/
    badd                 = 36,/**x256 int addition**/
    _and                 = 14,/**bitwise and**/
    swap                 = 58,/**swap top 2 elements**/
    _not                 = 17,/**bitwise not**/
    band                 = 20,/**x256 bitwise and**/
    strload              = 152,
    blshift              = 25,/**x256 left shift**/
    brshift              = 24,/**x256 right shift**/
    bnot                 = 23,/**x256 bitwise not**/
    bxor                 = 22,/**x256 bitwise xor**/
    fexp                 = 35,/**double pow(x, y)**/
    strconst             = 150,
    bor                  = 21,/**x256 bitwise or**/
    _or                  = 15,/**bitwise or**/
    strstore             = 151,
    llconst              = 70,/**push a long long**/
    _xor                 = 16,/**bitwise xor**/
    liconst              = 69,/**push a long int**/
    invokeexternal       = 6,/**invoke an external function from an online script**/
    rshift               = 18,/**right shift**/
    dsub                 = 44,/**x256 double subtraction**/
    bmod                 = 41,/**x256 int modulo**/
    dfconst              = 73,/**push a double float**/
    dexp                 = 47,/**x256 double division**/
    ddiv                 = 46,/**x256 double division**/
    dmul                 = 45,/**x256 double multiplication**/
    ddconst              = 74,/**push a double double**/
    bexp                 = 42,/**x256 int pow(x, y)**/
    lshift               = 19,/**left shift**/
    dadd                 = 43,/**x256 double addition**/
    dup                  = 55,/**duplicate a max element**/
    push_1               = 50,/**push 1L**/
    dfprint              = 125,
    ddprint              = 126,
    fprint               = 123,
    ll2dd                = 85,/**cast long to double double**/
    uliprint             = 121,
    liprint              = 115,
    iprint               = 113,
    pop                  = 54,/**pop max element (x64)**/
    uiprint              = 119,
    sprint               = 111,
    cprint               = 112,
    dd2ll                = 86,/**cast long to double double**/
    dprint               = 124,
    swap2                = 59,/**swap the first and 3rd elements**/
    ullprint             = 122,
    aprint               = 109,
    usprint              = 118,
    bprint               = 110,
    uprint               = 120,
    ubprint              = 117,
    llprint              = 116,
    print                = 114,
    li2l                 = 84,/**cast long to long long**/
    d2f                  = 79,/**cast double to float**/
    l2ll                 = 82,/**cast long to long long**/
    push_4               = 53,/**push 4L**/
    l2li                 = 81,/**cast long to long int**/
    l2f                  = 75,/**cast long to byte**/
    push_2               = 51,/**push 2L**/
    ll2l                 = 83,/**cast long to long long**/
    push_3               = 52,/**push 3L**/
    d2l                  = 80,/**cast double to long**/
    f2l                  = 78,/**cast float to long**/
    f2d                  = 77,/**cast float to double**/
    swap3                = 60,/**swap the first and 4th elements**/
    fconst               = 71,/**push a double**/
    swap4                = 61,/**swap the first and 5th elements**/
    swap5                = 62,/**swap the first and 6th elements**/
    dup3                 = 57,/**duplicate a max element twice**/
    timems               = 2,/**push time in milliseconds**/
    dup2                 = 56,/**duplicate a max element twice**/
    swap6                = 63,/**swap the first and 7th elements**/
    swap7                = 64,/**swap the first and 8th elements**/
    timens               = 1,/**push time in nano seconds**/
    func                 = 0,/**declare a function in masm**/
    storem4              = 172,/**store four max length datas**/
    swapx1               = 68,/**swap the first and 12th elements**/
    halt                 = 173,
    loadm2               = 169,/**load two max length datas**/
    swap8                = 65,/**swap the first and 9th elements**/
    swap9                = 66,/**swap the first and 10th elements**/
    storem2              = 171,/**store two max length datas**/
    swapx                = 67,/**swap the first and 11th elements**/
    loadm4               = 170,/**load four max length datas**/
};

#endif //MVM_OPCODES_H