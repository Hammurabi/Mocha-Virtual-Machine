//
// Created by Riverssen on 05.11.18.
//

#ifndef MVM_OPCODES_H
#define MVM_OPCODES_H
enum Op{
//    /**
//     * The following opcodes are not interpreted during runtime, they are used for positioning.
//     */
//    sfunc,
//    nfunc,
//    /**
//     * Interpreted opcodes start here
//     */
//    bsp,
//    sbp,
//    gbp,
//
//    sha256,
//    sha3,
//    ripemd160,
//    keccak256,

    func = 0            ,/** (This opcode won't be interpreted) it creates a marker for an OP_STACK (must end with a return_op of some kind). **/
    hash = 1            ,/** perform a hash on pointer data. **/
    timens = 2          ,/** push a (uint_64) current time in nanoseconds. **/
    timems = 3          ,/** push a (uint_64) current time in milliseconds. **/
    strconst = 4        ,/** push a constant string. **/
    strload = 5         ,/** load a string. **/
    strstore = 6        ,/** store a string. **/
    strsizeof = 7       ,/** store a string. **/
    strcast_a = 8       ,/** cast a string to a pointer. **/
    strcast_ba = 9      ,/** cast a string to a byte array. **/
    strprint = 10       ,/** print a string. **/
    strreturn = 11      ,/** return a string from scope. **/
    mark = 12           ,/** mark a specific location. **/
    jump = 13           ,/** jump to a specific location. **/
    jumptomark = 14     ,/** jump to a specific marked location. **/
    newline = 15        ,/** print a \n character into the console. **/
    ret = 16            ,/** return from this scope. **/
    invoke = 17         ,/** invoke a method. **/
    invokedynamic = 18  ,/** dynamically invoke a method using function pointers. **/
    invokespecial = 19  ,/** invoke a native method using function pointers. **/
    if_t = 20           ,/** if true. **/
    if_f = 21           ,/** if not true. **/
    amemcpy = 22        ,/** copy memory to destination from source. **/
    bspmemcpy = 23      ,/** copy memory to destination from base pointer. **/
    amemcpybsp = 24     ,/** copy memory to pointer from source. **/
    amalloc = 25        ,/** push a const pointer to the stack. **/
    acalloc = 26        ,/** push a const pointer to the stack. **/
    amallocs = 27       ,/** push a const pointer to the stack from size_int16_t. **/
    acallocs = 28       ,/** push a const pointer to the stack from size_int16_t. **/
    abload = 29         ,/** load an int_8 from a pointer. **/
    asload = 30         ,/** load an int_16 from a pointer. **/
    aiload = 31         ,/** load an int_32 from a pointer. **/
    alload = 32         ,/** load an int_64 from a pointer. **/
    aliload = 33        ,/** load an int_128 from a pointer. **/
    allload = 34        ,/** load an int_256 from a pointer. **/
    afload = 35         ,/** load an flt_32 from a pointer. **/
    adload = 36         ,/** load an flt_64 from a pointer. **/
    adfload = 37        ,/** load an flt_128 from a pointer. **/
    addload = 38        ,/** load an flt_256 from a pointer. **/
    aaload = 39         ,/** load a pointer from a pointer. **/
    abstore = 40        ,/** store an int_8 in a pointer. **/
    asstore = 41        ,/** store an int_16 in a pointer. **/
    aistore = 42        ,/** store an int_32 in a pointer. **/
    alstore = 43        ,/** store an int_64 in a pointer. **/
    alistore = 44       ,/** store an int_128 in a pointer. **/
    allstore = 45       ,/** store an int_256 in a pointer. **/
    afstore = 46        ,/** store an flt_32 in a pointer. **/
    adstore = 47        ,/** store an flt_64 in a pointer. **/
    adfstore = 48       ,/** store an flt_128 in a pointer. **/
    addstore = 49       ,/** store an flt_256 in a pointer. **/
    aastore = 50        ,/** store a pointer in a pointer. **/
    baconst = 51        ,/** push a byte array. **/
    baconsts = 52       ,/** push a byte array using size_int16_t **/
    baconsti = 53       ,/** push a byte array using size_int32_t **/
    bacast_a = 54       ,/** cast a byte array into a pointer **/
    basizeof = 55       ,/** push the size of a byte array to stack **/
    printba = 56        ,/** print a byte array. **/
    bconst = 57         ,/** push a const int_8 into the stack. **/
    bconst_0 = 58       ,/** push a const int_8 into the stack (value = 0). **/
    bconst_1 = 59       ,/** push a const int_8 into the stack (value = 1). **/
    bconst_2 = 60       ,/** push a const int_8 into the stack (value = 2). **/
    bconst_3 = 61       ,/** push a const int_8 into the stack (value = 3). **/
    bconst_4 = 62       ,/** push a const int_8 into the stack (value = 4). **/
    bconst_5 = 63       ,/** push a const int_8 into the stack (value = 5). **/
    bconst_6 = 64       ,/** push a const int_8 into the stack (value = 6). **/
    bconst_9 = 65       ,/** push a const int_8 into the stack (value = 9). **/
    bconst_10 = 66      ,/** push a const int_8 into the stack (value = 10). **/
    bconst_11 = 67      ,/** push a const int_8 into the stack (value = 11). **/
    bconst_12 = 68      ,/** push a const int_8 into the stack (value = 12). **/
    bload = 69          ,/** load a int_8 into the stack from local variable. **/
    bload_0 = 70        ,/** load a int_8 into the stack from local variable 0. **/
    bload_1 = 71        ,/** load a int_8 into the stack from local variable 1. **/
    bload_2 = 72        ,/** load a int_8 into the stack from local variable 2. **/
    bload_3 = 73        ,/** load a int_8 into the stack from local variable 3. **/
    bload_4 = 74        ,/** load a int_8 into the stack from local variable 4. **/
    bstore = 75         ,/** store a int_8 from stack into local variable. **/
    bstore_0 = 76       ,/** store a int_8 from stack into local variable 0. **/
    bstore_1 = 77       ,/** store a int_8 from stack into local variable 1. **/
    bstore_2 = 78       ,/** store a int_8 from stack into local variable 2. **/
    bstore_3 = 79       ,/** store a int_8 from stack into local variable 3. **/
    bstore_4 = 80       ,/** store a int_8 from stack into local variable 4. **/
    bcast_b = 81        ,/** cast int_8 to type Byte. **/
    bucast_b = 82       ,/** cast unsigned uint_8 to type Byte. **/
    badd_b = 83         ,/** add int_8 with type Byte. **/
    buadd_b = 84        ,/** add unsigned uint_8 with type Byte. **/
    bsub_b = 85         ,/** subtract int_8 with type Byte. **/
    busub_b = 86        ,/** subtract unsigned uint_8 with type Byte. **/
    bmul_b = 87         ,/** multiply int_8 with type Byte. **/
    bumul_b = 88        ,/** multiply unsigned uint_8 with type Byte. **/
    bdiv_b = 89         ,/** divide int_8 with type Byte. **/
    budiv_b = 90        ,/** divide unsigned uint_8 with type Byte. **/
    bcmpl_b = 91        ,/** compare int_8 less than type Byte. **/
    bucmpl_b = 92       ,/** compare unsigned uint_8 less than type Byte. **/
    bcmpg_b = 93        ,/** compare int_8 greater than type Byte. **/
    bucmpg_b = 94       ,/** compare unsigned uint_8 greater than type Byte. **/
    bcmpe_b = 95        ,/** compare int_8 equal with type Byte. **/
    bucmpe_b = 96       ,/** compare unsigned uint_8 equal with type Byte. **/
    bcmple_b = 97       ,/** compare int_8 less than or equal to type Byte. **/
    bucmple_b = 98      ,/** compare unsigned uint_8 less than or equal to type Byte. **/
    bcmpge_b = 99       ,/** compare int_8 greater than or equal to type Byte. **/
    bucmpge_b = 100     ,/** compare unsigned uint_8 greater than or equal to type Byte. **/
    bcmpne_b = 101      ,/** compare int_8 not equal with type Byte. **/
    bucmpne_b = 102     ,/** compare unsigned uint_8 not equal with type Byte. **/
    bcast_s = 103       ,/** cast int_8 to type Short. **/
    bucast_s = 104      ,/** cast unsigned uint_8 to type Short. **/
    badd_s = 105        ,/** add int_8 with type Short. **/
    buadd_s = 106       ,/** add unsigned uint_8 with type Short. **/
    bsub_s = 107        ,/** subtract int_8 with type Short. **/
    busub_s = 108       ,/** subtract unsigned uint_8 with type Short. **/
    bmul_s = 109        ,/** multiply int_8 with type Short. **/
    bumul_s = 110       ,/** multiply unsigned uint_8 with type Short. **/
    bdiv_s = 111        ,/** divide int_8 with type Short. **/
    budiv_s = 112       ,/** divide unsigned uint_8 with type Short. **/
    bcmpl_s = 113       ,/** compare int_8 less than type Short. **/
    bucmpl_s = 114      ,/** compare unsigned uint_8 less than type Short. **/
    bcmpg_s = 115       ,/** compare int_8 greater than type Short. **/
    bucmpg_s = 116      ,/** compare unsigned uint_8 greater than type Short. **/
    bcmpe_s = 117       ,/** compare int_8 equal with type Short. **/
    bucmpe_s = 118      ,/** compare unsigned uint_8 equal with type Short. **/
    bcmple_s = 119      ,/** compare int_8 less than or equal to type Short. **/
    bucmple_s = 120     ,/** compare unsigned uint_8 less than or equal to type Short. **/
    bcmpge_s = 121      ,/** compare int_8 greater than or equal to type Short. **/
    bucmpge_s = 122     ,/** compare unsigned uint_8 greater than or equal to type Short. **/
    bcmpne_s = 123      ,/** compare int_8 not equal with type Short. **/
    bucmpne_s = 124     ,/** compare unsigned uint_8 not equal with type Short. **/
    bcast_i = 125       ,/** cast int_8 to type Int. **/
    bucast_i = 126      ,/** cast unsigned uint_8 to type Int. **/
    badd_i = 127        ,/** add int_8 with type Int. **/
    buadd_i = 128       ,/** add unsigned uint_8 with type Int. **/
    bsub_i = 129        ,/** subtract int_8 with type Int. **/
    busub_i = 130       ,/** subtract unsigned uint_8 with type Int. **/
    bmul_i = 131        ,/** multiply int_8 with type Int. **/
    bumul_i = 132       ,/** multiply unsigned uint_8 with type Int. **/
    bdiv_i = 133        ,/** divide int_8 with type Int. **/
    budiv_i = 134       ,/** divide unsigned uint_8 with type Int. **/
    bcmpl_i = 135       ,/** compare int_8 less than type Int. **/
    bucmpl_i = 136      ,/** compare unsigned uint_8 less than type Int. **/
    bcmpg_i = 137       ,/** compare int_8 greater than type Int. **/
    bucmpg_i = 138      ,/** compare unsigned uint_8 greater than type Int. **/
    bcmpe_i = 139       ,/** compare int_8 equal with type Int. **/
    bucmpe_i = 140      ,/** compare unsigned uint_8 equal with type Int. **/
    bcmple_i = 141      ,/** compare int_8 less than or equal to type Int. **/
    bucmple_i = 142     ,/** compare unsigned uint_8 less than or equal to type Int. **/
    bcmpge_i = 143      ,/** compare int_8 greater than or equal to type Int. **/
    bucmpge_i = 144     ,/** compare unsigned uint_8 greater than or equal to type Int. **/
    bcmpne_i = 145      ,/** compare int_8 not equal with type Int. **/
    bucmpne_i = 146     ,/** compare unsigned uint_8 not equal with type Int. **/
    bcast_l = 147       ,/** cast int_8 to type Long. **/
    bucast_l = 148      ,/** cast unsigned uint_8 to type Long. **/
    badd_l = 149        ,/** add int_8 with type Long. **/
    buadd_l = 150       ,/** add unsigned uint_8 with type Long. **/
    bsub_l = 151        ,/** subtract int_8 with type Long. **/
    busub_l = 152       ,/** subtract unsigned uint_8 with type Long. **/
    bmul_l = 153        ,/** multiply int_8 with type Long. **/
    bumul_l = 154       ,/** multiply unsigned uint_8 with type Long. **/
    bdiv_l = 155        ,/** divide int_8 with type Long. **/
    budiv_l = 156       ,/** divide unsigned uint_8 with type Long. **/
    bcmpl_l = 157       ,/** compare int_8 less than type Long. **/
    bucmpl_l = 158      ,/** compare unsigned uint_8 less than type Long. **/
    bcmpg_l = 159       ,/** compare int_8 greater than type Long. **/
    bucmpg_l = 160      ,/** compare unsigned uint_8 greater than type Long. **/
    bcmpe_l = 161       ,/** compare int_8 equal with type Long. **/
    bucmpe_l = 162      ,/** compare unsigned uint_8 equal with type Long. **/
    bcmple_l = 163      ,/** compare int_8 less than or equal to type Long. **/
    bucmple_l = 164     ,/** compare unsigned uint_8 less than or equal to type Long. **/
    bcmpge_l = 165      ,/** compare int_8 greater than or equal to type Long. **/
    bucmpge_l = 166     ,/** compare unsigned uint_8 greater than or equal to type Long. **/
    bcmpne_l = 167      ,/** compare int_8 not equal with type Long. **/
    bucmpne_l = 168     ,/** compare unsigned uint_8 not equal with type Long. **/
    bcast_li = 169      ,/** cast int_8 to type LongInt. **/
    bucast_li = 170     ,/** cast unsigned uint_8 to type LongInt. **/
    badd_li = 171       ,/** add int_8 with type LongInt. **/
    buadd_li = 172      ,/** add unsigned uint_8 with type LongInt. **/
    bsub_li = 173       ,/** subtract int_8 with type LongInt. **/
    busub_li = 174      ,/** subtract unsigned uint_8 with type LongInt. **/
    bmul_li = 175       ,/** multiply int_8 with type LongInt. **/
    bumul_li = 176      ,/** multiply unsigned uint_8 with type LongInt. **/
    bdiv_li = 177       ,/** divide int_8 with type LongInt. **/
    budiv_li = 178      ,/** divide unsigned uint_8 with type LongInt. **/
    bcmpl_li = 179      ,/** compare int_8 less than type LongInt. **/
    bucmpl_li = 180     ,/** compare unsigned uint_8 less than type LongInt. **/
    bcmpg_li = 181      ,/** compare int_8 greater than type LongInt. **/
    bucmpg_li = 182     ,/** compare unsigned uint_8 greater than type LongInt. **/
    bcmpe_li = 183      ,/** compare int_8 equal with type LongInt. **/
    bucmpe_li = 184     ,/** compare unsigned uint_8 equal with type LongInt. **/
    bcmple_li = 185     ,/** compare int_8 less than or equal to type LongInt. **/
    bucmple_li = 186    ,/** compare unsigned uint_8 less than or equal to type LongInt. **/
    bcmpge_li = 187     ,/** compare int_8 greater than or equal to type LongInt. **/
    bucmpge_li = 188    ,/** compare unsigned uint_8 greater than or equal to type LongInt. **/
    bcmpne_li = 189     ,/** compare int_8 not equal with type LongInt. **/
    bucmpne_li = 190    ,/** compare unsigned uint_8 not equal with type LongInt. **/
    bcast_ll = 191      ,/** cast int_8 to type LongLong. **/
    bucast_ll = 192     ,/** cast unsigned uint_8 to type LongLong. **/
    badd_ll = 193       ,/** add int_8 with type LongLong. **/
    buadd_ll = 194      ,/** add unsigned uint_8 with type LongLong. **/
    bsub_ll = 195       ,/** subtract int_8 with type LongLong. **/
    busub_ll = 196      ,/** subtract unsigned uint_8 with type LongLong. **/
    bmul_ll = 197       ,/** multiply int_8 with type LongLong. **/
    bumul_ll = 198      ,/** multiply unsigned uint_8 with type LongLong. **/
    bdiv_ll = 199       ,/** divide int_8 with type LongLong. **/
    budiv_ll = 200      ,/** divide unsigned uint_8 with type LongLong. **/
    bcmpl_ll = 201      ,/** compare int_8 less than type LongLong. **/
    bucmpl_ll = 202     ,/** compare unsigned uint_8 less than type LongLong. **/
    bcmpg_ll = 203      ,/** compare int_8 greater than type LongLong. **/
    bucmpg_ll = 204     ,/** compare unsigned uint_8 greater than type LongLong. **/
    bcmpe_ll = 205      ,/** compare int_8 equal with type LongLong. **/
    bucmpe_ll = 206     ,/** compare unsigned uint_8 equal with type LongLong. **/
    bcmple_ll = 207     ,/** compare int_8 less than or equal to type LongLong. **/
    bucmple_ll = 208    ,/** compare unsigned uint_8 less than or equal to type LongLong. **/
    bcmpge_ll = 209     ,/** compare int_8 greater than or equal to type LongLong. **/
    bucmpge_ll = 210    ,/** compare unsigned uint_8 greater than or equal to type LongLong. **/
    bcmpne_ll = 211     ,/** compare int_8 not equal with type LongLong. **/
    bucmpne_ll = 212    ,/** compare unsigned uint_8 not equal with type LongLong. **/
    bcast_f = 213       ,/** cast int_8 to type Float. **/
    bucast_f = 214      ,/** cast unsigned uint_8 to type Float. **/
    badd_f = 215        ,/** add int_8 with type Float. **/
    buadd_f = 216       ,/** add unsigned uint_8 with type Float. **/
    bsub_f = 217        ,/** subtract int_8 with type Float. **/
    busub_f = 218       ,/** subtract unsigned uint_8 with type Float. **/
    bmul_f = 219        ,/** multiply int_8 with type Float. **/
    bumul_f = 220       ,/** multiply unsigned uint_8 with type Float. **/
    bdiv_f = 221        ,/** divide int_8 with type Float. **/
    budiv_f = 222       ,/** divide unsigned uint_8 with type Float. **/
    bcmpl_f = 223       ,/** compare int_8 less than type Float. **/
    bucmpl_f = 224      ,/** compare unsigned uint_8 less than type Float. **/
    bcmpg_f = 225       ,/** compare int_8 greater than type Float. **/
    bucmpg_f = 226      ,/** compare unsigned uint_8 greater than type Float. **/
    bcmpe_f = 227       ,/** compare int_8 equal with type Float. **/
    bucmpe_f = 228      ,/** compare unsigned uint_8 equal with type Float. **/
    bcmple_f = 229      ,/** compare int_8 less than or equal to type Float. **/
    bucmple_f = 230     ,/** compare unsigned uint_8 less than or equal to type Float. **/
    bcmpge_f = 231      ,/** compare int_8 greater than or equal to type Float. **/
    bucmpge_f = 232     ,/** compare unsigned uint_8 greater than or equal to type Float. **/
    bcmpne_f = 233      ,/** compare int_8 not equal with type Float. **/
    bucmpne_f = 234     ,/** compare unsigned uint_8 not equal with type Float. **/
    bcast_d = 235       ,/** cast int_8 to type Double. **/
    bucast_d = 236      ,/** cast unsigned uint_8 to type Double. **/
    badd_d = 237        ,/** add int_8 with type Double. **/
    buadd_d = 238       ,/** add unsigned uint_8 with type Double. **/
    bsub_d = 239        ,/** subtract int_8 with type Double. **/
    busub_d = 240       ,/** subtract unsigned uint_8 with type Double. **/
    bmul_d = 241        ,/** multiply int_8 with type Double. **/
    bumul_d = 242       ,/** multiply unsigned uint_8 with type Double. **/
    bdiv_d = 243        ,/** divide int_8 with type Double. **/
    budiv_d = 244       ,/** divide unsigned uint_8 with type Double. **/
    bcmpl_d = 245       ,/** compare int_8 less than type Double. **/
    bucmpl_d = 246      ,/** compare unsigned uint_8 less than type Double. **/
    bcmpg_d = 247       ,/** compare int_8 greater than type Double. **/
    bucmpg_d = 248      ,/** compare unsigned uint_8 greater than type Double. **/
    bcmpe_d = 249       ,/** compare int_8 equal with type Double. **/
    bucmpe_d = 250      ,/** compare unsigned uint_8 equal with type Double. **/
    bcmple_d = 251      ,/** compare int_8 less than or equal to type Double. **/
    bucmple_d = 252     ,/** compare unsigned uint_8 less than or equal to type Double. **/
    bcmpge_d = 253      ,/** compare int_8 greater than or equal to type Double. **/
    bucmpge_d = 254     ,/** compare unsigned uint_8 greater than or equal to type Double. **/
    bcmpne_d = 255      ,/** compare int_8 not equal with type Double. **/
    bucmpne_d = 256     ,/** compare unsigned uint_8 not equal with type Double. **/
    bcast_df = 257      ,/** cast int_8 to type DoubleFloat. **/
    bucast_df = 258     ,/** cast unsigned uint_8 to type DoubleFloat. **/
    badd_df = 259       ,/** add int_8 with type DoubleFloat. **/
    buadd_df = 260      ,/** add unsigned uint_8 with type DoubleFloat. **/
    bsub_df = 261       ,/** subtract int_8 with type DoubleFloat. **/
    busub_df = 262      ,/** subtract unsigned uint_8 with type DoubleFloat. **/
    bmul_df = 263       ,/** multiply int_8 with type DoubleFloat. **/
    bumul_df = 264      ,/** multiply unsigned uint_8 with type DoubleFloat. **/
    bdiv_df = 265       ,/** divide int_8 with type DoubleFloat. **/
    budiv_df = 266      ,/** divide unsigned uint_8 with type DoubleFloat. **/
    bcmpl_df = 267      ,/** compare int_8 less than type DoubleFloat. **/
    bucmpl_df = 268     ,/** compare unsigned uint_8 less than type DoubleFloat. **/
    bcmpg_df = 269      ,/** compare int_8 greater than type DoubleFloat. **/
    bucmpg_df = 270     ,/** compare unsigned uint_8 greater than type DoubleFloat. **/
    bcmpe_df = 271      ,/** compare int_8 equal with type DoubleFloat. **/
    bucmpe_df = 272     ,/** compare unsigned uint_8 equal with type DoubleFloat. **/
    bcmple_df = 273     ,/** compare int_8 less than or equal to type DoubleFloat. **/
    bucmple_df = 274    ,/** compare unsigned uint_8 less than or equal to type DoubleFloat. **/
    bcmpge_df = 275     ,/** compare int_8 greater than or equal to type DoubleFloat. **/
    bucmpge_df = 276    ,/** compare unsigned uint_8 greater than or equal to type DoubleFloat. **/
    bcmpne_df = 277     ,/** compare int_8 not equal with type DoubleFloat. **/
    bucmpne_df = 278    ,/** compare unsigned uint_8 not equal with type DoubleFloat. **/
    bcast_dd = 279      ,/** cast int_8 to type DoubleDouble. **/
    bucast_dd = 280     ,/** cast unsigned uint_8 to type DoubleDouble. **/
    badd_dd = 281       ,/** add int_8 with type DoubleDouble. **/
    buadd_dd = 282      ,/** add unsigned uint_8 with type DoubleDouble. **/
    bsub_dd = 283       ,/** subtract int_8 with type DoubleDouble. **/
    busub_dd = 284      ,/** subtract unsigned uint_8 with type DoubleDouble. **/
    bmul_dd = 285       ,/** multiply int_8 with type DoubleDouble. **/
    bumul_dd = 286      ,/** multiply unsigned uint_8 with type DoubleDouble. **/
    bdiv_dd = 287       ,/** divide int_8 with type DoubleDouble. **/
    budiv_dd = 288      ,/** divide unsigned uint_8 with type DoubleDouble. **/
    bcmpl_dd = 289      ,/** compare int_8 less than type DoubleDouble. **/
    bucmpl_dd = 290     ,/** compare unsigned uint_8 less than type DoubleDouble. **/
    bcmpg_dd = 291      ,/** compare int_8 greater than type DoubleDouble. **/
    bucmpg_dd = 292     ,/** compare unsigned uint_8 greater than type DoubleDouble. **/
    bcmpe_dd = 293      ,/** compare int_8 equal with type DoubleDouble. **/
    bucmpe_dd = 294     ,/** compare unsigned uint_8 equal with type DoubleDouble. **/
    bcmple_dd = 295     ,/** compare int_8 less than or equal to type DoubleDouble. **/
    bucmple_dd = 296    ,/** compare unsigned uint_8 less than or equal to type DoubleDouble. **/
    bcmpge_dd = 297     ,/** compare int_8 greater than or equal to type DoubleDouble. **/
    bucmpge_dd = 298    ,/** compare unsigned uint_8 greater than or equal to type DoubleDouble. **/
    bcmpne_dd = 299     ,/** compare int_8 not equal with type DoubleDouble. **/
    bucmpne_dd = 300    ,/** compare unsigned uint_8 not equal with type DoubleDouble. **/
    bmod_b = 301        ,/** modulo int_8 with type Byte. **/
    bcast_ub = 302      ,/** cast int_8 to unsigned type Byte. **/
    bucast_ub = 303     ,/** cast unsigned uint_8 to unsigned type Byte. **/
    badd_ub = 304       ,/** add int_8 with unsigned type Byte. **/
    buadd_ub = 305      ,/** add unsigned uint_8 with unsigned type Byte. **/
    bsub_ub = 306       ,/** subtract int_8 with unsigned type Byte. **/
    busub_ub = 307      ,/** subtract unsigned uint_8 with unsigned type Byte. **/
    bmul_ub = 308       ,/** multiply int_8 with unsigned type Byte. **/
    bumul_ub = 309      ,/** multiply unsigned uint_8 with unsigned type Byte. **/
    bdiv_ub = 310       ,/** divide int_8 with unsigned type Byte. **/
    budiv_ub = 311      ,/** divide unsigned uint_8 with unsigned type Byte. **/
    bcmpl_ub = 312      ,/** compare int_8 less than unsigned type Byte. **/
    bucmpl_ub = 313     ,/** compare unsigned uint_8 less than unsigned type Byte. **/
    bcmpg_ub = 314      ,/** compare int_8 greater than unsigned type Byte. **/
    bucmpg_ub = 315     ,/** compare unsigned uint_8 greater than unsigned type Byte. **/
    bcmpe_ub = 316      ,/** compare int_8 equal with unsigned type Byte. **/
    bucmpe_ub = 317     ,/** compare unsigned uint_8 equal with unsigned type Byte. **/
    bcmple_ub = 318     ,/** compare int_8 less than or equal to unsigned type Byte. **/
    bucmple_ub = 319    ,/** compare unsigned uint_8 less than or equal to unsigned type Byte. **/
    bcmpge_ub = 320     ,/** compare int_8 greater than or equal to unsigned type Byte. **/
    bucmpge_ub = 321    ,/** compare unsigned uint_8 greater than or equal to unsigned type Byte. **/
    bcmpne_ub = 322     ,/** compare int_8 not equal with unsigned type Byte. **/
    bucmpne_ub = 323    ,/** compare unsigned uint_8 not equal with unsigned type Byte. **/
    bswapb = 324        ,/** swap the 2 topmost int_8 elements where the top element is a Byte. **/
    bmod_s = 325        ,/** modulo int_8 with type Short. **/
    bcast_us = 326      ,/** cast int_8 to unsigned type Short. **/
    bucast_us = 327     ,/** cast unsigned uint_8 to unsigned type Short. **/
    badd_us = 328       ,/** add int_8 with unsigned type Short. **/
    buadd_us = 329      ,/** add unsigned uint_8 with unsigned type Short. **/
    bsub_us = 330       ,/** subtract int_8 with unsigned type Short. **/
    busub_us = 331      ,/** subtract unsigned uint_8 with unsigned type Short. **/
    bmul_us = 332       ,/** multiply int_8 with unsigned type Short. **/
    bumul_us = 333      ,/** multiply unsigned uint_8 with unsigned type Short. **/
    bdiv_us = 334       ,/** divide int_8 with unsigned type Short. **/
    budiv_us = 335      ,/** divide unsigned uint_8 with unsigned type Short. **/
    bcmpl_us = 336      ,/** compare int_8 less than unsigned type Short. **/
    bucmpl_us = 337     ,/** compare unsigned uint_8 less than unsigned type Short. **/
    bcmpg_us = 338      ,/** compare int_8 greater than unsigned type Short. **/
    bucmpg_us = 339     ,/** compare unsigned uint_8 greater than unsigned type Short. **/
    bcmpe_us = 340      ,/** compare int_8 equal with unsigned type Short. **/
    bucmpe_us = 341     ,/** compare unsigned uint_8 equal with unsigned type Short. **/
    bcmple_us = 342     ,/** compare int_8 less than or equal to unsigned type Short. **/
    bucmple_us = 343    ,/** compare unsigned uint_8 less than or equal to unsigned type Short. **/
    bcmpge_us = 344     ,/** compare int_8 greater than or equal to unsigned type Short. **/
    bucmpge_us = 345    ,/** compare unsigned uint_8 greater than or equal to unsigned type Short. **/
    bcmpne_us = 346     ,/** compare int_8 not equal with unsigned type Short. **/
    bucmpne_us = 347    ,/** compare unsigned uint_8 not equal with unsigned type Short. **/
    bswaps = 348        ,/** swap the 2 topmost int_8 elements where the top element is a Short. **/
    bmod_i = 349        ,/** modulo int_8 with type Int. **/
    bcast_ui = 350      ,/** cast int_8 to unsigned type Int. **/
    bucast_ui = 351     ,/** cast unsigned uint_8 to unsigned type Int. **/
    badd_ui = 352       ,/** add int_8 with unsigned type Int. **/
    buadd_ui = 353      ,/** add unsigned uint_8 with unsigned type Int. **/
    bsub_ui = 354       ,/** subtract int_8 with unsigned type Int. **/
    busub_ui = 355      ,/** subtract unsigned uint_8 with unsigned type Int. **/
    bmul_ui = 356       ,/** multiply int_8 with unsigned type Int. **/
    bumul_ui = 357      ,/** multiply unsigned uint_8 with unsigned type Int. **/
    bdiv_ui = 358       ,/** divide int_8 with unsigned type Int. **/
    budiv_ui = 359      ,/** divide unsigned uint_8 with unsigned type Int. **/
    bcmpl_ui = 360      ,/** compare int_8 less than unsigned type Int. **/
    bucmpl_ui = 361     ,/** compare unsigned uint_8 less than unsigned type Int. **/
    bcmpg_ui = 362      ,/** compare int_8 greater than unsigned type Int. **/
    bucmpg_ui = 363     ,/** compare unsigned uint_8 greater than unsigned type Int. **/
    bcmpe_ui = 364      ,/** compare int_8 equal with unsigned type Int. **/
    bucmpe_ui = 365     ,/** compare unsigned uint_8 equal with unsigned type Int. **/
    bcmple_ui = 366     ,/** compare int_8 less than or equal to unsigned type Int. **/
    bucmple_ui = 367    ,/** compare unsigned uint_8 less than or equal to unsigned type Int. **/
    bcmpge_ui = 368     ,/** compare int_8 greater than or equal to unsigned type Int. **/
    bucmpge_ui = 369    ,/** compare unsigned uint_8 greater than or equal to unsigned type Int. **/
    bcmpne_ui = 370     ,/** compare int_8 not equal with unsigned type Int. **/
    bucmpne_ui = 371    ,/** compare unsigned uint_8 not equal with unsigned type Int. **/
    bswapi = 372        ,/** swap the 2 topmost int_8 elements where the top element is a Int. **/
    bmod_l = 373        ,/** modulo int_8 with type Long. **/
    bcast_ul = 374      ,/** cast int_8 to unsigned type Long. **/
    bucast_ul = 375     ,/** cast unsigned uint_8 to unsigned type Long. **/
    badd_ul = 376       ,/** add int_8 with unsigned type Long. **/
    buadd_ul = 377      ,/** add unsigned uint_8 with unsigned type Long. **/
    bsub_ul = 378       ,/** subtract int_8 with unsigned type Long. **/
    busub_ul = 379      ,/** subtract unsigned uint_8 with unsigned type Long. **/
    bmul_ul = 380       ,/** multiply int_8 with unsigned type Long. **/
    bumul_ul = 381      ,/** multiply unsigned uint_8 with unsigned type Long. **/
    bdiv_ul = 382       ,/** divide int_8 with unsigned type Long. **/
    budiv_ul = 383      ,/** divide unsigned uint_8 with unsigned type Long. **/
    bcmpl_ul = 384      ,/** compare int_8 less than unsigned type Long. **/
    bucmpl_ul = 385     ,/** compare unsigned uint_8 less than unsigned type Long. **/
    bcmpg_ul = 386      ,/** compare int_8 greater than unsigned type Long. **/
    bucmpg_ul = 387     ,/** compare unsigned uint_8 greater than unsigned type Long. **/
    bcmpe_ul = 388      ,/** compare int_8 equal with unsigned type Long. **/
    bucmpe_ul = 389     ,/** compare unsigned uint_8 equal with unsigned type Long. **/
    bcmple_ul = 390     ,/** compare int_8 less than or equal to unsigned type Long. **/
    bucmple_ul = 391    ,/** compare unsigned uint_8 less than or equal to unsigned type Long. **/
    bcmpge_ul = 392     ,/** compare int_8 greater than or equal to unsigned type Long. **/
    bucmpge_ul = 393    ,/** compare unsigned uint_8 greater than or equal to unsigned type Long. **/
    bcmpne_ul = 394     ,/** compare int_8 not equal with unsigned type Long. **/
    bucmpne_ul = 395    ,/** compare unsigned uint_8 not equal with unsigned type Long. **/
    bswapl = 396        ,/** swap the 2 topmost int_8 elements where the top element is a Long. **/
    bmod_li = 397       ,/** modulo int_8 with type LongInt. **/
    bcast_uli = 398     ,/** cast int_8 to unsigned type LongInt. **/
    bucast_uli = 399    ,/** cast unsigned uint_8 to unsigned type LongInt. **/
    badd_uli = 400      ,/** add int_8 with unsigned type LongInt. **/
    buadd_uli = 401     ,/** add unsigned uint_8 with unsigned type LongInt. **/
    bsub_uli = 402      ,/** subtract int_8 with unsigned type LongInt. **/
    busub_uli = 403     ,/** subtract unsigned uint_8 with unsigned type LongInt. **/
    bmul_uli = 404      ,/** multiply int_8 with unsigned type LongInt. **/
    bumul_uli = 405     ,/** multiply unsigned uint_8 with unsigned type LongInt. **/
    bdiv_uli = 406      ,/** divide int_8 with unsigned type LongInt. **/
    budiv_uli = 407     ,/** divide unsigned uint_8 with unsigned type LongInt. **/
    bcmpl_uli = 408     ,/** compare int_8 less than unsigned type LongInt. **/
    bucmpl_uli = 409    ,/** compare unsigned uint_8 less than unsigned type LongInt. **/
    bcmpg_uli = 410     ,/** compare int_8 greater than unsigned type LongInt. **/
    bucmpg_uli = 411    ,/** compare unsigned uint_8 greater than unsigned type LongInt. **/
    bcmpe_uli = 412     ,/** compare int_8 equal with unsigned type LongInt. **/
    bucmpe_uli = 413    ,/** compare unsigned uint_8 equal with unsigned type LongInt. **/
    bcmple_uli = 414    ,/** compare int_8 less than or equal to unsigned type LongInt. **/
    bucmple_uli = 415   ,/** compare unsigned uint_8 less than or equal to unsigned type LongInt. **/
    bcmpge_uli = 416    ,/** compare int_8 greater than or equal to unsigned type LongInt. **/
    bucmpge_uli = 417   ,/** compare unsigned uint_8 greater than or equal to unsigned type LongInt. **/
    bcmpne_uli = 418    ,/** compare int_8 not equal with unsigned type LongInt. **/
    bucmpne_uli = 419   ,/** compare unsigned uint_8 not equal with unsigned type LongInt. **/
    bswapli = 420       ,/** swap the 2 topmost int_8 elements where the top element is a LongInt. **/
    bmod_ll = 421       ,/** modulo int_8 with type LongLong. **/
    bcast_ull = 422     ,/** cast int_8 to unsigned type LongLong. **/
    bucast_ull = 423    ,/** cast unsigned uint_8 to unsigned type LongLong. **/
    badd_ull = 424      ,/** add int_8 with unsigned type LongLong. **/
    buadd_ull = 425     ,/** add unsigned uint_8 with unsigned type LongLong. **/
    bsub_ull = 426      ,/** subtract int_8 with unsigned type LongLong. **/
    busub_ull = 427     ,/** subtract unsigned uint_8 with unsigned type LongLong. **/
    bmul_ull = 428      ,/** multiply int_8 with unsigned type LongLong. **/
    bumul_ull = 429     ,/** multiply unsigned uint_8 with unsigned type LongLong. **/
    bdiv_ull = 430      ,/** divide int_8 with unsigned type LongLong. **/
    budiv_ull = 431     ,/** divide unsigned uint_8 with unsigned type LongLong. **/
    bcmpl_ull = 432     ,/** compare int_8 less than unsigned type LongLong. **/
    bucmpl_ull = 433    ,/** compare unsigned uint_8 less than unsigned type LongLong. **/
    bcmpg_ull = 434     ,/** compare int_8 greater than unsigned type LongLong. **/
    bucmpg_ull = 435    ,/** compare unsigned uint_8 greater than unsigned type LongLong. **/
    bcmpe_ull = 436     ,/** compare int_8 equal with unsigned type LongLong. **/
    bucmpe_ull = 437    ,/** compare unsigned uint_8 equal with unsigned type LongLong. **/
    bcmple_ull = 438    ,/** compare int_8 less than or equal to unsigned type LongLong. **/
    bucmple_ull = 439   ,/** compare unsigned uint_8 less than or equal to unsigned type LongLong. **/
    bcmpge_ull = 440    ,/** compare int_8 greater than or equal to unsigned type LongLong. **/
    bucmpge_ull = 441   ,/** compare unsigned uint_8 greater than or equal to unsigned type LongLong. **/
    bcmpne_ull = 442    ,/** compare int_8 not equal with unsigned type LongLong. **/
    bucmpne_ull = 443   ,/** compare unsigned uint_8 not equal with unsigned type LongLong. **/
    bswapll = 444       ,/** swap the 2 topmost int_8 elements where the top element is a LongLong. **/
    bswapf = 445        ,/** swap the 2 topmost int_8 elements where the top element is a Float. **/
    bswapd = 446        ,/** swap the 2 topmost int_8 elements where the top element is a Double. **/
    bswapdf = 447       ,/** swap the 2 topmost int_8 elements where the top element is a DoubleFloat. **/
    bswapdd = 448       ,/** swap the 2 topmost int_8 elements where the top element is a DoubleDouble. **/
    bswapa = 449        ,/** swap the 2 topmost int_8 elements where the top element is a Pointer. **/
    band_b = 450        ,/** bitwise and int_8 with type Byte. **/
    bor_b = 451         ,/** bitwise or int_8 with type Byte. **/
    bxor_b = 452        ,/** bitwise xor int_8 with type Byte. **/
    bshftr_b = 453      ,/** shift right int_8 with type Byte. **/
    bshftl_b = 454      ,/** shift left xor int_8 with type Byte. **/
    band_s = 455        ,/** bitwise and int_8 with type Short. **/
    bor_s = 456         ,/** bitwise or int_8 with type Short. **/
    bxor_s = 457        ,/** bitwise xor int_8 with type Short. **/
    bshftr_s = 458      ,/** shift right int_8 with type Short. **/
    bshftl_s = 459      ,/** shift left xor int_8 with type Short. **/
    band_i = 460        ,/** bitwise and int_8 with type Int. **/
    bor_i = 461         ,/** bitwise or int_8 with type Int. **/
    bxor_i = 462        ,/** bitwise xor int_8 with type Int. **/
    bshftr_i = 463      ,/** shift right int_8 with type Int. **/
    bshftl_i = 464      ,/** shift left xor int_8 with type Int. **/
    band_l = 465        ,/** bitwise and int_8 with type Long. **/
    bor_l = 466         ,/** bitwise or int_8 with type Long. **/
    bxor_l = 467        ,/** bitwise xor int_8 with type Long. **/
    bshftr_l = 468      ,/** shift right int_8 with type Long. **/
    bshftl_l = 469      ,/** shift left xor int_8 with type Long. **/
    band_li = 470       ,/** bitwise and int_8 with type LongInt. **/
    bor_li = 471        ,/** bitwise or int_8 with type LongInt. **/
    bxor_li = 472       ,/** bitwise xor int_8 with type LongInt. **/
    bshftr_li = 473     ,/** shift right int_8 with type LongInt. **/
    bshftl_li = 474     ,/** shift left xor int_8 with type LongInt. **/
    band_ll = 475       ,/** bitwise and int_8 with type LongLong. **/
    bor_ll = 476        ,/** bitwise or int_8 with type LongLong. **/
    bxor_ll = 477       ,/** bitwise xor int_8 with type LongLong. **/
    bshftr_ll = 478     ,/** shift right int_8 with type LongLong. **/
    bshftl_ll = 479     ,/** shift left xor int_8 with type LongLong. **/
    bdup = 480          ,/** duplicate a int_8 on the stack. **/
    bdup2 = 481         ,/** duplicate a int_8 2 times on the stack. **/
    bdup3 = 482         ,/** duplicate a int_8 3 times on the stack. **/
    bdup4 = 483         ,/** duplicate a int_8 4 times on the stack. **/
    bdup5 = 484         ,/** duplicate a int_8 5 times on the stack. **/
    bswap = 485         ,/** swap the 2 topmost int_8 elements. **/
    brot = 486          ,/** rotate the 3 topmost int_8 elements. **/
    bset = 487          ,/** set a int_8 from stack into a field on base pointer. **/
    bget = 488          ,/** get a int_8 from a field on base pointer to stack. **/
    bvset = 489         ,/** set a int_8 from value into a field on base pointer. **/
    bsget = 490         ,/** get a int_8 from a field on base pointer to stack using address from stack. **/
    bsset = 491         ,/** set a int_8 from stack into a field on base pointer using address from stack. **/
    bsetl = 492         ,/** set a int_8 from local variable into a field on base pointer. **/
    binc_1 = 493        ,/** increment int_8 by 1 on stack. **/
    binc_2 = 494        ,/** increment int_8 by 2 on stack. **/
    bstinc_1 = 495      ,/** increment int_8 by 1 on stack. **/
    bstinc_2 = 496      ,/** increment int_8 by 2 on stack. **/
    breturn = 497       ,/** return a int_8 into the main stack. **/
    bmainst = 498       ,/** store a int_8 from main stack in a local variable.. **/
    bmainst_0 = 499     ,/** store a int_8 from main stack in local variable 0. **/
    bmainst_1 = 500     ,/** store a int_8 from main stack in local variable 1. **/
    bmainst_2 = 501     ,/** store a int_8 from main stack in local variable 2. **/
    bmainst_3 = 502     ,/** store a int_8 from main stack in local variable 3. **/
    bprint = 503        ,/** print a int_8 from stack. **/
    buprint = 504       ,/** print a unsigned uint_8 from stack. **/
    sconst = 505        ,/** push a const int_16 into the stack. **/
    sconst_0 = 506      ,/** push a const int_16 into the stack (value = 0). **/
    sconst_1 = 507      ,/** push a const int_16 into the stack (value = 1). **/
    sconst_2 = 508      ,/** push a const int_16 into the stack (value = 2). **/
    sconst_3 = 509      ,/** push a const int_16 into the stack (value = 3). **/
    sconst_4 = 510      ,/** push a const int_16 into the stack (value = 4). **/
    sconst_5 = 511      ,/** push a const int_16 into the stack (value = 5). **/
    sconst_6 = 512      ,/** push a const int_16 into the stack (value = 6). **/
    sconst_9 = 513      ,/** push a const int_16 into the stack (value = 9). **/
    sconst_10 = 514     ,/** push a const int_16 into the stack (value = 10). **/
    sconst_11 = 515     ,/** push a const int_16 into the stack (value = 11). **/
    sconst_12 = 516     ,/** push a const int_16 into the stack (value = 12). **/
    sload = 517         ,/** load a int_16 into the stack from local variable. **/
    sload_0 = 518       ,/** load a int_16 into the stack from local variable 0. **/
    sload_1 = 519       ,/** load a int_16 into the stack from local variable 1. **/
    sload_2 = 520       ,/** load a int_16 into the stack from local variable 2. **/
    sload_3 = 521       ,/** load a int_16 into the stack from local variable 3. **/
    sload_4 = 522       ,/** load a int_16 into the stack from local variable 4. **/
    sstore = 523        ,/** store a int_16 from stack into local variable. **/
    sstore_0 = 524      ,/** store a int_16 from stack into local variable 0. **/
    sstore_1 = 525      ,/** store a int_16 from stack into local variable 1. **/
    sstore_2 = 526      ,/** store a int_16 from stack into local variable 2. **/
    sstore_3 = 527      ,/** store a int_16 from stack into local variable 3. **/
    sstore_4 = 528      ,/** store a int_16 from stack into local variable 4. **/
    scast_b = 529       ,/** cast int_16 to type Byte. **/
    sucast_b = 530      ,/** cast unsigned uint_16 to type Byte. **/
    sadd_b = 531        ,/** add int_16 with type Byte. **/
    suadd_b = 532       ,/** add unsigned uint_16 with type Byte. **/
    ssub_b = 533        ,/** subtract int_16 with type Byte. **/
    susub_b = 534       ,/** subtract unsigned uint_16 with type Byte. **/
    smul_b = 535        ,/** multiply int_16 with type Byte. **/
    sumul_b = 536       ,/** multiply unsigned uint_16 with type Byte. **/
    sdiv_b = 537        ,/** divide int_16 with type Byte. **/
    sudiv_b = 538       ,/** divide unsigned uint_16 with type Byte. **/
    scmpl_b = 539       ,/** compare int_16 less than type Byte. **/
    sucmpl_b = 540      ,/** compare unsigned uint_16 less than type Byte. **/
    scmpg_b = 541       ,/** compare int_16 greater than type Byte. **/
    sucmpg_b = 542      ,/** compare unsigned uint_16 greater than type Byte. **/
    scmpe_b = 543       ,/** compare int_16 equal with type Byte. **/
    sucmpe_b = 544      ,/** compare unsigned uint_16 equal with type Byte. **/
    scmple_b = 545      ,/** compare int_16 less than or equal to type Byte. **/
    sucmple_b = 546     ,/** compare unsigned uint_16 less than or equal to type Byte. **/
    scmpge_b = 547      ,/** compare int_16 greater than or equal to type Byte. **/
    sucmpge_b = 548     ,/** compare unsigned uint_16 greater than or equal to type Byte. **/
    scmpne_b = 549      ,/** compare int_16 not equal with type Byte. **/
    sucmpne_b = 550     ,/** compare unsigned uint_16 not equal with type Byte. **/
    scast_s = 551       ,/** cast int_16 to type Short. **/
    sucast_s = 552      ,/** cast unsigned uint_16 to type Short. **/
    sadd_s = 553        ,/** add int_16 with type Short. **/
    suadd_s = 554       ,/** add unsigned uint_16 with type Short. **/
    ssub_s = 555        ,/** subtract int_16 with type Short. **/
    susub_s = 556       ,/** subtract unsigned uint_16 with type Short. **/
    smul_s = 557        ,/** multiply int_16 with type Short. **/
    sumul_s = 558       ,/** multiply unsigned uint_16 with type Short. **/
    sdiv_s = 559        ,/** divide int_16 with type Short. **/
    sudiv_s = 560       ,/** divide unsigned uint_16 with type Short. **/
    scmpl_s = 561       ,/** compare int_16 less than type Short. **/
    sucmpl_s = 562      ,/** compare unsigned uint_16 less than type Short. **/
    scmpg_s = 563       ,/** compare int_16 greater than type Short. **/
    sucmpg_s = 564      ,/** compare unsigned uint_16 greater than type Short. **/
    scmpe_s = 565       ,/** compare int_16 equal with type Short. **/
    sucmpe_s = 566      ,/** compare unsigned uint_16 equal with type Short. **/
    scmple_s = 567      ,/** compare int_16 less than or equal to type Short. **/
    sucmple_s = 568     ,/** compare unsigned uint_16 less than or equal to type Short. **/
    scmpge_s = 569      ,/** compare int_16 greater than or equal to type Short. **/
    sucmpge_s = 570     ,/** compare unsigned uint_16 greater than or equal to type Short. **/
    scmpne_s = 571      ,/** compare int_16 not equal with type Short. **/
    sucmpne_s = 572     ,/** compare unsigned uint_16 not equal with type Short. **/
    scast_i = 573       ,/** cast int_16 to type Int. **/
    sucast_i = 574      ,/** cast unsigned uint_16 to type Int. **/
    sadd_i = 575        ,/** add int_16 with type Int. **/
    suadd_i = 576       ,/** add unsigned uint_16 with type Int. **/
    ssub_i = 577        ,/** subtract int_16 with type Int. **/
    susub_i = 578       ,/** subtract unsigned uint_16 with type Int. **/
    smul_i = 579        ,/** multiply int_16 with type Int. **/
    sumul_i = 580       ,/** multiply unsigned uint_16 with type Int. **/
    sdiv_i = 581        ,/** divide int_16 with type Int. **/
    sudiv_i = 582       ,/** divide unsigned uint_16 with type Int. **/
    scmpl_i = 583       ,/** compare int_16 less than type Int. **/
    sucmpl_i = 584      ,/** compare unsigned uint_16 less than type Int. **/
    scmpg_i = 585       ,/** compare int_16 greater than type Int. **/
    sucmpg_i = 586      ,/** compare unsigned uint_16 greater than type Int. **/
    scmpe_i = 587       ,/** compare int_16 equal with type Int. **/
    sucmpe_i = 588      ,/** compare unsigned uint_16 equal with type Int. **/
    scmple_i = 589      ,/** compare int_16 less than or equal to type Int. **/
    sucmple_i = 590     ,/** compare unsigned uint_16 less than or equal to type Int. **/
    scmpge_i = 591      ,/** compare int_16 greater than or equal to type Int. **/
    sucmpge_i = 592     ,/** compare unsigned uint_16 greater than or equal to type Int. **/
    scmpne_i = 593      ,/** compare int_16 not equal with type Int. **/
    sucmpne_i = 594     ,/** compare unsigned uint_16 not equal with type Int. **/
    scast_l = 595       ,/** cast int_16 to type Long. **/
    sucast_l = 596      ,/** cast unsigned uint_16 to type Long. **/
    sadd_l = 597        ,/** add int_16 with type Long. **/
    suadd_l = 598       ,/** add unsigned uint_16 with type Long. **/
    ssub_l = 599        ,/** subtract int_16 with type Long. **/
    susub_l = 600       ,/** subtract unsigned uint_16 with type Long. **/
    smul_l = 601        ,/** multiply int_16 with type Long. **/
    sumul_l = 602       ,/** multiply unsigned uint_16 with type Long. **/
    sdiv_l = 603        ,/** divide int_16 with type Long. **/
    sudiv_l = 604       ,/** divide unsigned uint_16 with type Long. **/
    scmpl_l = 605       ,/** compare int_16 less than type Long. **/
    sucmpl_l = 606      ,/** compare unsigned uint_16 less than type Long. **/
    scmpg_l = 607       ,/** compare int_16 greater than type Long. **/
    sucmpg_l = 608      ,/** compare unsigned uint_16 greater than type Long. **/
    scmpe_l = 609       ,/** compare int_16 equal with type Long. **/
    sucmpe_l = 610      ,/** compare unsigned uint_16 equal with type Long. **/
    scmple_l = 611      ,/** compare int_16 less than or equal to type Long. **/
    sucmple_l = 612     ,/** compare unsigned uint_16 less than or equal to type Long. **/
    scmpge_l = 613      ,/** compare int_16 greater than or equal to type Long. **/
    sucmpge_l = 614     ,/** compare unsigned uint_16 greater than or equal to type Long. **/
    scmpne_l = 615      ,/** compare int_16 not equal with type Long. **/
    sucmpne_l = 616     ,/** compare unsigned uint_16 not equal with type Long. **/
    scast_li = 617      ,/** cast int_16 to type LongInt. **/
    sucast_li = 618     ,/** cast unsigned uint_16 to type LongInt. **/
    sadd_li = 619       ,/** add int_16 with type LongInt. **/
    suadd_li = 620      ,/** add unsigned uint_16 with type LongInt. **/
    ssub_li = 621       ,/** subtract int_16 with type LongInt. **/
    susub_li = 622      ,/** subtract unsigned uint_16 with type LongInt. **/
    smul_li = 623       ,/** multiply int_16 with type LongInt. **/
    sumul_li = 624      ,/** multiply unsigned uint_16 with type LongInt. **/
    sdiv_li = 625       ,/** divide int_16 with type LongInt. **/
    sudiv_li = 626      ,/** divide unsigned uint_16 with type LongInt. **/
    scmpl_li = 627      ,/** compare int_16 less than type LongInt. **/
    sucmpl_li = 628     ,/** compare unsigned uint_16 less than type LongInt. **/
    scmpg_li = 629      ,/** compare int_16 greater than type LongInt. **/
    sucmpg_li = 630     ,/** compare unsigned uint_16 greater than type LongInt. **/
    scmpe_li = 631      ,/** compare int_16 equal with type LongInt. **/
    sucmpe_li = 632     ,/** compare unsigned uint_16 equal with type LongInt. **/
    scmple_li = 633     ,/** compare int_16 less than or equal to type LongInt. **/
    sucmple_li = 634    ,/** compare unsigned uint_16 less than or equal to type LongInt. **/
    scmpge_li = 635     ,/** compare int_16 greater than or equal to type LongInt. **/
    sucmpge_li = 636    ,/** compare unsigned uint_16 greater than or equal to type LongInt. **/
    scmpne_li = 637     ,/** compare int_16 not equal with type LongInt. **/
    sucmpne_li = 638    ,/** compare unsigned uint_16 not equal with type LongInt. **/
    scast_ll = 639      ,/** cast int_16 to type LongLong. **/
    sucast_ll = 640     ,/** cast unsigned uint_16 to type LongLong. **/
    sadd_ll = 641       ,/** add int_16 with type LongLong. **/
    suadd_ll = 642      ,/** add unsigned uint_16 with type LongLong. **/
    ssub_ll = 643       ,/** subtract int_16 with type LongLong. **/
    susub_ll = 644      ,/** subtract unsigned uint_16 with type LongLong. **/
    smul_ll = 645       ,/** multiply int_16 with type LongLong. **/
    sumul_ll = 646      ,/** multiply unsigned uint_16 with type LongLong. **/
    sdiv_ll = 647       ,/** divide int_16 with type LongLong. **/
    sudiv_ll = 648      ,/** divide unsigned uint_16 with type LongLong. **/
    scmpl_ll = 649      ,/** compare int_16 less than type LongLong. **/
    sucmpl_ll = 650     ,/** compare unsigned uint_16 less than type LongLong. **/
    scmpg_ll = 651      ,/** compare int_16 greater than type LongLong. **/
    sucmpg_ll = 652     ,/** compare unsigned uint_16 greater than type LongLong. **/
    scmpe_ll = 653      ,/** compare int_16 equal with type LongLong. **/
    sucmpe_ll = 654     ,/** compare unsigned uint_16 equal with type LongLong. **/
    scmple_ll = 655     ,/** compare int_16 less than or equal to type LongLong. **/
    sucmple_ll = 656    ,/** compare unsigned uint_16 less than or equal to type LongLong. **/
    scmpge_ll = 657     ,/** compare int_16 greater than or equal to type LongLong. **/
    sucmpge_ll = 658    ,/** compare unsigned uint_16 greater than or equal to type LongLong. **/
    scmpne_ll = 659     ,/** compare int_16 not equal with type LongLong. **/
    sucmpne_ll = 660    ,/** compare unsigned uint_16 not equal with type LongLong. **/
    scast_f = 661       ,/** cast int_16 to type Float. **/
    sucast_f = 662      ,/** cast unsigned uint_16 to type Float. **/
    sadd_f = 663        ,/** add int_16 with type Float. **/
    suadd_f = 664       ,/** add unsigned uint_16 with type Float. **/
    ssub_f = 665        ,/** subtract int_16 with type Float. **/
    susub_f = 666       ,/** subtract unsigned uint_16 with type Float. **/
    smul_f = 667        ,/** multiply int_16 with type Float. **/
    sumul_f = 668       ,/** multiply unsigned uint_16 with type Float. **/
    sdiv_f = 669        ,/** divide int_16 with type Float. **/
    sudiv_f = 670       ,/** divide unsigned uint_16 with type Float. **/
    scmpl_f = 671       ,/** compare int_16 less than type Float. **/
    sucmpl_f = 672      ,/** compare unsigned uint_16 less than type Float. **/
    scmpg_f = 673       ,/** compare int_16 greater than type Float. **/
    sucmpg_f = 674      ,/** compare unsigned uint_16 greater than type Float. **/
    scmpe_f = 675       ,/** compare int_16 equal with type Float. **/
    sucmpe_f = 676      ,/** compare unsigned uint_16 equal with type Float. **/
    scmple_f = 677      ,/** compare int_16 less than or equal to type Float. **/
    sucmple_f = 678     ,/** compare unsigned uint_16 less than or equal to type Float. **/
    scmpge_f = 679      ,/** compare int_16 greater than or equal to type Float. **/
    sucmpge_f = 680     ,/** compare unsigned uint_16 greater than or equal to type Float. **/
    scmpne_f = 681      ,/** compare int_16 not equal with type Float. **/
    sucmpne_f = 682     ,/** compare unsigned uint_16 not equal with type Float. **/
    scast_d = 683       ,/** cast int_16 to type Double. **/
    sucast_d = 684      ,/** cast unsigned uint_16 to type Double. **/
    sadd_d = 685        ,/** add int_16 with type Double. **/
    suadd_d = 686       ,/** add unsigned uint_16 with type Double. **/
    ssub_d = 687        ,/** subtract int_16 with type Double. **/
    susub_d = 688       ,/** subtract unsigned uint_16 with type Double. **/
    smul_d = 689        ,/** multiply int_16 with type Double. **/
    sumul_d = 690       ,/** multiply unsigned uint_16 with type Double. **/
    sdiv_d = 691        ,/** divide int_16 with type Double. **/
    sudiv_d = 692       ,/** divide unsigned uint_16 with type Double. **/
    scmpl_d = 693       ,/** compare int_16 less than type Double. **/
    sucmpl_d = 694      ,/** compare unsigned uint_16 less than type Double. **/
    scmpg_d = 695       ,/** compare int_16 greater than type Double. **/
    sucmpg_d = 696      ,/** compare unsigned uint_16 greater than type Double. **/
    scmpe_d = 697       ,/** compare int_16 equal with type Double. **/
    sucmpe_d = 698      ,/** compare unsigned uint_16 equal with type Double. **/
    scmple_d = 699      ,/** compare int_16 less than or equal to type Double. **/
    sucmple_d = 700     ,/** compare unsigned uint_16 less than or equal to type Double. **/
    scmpge_d = 701      ,/** compare int_16 greater than or equal to type Double. **/
    sucmpge_d = 702     ,/** compare unsigned uint_16 greater than or equal to type Double. **/
    scmpne_d = 703      ,/** compare int_16 not equal with type Double. **/
    sucmpne_d = 704     ,/** compare unsigned uint_16 not equal with type Double. **/
    scast_df = 705      ,/** cast int_16 to type DoubleFloat. **/
    sucast_df = 706     ,/** cast unsigned uint_16 to type DoubleFloat. **/
    sadd_df = 707       ,/** add int_16 with type DoubleFloat. **/
    suadd_df = 708      ,/** add unsigned uint_16 with type DoubleFloat. **/
    ssub_df = 709       ,/** subtract int_16 with type DoubleFloat. **/
    susub_df = 710      ,/** subtract unsigned uint_16 with type DoubleFloat. **/
    smul_df = 711       ,/** multiply int_16 with type DoubleFloat. **/
    sumul_df = 712      ,/** multiply unsigned uint_16 with type DoubleFloat. **/
    sdiv_df = 713       ,/** divide int_16 with type DoubleFloat. **/
    sudiv_df = 714      ,/** divide unsigned uint_16 with type DoubleFloat. **/
    scmpl_df = 715      ,/** compare int_16 less than type DoubleFloat. **/
    sucmpl_df = 716     ,/** compare unsigned uint_16 less than type DoubleFloat. **/
    scmpg_df = 717      ,/** compare int_16 greater than type DoubleFloat. **/
    sucmpg_df = 718     ,/** compare unsigned uint_16 greater than type DoubleFloat. **/
    scmpe_df = 719      ,/** compare int_16 equal with type DoubleFloat. **/
    sucmpe_df = 720     ,/** compare unsigned uint_16 equal with type DoubleFloat. **/
    scmple_df = 721     ,/** compare int_16 less than or equal to type DoubleFloat. **/
    sucmple_df = 722    ,/** compare unsigned uint_16 less than or equal to type DoubleFloat. **/
    scmpge_df = 723     ,/** compare int_16 greater than or equal to type DoubleFloat. **/
    sucmpge_df = 724    ,/** compare unsigned uint_16 greater than or equal to type DoubleFloat. **/
    scmpne_df = 725     ,/** compare int_16 not equal with type DoubleFloat. **/
    sucmpne_df = 726    ,/** compare unsigned uint_16 not equal with type DoubleFloat. **/
    scast_dd = 727      ,/** cast int_16 to type DoubleDouble. **/
    sucast_dd = 728     ,/** cast unsigned uint_16 to type DoubleDouble. **/
    sadd_dd = 729       ,/** add int_16 with type DoubleDouble. **/
    suadd_dd = 730      ,/** add unsigned uint_16 with type DoubleDouble. **/
    ssub_dd = 731       ,/** subtract int_16 with type DoubleDouble. **/
    susub_dd = 732      ,/** subtract unsigned uint_16 with type DoubleDouble. **/
    smul_dd = 733       ,/** multiply int_16 with type DoubleDouble. **/
    sumul_dd = 734      ,/** multiply unsigned uint_16 with type DoubleDouble. **/
    sdiv_dd = 735       ,/** divide int_16 with type DoubleDouble. **/
    sudiv_dd = 736      ,/** divide unsigned uint_16 with type DoubleDouble. **/
    scmpl_dd = 737      ,/** compare int_16 less than type DoubleDouble. **/
    sucmpl_dd = 738     ,/** compare unsigned uint_16 less than type DoubleDouble. **/
    scmpg_dd = 739      ,/** compare int_16 greater than type DoubleDouble. **/
    sucmpg_dd = 740     ,/** compare unsigned uint_16 greater than type DoubleDouble. **/
    scmpe_dd = 741      ,/** compare int_16 equal with type DoubleDouble. **/
    sucmpe_dd = 742     ,/** compare unsigned uint_16 equal with type DoubleDouble. **/
    scmple_dd = 743     ,/** compare int_16 less than or equal to type DoubleDouble. **/
    sucmple_dd = 744    ,/** compare unsigned uint_16 less than or equal to type DoubleDouble. **/
    scmpge_dd = 745     ,/** compare int_16 greater than or equal to type DoubleDouble. **/
    sucmpge_dd = 746    ,/** compare unsigned uint_16 greater than or equal to type DoubleDouble. **/
    scmpne_dd = 747     ,/** compare int_16 not equal with type DoubleDouble. **/
    sucmpne_dd = 748    ,/** compare unsigned uint_16 not equal with type DoubleDouble. **/
    smod_b = 749        ,/** modulo int_16 with type Byte. **/
    scast_ub = 750      ,/** cast int_16 to unsigned type Byte. **/
    sucast_ub = 751     ,/** cast unsigned uint_16 to unsigned type Byte. **/
    sadd_ub = 752       ,/** add int_16 with unsigned type Byte. **/
    suadd_ub = 753      ,/** add unsigned uint_16 with unsigned type Byte. **/
    ssub_ub = 754       ,/** subtract int_16 with unsigned type Byte. **/
    susub_ub = 755      ,/** subtract unsigned uint_16 with unsigned type Byte. **/
    smul_ub = 756       ,/** multiply int_16 with unsigned type Byte. **/
    sumul_ub = 757      ,/** multiply unsigned uint_16 with unsigned type Byte. **/
    sdiv_ub = 758       ,/** divide int_16 with unsigned type Byte. **/
    sudiv_ub = 759      ,/** divide unsigned uint_16 with unsigned type Byte. **/
    scmpl_ub = 760      ,/** compare int_16 less than unsigned type Byte. **/
    sucmpl_ub = 761     ,/** compare unsigned uint_16 less than unsigned type Byte. **/
    scmpg_ub = 762      ,/** compare int_16 greater than unsigned type Byte. **/
    sucmpg_ub = 763     ,/** compare unsigned uint_16 greater than unsigned type Byte. **/
    scmpe_ub = 764      ,/** compare int_16 equal with unsigned type Byte. **/
    sucmpe_ub = 765     ,/** compare unsigned uint_16 equal with unsigned type Byte. **/
    scmple_ub = 766     ,/** compare int_16 less than or equal to unsigned type Byte. **/
    sucmple_ub = 767    ,/** compare unsigned uint_16 less than or equal to unsigned type Byte. **/
    scmpge_ub = 768     ,/** compare int_16 greater than or equal to unsigned type Byte. **/
    sucmpge_ub = 769    ,/** compare unsigned uint_16 greater than or equal to unsigned type Byte. **/
    scmpne_ub = 770     ,/** compare int_16 not equal with unsigned type Byte. **/
    sucmpne_ub = 771    ,/** compare unsigned uint_16 not equal with unsigned type Byte. **/
    sswapb = 772        ,/** swap the 2 topmost int_16 elements where the top element is a Byte. **/
    smod_s = 773        ,/** modulo int_16 with type Short. **/
    scast_us = 774      ,/** cast int_16 to unsigned type Short. **/
    sucast_us = 775     ,/** cast unsigned uint_16 to unsigned type Short. **/
    sadd_us = 776       ,/** add int_16 with unsigned type Short. **/
    suadd_us = 777      ,/** add unsigned uint_16 with unsigned type Short. **/
    ssub_us = 778       ,/** subtract int_16 with unsigned type Short. **/
    susub_us = 779      ,/** subtract unsigned uint_16 with unsigned type Short. **/
    smul_us = 780       ,/** multiply int_16 with unsigned type Short. **/
    sumul_us = 781      ,/** multiply unsigned uint_16 with unsigned type Short. **/
    sdiv_us = 782       ,/** divide int_16 with unsigned type Short. **/
    sudiv_us = 783      ,/** divide unsigned uint_16 with unsigned type Short. **/
    scmpl_us = 784      ,/** compare int_16 less than unsigned type Short. **/
    sucmpl_us = 785     ,/** compare unsigned uint_16 less than unsigned type Short. **/
    scmpg_us = 786      ,/** compare int_16 greater than unsigned type Short. **/
    sucmpg_us = 787     ,/** compare unsigned uint_16 greater than unsigned type Short. **/
    scmpe_us = 788      ,/** compare int_16 equal with unsigned type Short. **/
    sucmpe_us = 789     ,/** compare unsigned uint_16 equal with unsigned type Short. **/
    scmple_us = 790     ,/** compare int_16 less than or equal to unsigned type Short. **/
    sucmple_us = 791    ,/** compare unsigned uint_16 less than or equal to unsigned type Short. **/
    scmpge_us = 792     ,/** compare int_16 greater than or equal to unsigned type Short. **/
    sucmpge_us = 793    ,/** compare unsigned uint_16 greater than or equal to unsigned type Short. **/
    scmpne_us = 794     ,/** compare int_16 not equal with unsigned type Short. **/
    sucmpne_us = 795    ,/** compare unsigned uint_16 not equal with unsigned type Short. **/
    sswaps = 796        ,/** swap the 2 topmost int_16 elements where the top element is a Short. **/
    smod_i = 797        ,/** modulo int_16 with type Int. **/
    scast_ui = 798      ,/** cast int_16 to unsigned type Int. **/
    sucast_ui = 799     ,/** cast unsigned uint_16 to unsigned type Int. **/
    sadd_ui = 800       ,/** add int_16 with unsigned type Int. **/
    suadd_ui = 801      ,/** add unsigned uint_16 with unsigned type Int. **/
    ssub_ui = 802       ,/** subtract int_16 with unsigned type Int. **/
    susub_ui = 803      ,/** subtract unsigned uint_16 with unsigned type Int. **/
    smul_ui = 804       ,/** multiply int_16 with unsigned type Int. **/
    sumul_ui = 805      ,/** multiply unsigned uint_16 with unsigned type Int. **/
    sdiv_ui = 806       ,/** divide int_16 with unsigned type Int. **/
    sudiv_ui = 807      ,/** divide unsigned uint_16 with unsigned type Int. **/
    scmpl_ui = 808      ,/** compare int_16 less than unsigned type Int. **/
    sucmpl_ui = 809     ,/** compare unsigned uint_16 less than unsigned type Int. **/
    scmpg_ui = 810      ,/** compare int_16 greater than unsigned type Int. **/
    sucmpg_ui = 811     ,/** compare unsigned uint_16 greater than unsigned type Int. **/
    scmpe_ui = 812      ,/** compare int_16 equal with unsigned type Int. **/
    sucmpe_ui = 813     ,/** compare unsigned uint_16 equal with unsigned type Int. **/
    scmple_ui = 814     ,/** compare int_16 less than or equal to unsigned type Int. **/
    sucmple_ui = 815    ,/** compare unsigned uint_16 less than or equal to unsigned type Int. **/
    scmpge_ui = 816     ,/** compare int_16 greater than or equal to unsigned type Int. **/
    sucmpge_ui = 817    ,/** compare unsigned uint_16 greater than or equal to unsigned type Int. **/
    scmpne_ui = 818     ,/** compare int_16 not equal with unsigned type Int. **/
    sucmpne_ui = 819    ,/** compare unsigned uint_16 not equal with unsigned type Int. **/
    sswapi = 820        ,/** swap the 2 topmost int_16 elements where the top element is a Int. **/
    smod_l = 821        ,/** modulo int_16 with type Long. **/
    scast_ul = 822      ,/** cast int_16 to unsigned type Long. **/
    sucast_ul = 823     ,/** cast unsigned uint_16 to unsigned type Long. **/
    sadd_ul = 824       ,/** add int_16 with unsigned type Long. **/
    suadd_ul = 825      ,/** add unsigned uint_16 with unsigned type Long. **/
    ssub_ul = 826       ,/** subtract int_16 with unsigned type Long. **/
    susub_ul = 827      ,/** subtract unsigned uint_16 with unsigned type Long. **/
    smul_ul = 828       ,/** multiply int_16 with unsigned type Long. **/
    sumul_ul = 829      ,/** multiply unsigned uint_16 with unsigned type Long. **/
    sdiv_ul = 830       ,/** divide int_16 with unsigned type Long. **/
    sudiv_ul = 831      ,/** divide unsigned uint_16 with unsigned type Long. **/
    scmpl_ul = 832      ,/** compare int_16 less than unsigned type Long. **/
    sucmpl_ul = 833     ,/** compare unsigned uint_16 less than unsigned type Long. **/
    scmpg_ul = 834      ,/** compare int_16 greater than unsigned type Long. **/
    sucmpg_ul = 835     ,/** compare unsigned uint_16 greater than unsigned type Long. **/
    scmpe_ul = 836      ,/** compare int_16 equal with unsigned type Long. **/
    sucmpe_ul = 837     ,/** compare unsigned uint_16 equal with unsigned type Long. **/
    scmple_ul = 838     ,/** compare int_16 less than or equal to unsigned type Long. **/
    sucmple_ul = 839    ,/** compare unsigned uint_16 less than or equal to unsigned type Long. **/
    scmpge_ul = 840     ,/** compare int_16 greater than or equal to unsigned type Long. **/
    sucmpge_ul = 841    ,/** compare unsigned uint_16 greater than or equal to unsigned type Long. **/
    scmpne_ul = 842     ,/** compare int_16 not equal with unsigned type Long. **/
    sucmpne_ul = 843    ,/** compare unsigned uint_16 not equal with unsigned type Long. **/
    sswapl = 844        ,/** swap the 2 topmost int_16 elements where the top element is a Long. **/
    smod_li = 845       ,/** modulo int_16 with type LongInt. **/
    scast_uli = 846     ,/** cast int_16 to unsigned type LongInt. **/
    sucast_uli = 847    ,/** cast unsigned uint_16 to unsigned type LongInt. **/
    sadd_uli = 848      ,/** add int_16 with unsigned type LongInt. **/
    suadd_uli = 849     ,/** add unsigned uint_16 with unsigned type LongInt. **/
    ssub_uli = 850      ,/** subtract int_16 with unsigned type LongInt. **/
    susub_uli = 851     ,/** subtract unsigned uint_16 with unsigned type LongInt. **/
    smul_uli = 852      ,/** multiply int_16 with unsigned type LongInt. **/
    sumul_uli = 853     ,/** multiply unsigned uint_16 with unsigned type LongInt. **/
    sdiv_uli = 854      ,/** divide int_16 with unsigned type LongInt. **/
    sudiv_uli = 855     ,/** divide unsigned uint_16 with unsigned type LongInt. **/
    scmpl_uli = 856     ,/** compare int_16 less than unsigned type LongInt. **/
    sucmpl_uli = 857    ,/** compare unsigned uint_16 less than unsigned type LongInt. **/
    scmpg_uli = 858     ,/** compare int_16 greater than unsigned type LongInt. **/
    sucmpg_uli = 859    ,/** compare unsigned uint_16 greater than unsigned type LongInt. **/
    scmpe_uli = 860     ,/** compare int_16 equal with unsigned type LongInt. **/
    sucmpe_uli = 861    ,/** compare unsigned uint_16 equal with unsigned type LongInt. **/
    scmple_uli = 862    ,/** compare int_16 less than or equal to unsigned type LongInt. **/
    sucmple_uli = 863   ,/** compare unsigned uint_16 less than or equal to unsigned type LongInt. **/
    scmpge_uli = 864    ,/** compare int_16 greater than or equal to unsigned type LongInt. **/
    sucmpge_uli = 865   ,/** compare unsigned uint_16 greater than or equal to unsigned type LongInt. **/
    scmpne_uli = 866    ,/** compare int_16 not equal with unsigned type LongInt. **/
    sucmpne_uli = 867   ,/** compare unsigned uint_16 not equal with unsigned type LongInt. **/
    sswapli = 868       ,/** swap the 2 topmost int_16 elements where the top element is a LongInt. **/
    smod_ll = 869       ,/** modulo int_16 with type LongLong. **/
    scast_ull = 870     ,/** cast int_16 to unsigned type LongLong. **/
    sucast_ull = 871    ,/** cast unsigned uint_16 to unsigned type LongLong. **/
    sadd_ull = 872      ,/** add int_16 with unsigned type LongLong. **/
    suadd_ull = 873     ,/** add unsigned uint_16 with unsigned type LongLong. **/
    ssub_ull = 874      ,/** subtract int_16 with unsigned type LongLong. **/
    susub_ull = 875     ,/** subtract unsigned uint_16 with unsigned type LongLong. **/
    smul_ull = 876      ,/** multiply int_16 with unsigned type LongLong. **/
    sumul_ull = 877     ,/** multiply unsigned uint_16 with unsigned type LongLong. **/
    sdiv_ull = 878      ,/** divide int_16 with unsigned type LongLong. **/
    sudiv_ull = 879     ,/** divide unsigned uint_16 with unsigned type LongLong. **/
    scmpl_ull = 880     ,/** compare int_16 less than unsigned type LongLong. **/
    sucmpl_ull = 881    ,/** compare unsigned uint_16 less than unsigned type LongLong. **/
    scmpg_ull = 882     ,/** compare int_16 greater than unsigned type LongLong. **/
    sucmpg_ull = 883    ,/** compare unsigned uint_16 greater than unsigned type LongLong. **/
    scmpe_ull = 884     ,/** compare int_16 equal with unsigned type LongLong. **/
    sucmpe_ull = 885    ,/** compare unsigned uint_16 equal with unsigned type LongLong. **/
    scmple_ull = 886    ,/** compare int_16 less than or equal to unsigned type LongLong. **/
    sucmple_ull = 887   ,/** compare unsigned uint_16 less than or equal to unsigned type LongLong. **/
    scmpge_ull = 888    ,/** compare int_16 greater than or equal to unsigned type LongLong. **/
    sucmpge_ull = 889   ,/** compare unsigned uint_16 greater than or equal to unsigned type LongLong. **/
    scmpne_ull = 890    ,/** compare int_16 not equal with unsigned type LongLong. **/
    sucmpne_ull = 891   ,/** compare unsigned uint_16 not equal with unsigned type LongLong. **/
    sswapll = 892       ,/** swap the 2 topmost int_16 elements where the top element is a LongLong. **/
    sswapf = 893        ,/** swap the 2 topmost int_16 elements where the top element is a Float. **/
    sswapd = 894        ,/** swap the 2 topmost int_16 elements where the top element is a Double. **/
    sswapdf = 895       ,/** swap the 2 topmost int_16 elements where the top element is a DoubleFloat. **/
    sswapdd = 896       ,/** swap the 2 topmost int_16 elements where the top element is a DoubleDouble. **/
    sswapa = 897        ,/** swap the 2 topmost int_16 elements where the top element is a Pointer. **/
    sand_b = 898        ,/** bitwise and int_16 with type Byte. **/
    sor_b = 899         ,/** bitwise or int_16 with type Byte. **/
    sxor_b = 900        ,/** bitwise xor int_16 with type Byte. **/
    sshftr_b = 901      ,/** shift right int_16 with type Byte. **/
    sshftl_b = 902      ,/** shift left xor int_16 with type Byte. **/
    sand_s = 903        ,/** bitwise and int_16 with type Short. **/
    sor_s = 904         ,/** bitwise or int_16 with type Short. **/
    sxor_s = 905        ,/** bitwise xor int_16 with type Short. **/
    sshftr_s = 906      ,/** shift right int_16 with type Short. **/
    sshftl_s = 907      ,/** shift left xor int_16 with type Short. **/
    sand_i = 908        ,/** bitwise and int_16 with type Int. **/
    sor_i = 909         ,/** bitwise or int_16 with type Int. **/
    sxor_i = 910        ,/** bitwise xor int_16 with type Int. **/
    sshftr_i = 911      ,/** shift right int_16 with type Int. **/
    sshftl_i = 912      ,/** shift left xor int_16 with type Int. **/
    sand_l = 913        ,/** bitwise and int_16 with type Long. **/
    sor_l = 914         ,/** bitwise or int_16 with type Long. **/
    sxor_l = 915        ,/** bitwise xor int_16 with type Long. **/
    sshftr_l = 916      ,/** shift right int_16 with type Long. **/
    sshftl_l = 917      ,/** shift left xor int_16 with type Long. **/
    sand_li = 918       ,/** bitwise and int_16 with type LongInt. **/
    sor_li = 919        ,/** bitwise or int_16 with type LongInt. **/
    sxor_li = 920       ,/** bitwise xor int_16 with type LongInt. **/
    sshftr_li = 921     ,/** shift right int_16 with type LongInt. **/
    sshftl_li = 922     ,/** shift left xor int_16 with type LongInt. **/
    sand_ll = 923       ,/** bitwise and int_16 with type LongLong. **/
    sor_ll = 924        ,/** bitwise or int_16 with type LongLong. **/
    sxor_ll = 925       ,/** bitwise xor int_16 with type LongLong. **/
    sshftr_ll = 926     ,/** shift right int_16 with type LongLong. **/
    sshftl_ll = 927     ,/** shift left xor int_16 with type LongLong. **/
    sdup = 928          ,/** duplicate a int_16 on the stack. **/
    sdup2 = 929         ,/** duplicate a int_16 2 times on the stack. **/
    sdup3 = 930         ,/** duplicate a int_16 3 times on the stack. **/
    sdup4 = 931         ,/** duplicate a int_16 4 times on the stack. **/
    sdup5 = 932         ,/** duplicate a int_16 5 times on the stack. **/
    sswap = 933         ,/** swap the 2 topmost int_16 elements. **/
    srot = 934          ,/** rotate the 3 topmost int_16 elements. **/
    sset = 935          ,/** set a int_16 from stack into a field on base pointer. **/
    sget = 936          ,/** get a int_16 from a field on base pointer to stack. **/
    svset = 937         ,/** set a int_16 from value into a field on base pointer. **/
    ssget = 938         ,/** get a int_16 from a field on base pointer to stack using address from stack. **/
    ssset = 939         ,/** set a int_16 from stack into a field on base pointer using address from stack. **/
    ssetl = 940         ,/** set a int_16 from local variable into a field on base pointer. **/
    sinc_1 = 941        ,/** increment int_16 by 1 on stack. **/
    sinc_2 = 942        ,/** increment int_16 by 2 on stack. **/
    sstinc_1 = 943      ,/** increment int_16 by 1 on stack. **/
    sstinc_2 = 944      ,/** increment int_16 by 2 on stack. **/
    sreturn = 945       ,/** return a int_16 into the main stack. **/
    smainst = 946       ,/** store a int_16 from main stack in a local variable.. **/
    smainst_0 = 947     ,/** store a int_16 from main stack in local variable 0. **/
    smainst_1 = 948     ,/** store a int_16 from main stack in local variable 1. **/
    smainst_2 = 949     ,/** store a int_16 from main stack in local variable 2. **/
    smainst_3 = 950     ,/** store a int_16 from main stack in local variable 3. **/
    sprint = 951        ,/** print a int_16 from stack. **/
    suprint = 952       ,/** print a unsigned uint_16 from stack. **/
    iconst = 953        ,/** push a const int_32 into the stack. **/
    iconst_0 = 954      ,/** push a const int_32 into the stack (value = 0). **/
    iconst_1 = 955      ,/** push a const int_32 into the stack (value = 1). **/
    iconst_2 = 956      ,/** push a const int_32 into the stack (value = 2). **/
    iconst_3 = 957      ,/** push a const int_32 into the stack (value = 3). **/
    iconst_4 = 958      ,/** push a const int_32 into the stack (value = 4). **/
    iconst_5 = 959      ,/** push a const int_32 into the stack (value = 5). **/
    iconst_6 = 960      ,/** push a const int_32 into the stack (value = 6). **/
    iconst_9 = 961      ,/** push a const int_32 into the stack (value = 9). **/
    iconst_10 = 962     ,/** push a const int_32 into the stack (value = 10). **/
    iconst_11 = 963     ,/** push a const int_32 into the stack (value = 11). **/
    iconst_12 = 964     ,/** push a const int_32 into the stack (value = 12). **/
    iload = 965         ,/** load a int_32 into the stack from local variable. **/
    iload_0 = 966       ,/** load a int_32 into the stack from local variable 0. **/
    iload_1 = 967       ,/** load a int_32 into the stack from local variable 1. **/
    iload_2 = 968       ,/** load a int_32 into the stack from local variable 2. **/
    iload_3 = 969       ,/** load a int_32 into the stack from local variable 3. **/
    iload_4 = 970       ,/** load a int_32 into the stack from local variable 4. **/
    istore = 971        ,/** store a int_32 from stack into local variable. **/
    istore_0 = 972      ,/** store a int_32 from stack into local variable 0. **/
    istore_1 = 973      ,/** store a int_32 from stack into local variable 1. **/
    istore_2 = 974      ,/** store a int_32 from stack into local variable 2. **/
    istore_3 = 975      ,/** store a int_32 from stack into local variable 3. **/
    istore_4 = 976      ,/** store a int_32 from stack into local variable 4. **/
    icast_b = 977       ,/** cast int_32 to type Byte. **/
    iucast_b = 978      ,/** cast unsigned uint_32 to type Byte. **/
    iadd_b = 979        ,/** add int_32 with type Byte. **/
    iuadd_b = 980       ,/** add unsigned uint_32 with type Byte. **/
    isub_b = 981        ,/** subtract int_32 with type Byte. **/
    iusub_b = 982       ,/** subtract unsigned uint_32 with type Byte. **/
    imul_b = 983        ,/** multiply int_32 with type Byte. **/
    iumul_b = 984       ,/** multiply unsigned uint_32 with type Byte. **/
    idiv_b = 985        ,/** divide int_32 with type Byte. **/
    iudiv_b = 986       ,/** divide unsigned uint_32 with type Byte. **/
    icmpl_b = 987       ,/** compare int_32 less than type Byte. **/
    iucmpl_b = 988      ,/** compare unsigned uint_32 less than type Byte. **/
    icmpg_b = 989       ,/** compare int_32 greater than type Byte. **/
    iucmpg_b = 990      ,/** compare unsigned uint_32 greater than type Byte. **/
    icmpe_b = 991       ,/** compare int_32 equal with type Byte. **/
    iucmpe_b = 992      ,/** compare unsigned uint_32 equal with type Byte. **/
    icmple_b = 993      ,/** compare int_32 less than or equal to type Byte. **/
    iucmple_b = 994     ,/** compare unsigned uint_32 less than or equal to type Byte. **/
    icmpge_b = 995      ,/** compare int_32 greater than or equal to type Byte. **/
    iucmpge_b = 996     ,/** compare unsigned uint_32 greater than or equal to type Byte. **/
    icmpne_b = 997      ,/** compare int_32 not equal with type Byte. **/
    iucmpne_b = 998     ,/** compare unsigned uint_32 not equal with type Byte. **/
    icast_s = 999       ,/** cast int_32 to type Short. **/
    iucast_s = 1000     ,/** cast unsigned uint_32 to type Short. **/
    iadd_s = 1001       ,/** add int_32 with type Short. **/
    iuadd_s = 1002      ,/** add unsigned uint_32 with type Short. **/
    isub_s = 1003       ,/** subtract int_32 with type Short. **/
    iusub_s = 1004      ,/** subtract unsigned uint_32 with type Short. **/
    imul_s = 1005       ,/** multiply int_32 with type Short. **/
    iumul_s = 1006      ,/** multiply unsigned uint_32 with type Short. **/
    idiv_s = 1007       ,/** divide int_32 with type Short. **/
    iudiv_s = 1008      ,/** divide unsigned uint_32 with type Short. **/
    icmpl_s = 1009      ,/** compare int_32 less than type Short. **/
    iucmpl_s = 1010     ,/** compare unsigned uint_32 less than type Short. **/
    icmpg_s = 1011      ,/** compare int_32 greater than type Short. **/
    iucmpg_s = 1012     ,/** compare unsigned uint_32 greater than type Short. **/
    icmpe_s = 1013      ,/** compare int_32 equal with type Short. **/
    iucmpe_s = 1014     ,/** compare unsigned uint_32 equal with type Short. **/
    icmple_s = 1015     ,/** compare int_32 less than or equal to type Short. **/
    iucmple_s = 1016    ,/** compare unsigned uint_32 less than or equal to type Short. **/
    icmpge_s = 1017     ,/** compare int_32 greater than or equal to type Short. **/
    iucmpge_s = 1018    ,/** compare unsigned uint_32 greater than or equal to type Short. **/
    icmpne_s = 1019     ,/** compare int_32 not equal with type Short. **/
    iucmpne_s = 1020    ,/** compare unsigned uint_32 not equal with type Short. **/
    icast_i = 1021      ,/** cast int_32 to type Int. **/
    iucast_i = 1022     ,/** cast unsigned uint_32 to type Int. **/
    iadd_i = 1023       ,/** add int_32 with type Int. **/
    iuadd_i = 1024      ,/** add unsigned uint_32 with type Int. **/
    isub_i = 1025       ,/** subtract int_32 with type Int. **/
    iusub_i = 1026      ,/** subtract unsigned uint_32 with type Int. **/
    imul_i = 1027       ,/** multiply int_32 with type Int. **/
    iumul_i = 1028      ,/** multiply unsigned uint_32 with type Int. **/
    idiv_i = 1029       ,/** divide int_32 with type Int. **/
    iudiv_i = 1030      ,/** divide unsigned uint_32 with type Int. **/
    icmpl_i = 1031      ,/** compare int_32 less than type Int. **/
    iucmpl_i = 1032     ,/** compare unsigned uint_32 less than type Int. **/
    icmpg_i = 1033      ,/** compare int_32 greater than type Int. **/
    iucmpg_i = 1034     ,/** compare unsigned uint_32 greater than type Int. **/
    icmpe_i = 1035      ,/** compare int_32 equal with type Int. **/
    iucmpe_i = 1036     ,/** compare unsigned uint_32 equal with type Int. **/
    icmple_i = 1037     ,/** compare int_32 less than or equal to type Int. **/
    iucmple_i = 1038    ,/** compare unsigned uint_32 less than or equal to type Int. **/
    icmpge_i = 1039     ,/** compare int_32 greater than or equal to type Int. **/
    iucmpge_i = 1040    ,/** compare unsigned uint_32 greater than or equal to type Int. **/
    icmpne_i = 1041     ,/** compare int_32 not equal with type Int. **/
    iucmpne_i = 1042    ,/** compare unsigned uint_32 not equal with type Int. **/
    icast_l = 1043      ,/** cast int_32 to type Long. **/
    iucast_l = 1044     ,/** cast unsigned uint_32 to type Long. **/
    iadd_l = 1045       ,/** add int_32 with type Long. **/
    iuadd_l = 1046      ,/** add unsigned uint_32 with type Long. **/
    isub_l = 1047       ,/** subtract int_32 with type Long. **/
    iusub_l = 1048      ,/** subtract unsigned uint_32 with type Long. **/
    imul_l = 1049       ,/** multiply int_32 with type Long. **/
    iumul_l = 1050      ,/** multiply unsigned uint_32 with type Long. **/
    idiv_l = 1051       ,/** divide int_32 with type Long. **/
    iudiv_l = 1052      ,/** divide unsigned uint_32 with type Long. **/
    icmpl_l = 1053      ,/** compare int_32 less than type Long. **/
    iucmpl_l = 1054     ,/** compare unsigned uint_32 less than type Long. **/
    icmpg_l = 1055      ,/** compare int_32 greater than type Long. **/
    iucmpg_l = 1056     ,/** compare unsigned uint_32 greater than type Long. **/
    icmpe_l = 1057      ,/** compare int_32 equal with type Long. **/
    iucmpe_l = 1058     ,/** compare unsigned uint_32 equal with type Long. **/
    icmple_l = 1059     ,/** compare int_32 less than or equal to type Long. **/
    iucmple_l = 1060    ,/** compare unsigned uint_32 less than or equal to type Long. **/
    icmpge_l = 1061     ,/** compare int_32 greater than or equal to type Long. **/
    iucmpge_l = 1062    ,/** compare unsigned uint_32 greater than or equal to type Long. **/
    icmpne_l = 1063     ,/** compare int_32 not equal with type Long. **/
    iucmpne_l = 1064    ,/** compare unsigned uint_32 not equal with type Long. **/
    icast_li = 1065     ,/** cast int_32 to type LongInt. **/
    iucast_li = 1066    ,/** cast unsigned uint_32 to type LongInt. **/
    iadd_li = 1067      ,/** add int_32 with type LongInt. **/
    iuadd_li = 1068     ,/** add unsigned uint_32 with type LongInt. **/
    isub_li = 1069      ,/** subtract int_32 with type LongInt. **/
    iusub_li = 1070     ,/** subtract unsigned uint_32 with type LongInt. **/
    imul_li = 1071      ,/** multiply int_32 with type LongInt. **/
    iumul_li = 1072     ,/** multiply unsigned uint_32 with type LongInt. **/
    idiv_li = 1073      ,/** divide int_32 with type LongInt. **/
    iudiv_li = 1074     ,/** divide unsigned uint_32 with type LongInt. **/
    icmpl_li = 1075     ,/** compare int_32 less than type LongInt. **/
    iucmpl_li = 1076    ,/** compare unsigned uint_32 less than type LongInt. **/
    icmpg_li = 1077     ,/** compare int_32 greater than type LongInt. **/
    iucmpg_li = 1078    ,/** compare unsigned uint_32 greater than type LongInt. **/
    icmpe_li = 1079     ,/** compare int_32 equal with type LongInt. **/
    iucmpe_li = 1080    ,/** compare unsigned uint_32 equal with type LongInt. **/
    icmple_li = 1081    ,/** compare int_32 less than or equal to type LongInt. **/
    iucmple_li = 1082   ,/** compare unsigned uint_32 less than or equal to type LongInt. **/
    icmpge_li = 1083    ,/** compare int_32 greater than or equal to type LongInt. **/
    iucmpge_li = 1084   ,/** compare unsigned uint_32 greater than or equal to type LongInt. **/
    icmpne_li = 1085    ,/** compare int_32 not equal with type LongInt. **/
    iucmpne_li = 1086   ,/** compare unsigned uint_32 not equal with type LongInt. **/
    icast_ll = 1087     ,/** cast int_32 to type LongLong. **/
    iucast_ll = 1088    ,/** cast unsigned uint_32 to type LongLong. **/
    iadd_ll = 1089      ,/** add int_32 with type LongLong. **/
    iuadd_ll = 1090     ,/** add unsigned uint_32 with type LongLong. **/
    isub_ll = 1091      ,/** subtract int_32 with type LongLong. **/
    iusub_ll = 1092     ,/** subtract unsigned uint_32 with type LongLong. **/
    imul_ll = 1093      ,/** multiply int_32 with type LongLong. **/
    iumul_ll = 1094     ,/** multiply unsigned uint_32 with type LongLong. **/
    idiv_ll = 1095      ,/** divide int_32 with type LongLong. **/
    iudiv_ll = 1096     ,/** divide unsigned uint_32 with type LongLong. **/
    icmpl_ll = 1097     ,/** compare int_32 less than type LongLong. **/
    iucmpl_ll = 1098    ,/** compare unsigned uint_32 less than type LongLong. **/
    icmpg_ll = 1099     ,/** compare int_32 greater than type LongLong. **/
    iucmpg_ll = 1100    ,/** compare unsigned uint_32 greater than type LongLong. **/
    icmpe_ll = 1101     ,/** compare int_32 equal with type LongLong. **/
    iucmpe_ll = 1102    ,/** compare unsigned uint_32 equal with type LongLong. **/
    icmple_ll = 1103    ,/** compare int_32 less than or equal to type LongLong. **/
    iucmple_ll = 1104   ,/** compare unsigned uint_32 less than or equal to type LongLong. **/
    icmpge_ll = 1105    ,/** compare int_32 greater than or equal to type LongLong. **/
    iucmpge_ll = 1106   ,/** compare unsigned uint_32 greater than or equal to type LongLong. **/
    icmpne_ll = 1107    ,/** compare int_32 not equal with type LongLong. **/
    iucmpne_ll = 1108   ,/** compare unsigned uint_32 not equal with type LongLong. **/
    icast_f = 1109      ,/** cast int_32 to type Float. **/
    iucast_f = 1110     ,/** cast unsigned uint_32 to type Float. **/
    iadd_f = 1111       ,/** add int_32 with type Float. **/
    iuadd_f = 1112      ,/** add unsigned uint_32 with type Float. **/
    isub_f = 1113       ,/** subtract int_32 with type Float. **/
    iusub_f = 1114      ,/** subtract unsigned uint_32 with type Float. **/
    imul_f = 1115       ,/** multiply int_32 with type Float. **/
    iumul_f = 1116      ,/** multiply unsigned uint_32 with type Float. **/
    idiv_f = 1117       ,/** divide int_32 with type Float. **/
    iudiv_f = 1118      ,/** divide unsigned uint_32 with type Float. **/
    icmpl_f = 1119      ,/** compare int_32 less than type Float. **/
    iucmpl_f = 1120     ,/** compare unsigned uint_32 less than type Float. **/
    icmpg_f = 1121      ,/** compare int_32 greater than type Float. **/
    iucmpg_f = 1122     ,/** compare unsigned uint_32 greater than type Float. **/
    icmpe_f = 1123      ,/** compare int_32 equal with type Float. **/
    iucmpe_f = 1124     ,/** compare unsigned uint_32 equal with type Float. **/
    icmple_f = 1125     ,/** compare int_32 less than or equal to type Float. **/
    iucmple_f = 1126    ,/** compare unsigned uint_32 less than or equal to type Float. **/
    icmpge_f = 1127     ,/** compare int_32 greater than or equal to type Float. **/
    iucmpge_f = 1128    ,/** compare unsigned uint_32 greater than or equal to type Float. **/
    icmpne_f = 1129     ,/** compare int_32 not equal with type Float. **/
    iucmpne_f = 1130    ,/** compare unsigned uint_32 not equal with type Float. **/
    icast_d = 1131      ,/** cast int_32 to type Double. **/
    iucast_d = 1132     ,/** cast unsigned uint_32 to type Double. **/
    iadd_d = 1133       ,/** add int_32 with type Double. **/
    iuadd_d = 1134      ,/** add unsigned uint_32 with type Double. **/
    isub_d = 1135       ,/** subtract int_32 with type Double. **/
    iusub_d = 1136      ,/** subtract unsigned uint_32 with type Double. **/
    imul_d = 1137       ,/** multiply int_32 with type Double. **/
    iumul_d = 1138      ,/** multiply unsigned uint_32 with type Double. **/
    idiv_d = 1139       ,/** divide int_32 with type Double. **/
    iudiv_d = 1140      ,/** divide unsigned uint_32 with type Double. **/
    icmpl_d = 1141      ,/** compare int_32 less than type Double. **/
    iucmpl_d = 1142     ,/** compare unsigned uint_32 less than type Double. **/
    icmpg_d = 1143      ,/** compare int_32 greater than type Double. **/
    iucmpg_d = 1144     ,/** compare unsigned uint_32 greater than type Double. **/
    icmpe_d = 1145      ,/** compare int_32 equal with type Double. **/
    iucmpe_d = 1146     ,/** compare unsigned uint_32 equal with type Double. **/
    icmple_d = 1147     ,/** compare int_32 less than or equal to type Double. **/
    iucmple_d = 1148    ,/** compare unsigned uint_32 less than or equal to type Double. **/
    icmpge_d = 1149     ,/** compare int_32 greater than or equal to type Double. **/
    iucmpge_d = 1150    ,/** compare unsigned uint_32 greater than or equal to type Double. **/
    icmpne_d = 1151     ,/** compare int_32 not equal with type Double. **/
    iucmpne_d = 1152    ,/** compare unsigned uint_32 not equal with type Double. **/
    icast_df = 1153     ,/** cast int_32 to type DoubleFloat. **/
    iucast_df = 1154    ,/** cast unsigned uint_32 to type DoubleFloat. **/
    iadd_df = 1155      ,/** add int_32 with type DoubleFloat. **/
    iuadd_df = 1156     ,/** add unsigned uint_32 with type DoubleFloat. **/
    isub_df = 1157      ,/** subtract int_32 with type DoubleFloat. **/
    iusub_df = 1158     ,/** subtract unsigned uint_32 with type DoubleFloat. **/
    imul_df = 1159      ,/** multiply int_32 with type DoubleFloat. **/
    iumul_df = 1160     ,/** multiply unsigned uint_32 with type DoubleFloat. **/
    idiv_df = 1161      ,/** divide int_32 with type DoubleFloat. **/
    iudiv_df = 1162     ,/** divide unsigned uint_32 with type DoubleFloat. **/
    icmpl_df = 1163     ,/** compare int_32 less than type DoubleFloat. **/
    iucmpl_df = 1164    ,/** compare unsigned uint_32 less than type DoubleFloat. **/
    icmpg_df = 1165     ,/** compare int_32 greater than type DoubleFloat. **/
    iucmpg_df = 1166    ,/** compare unsigned uint_32 greater than type DoubleFloat. **/
    icmpe_df = 1167     ,/** compare int_32 equal with type DoubleFloat. **/
    iucmpe_df = 1168    ,/** compare unsigned uint_32 equal with type DoubleFloat. **/
    icmple_df = 1169    ,/** compare int_32 less than or equal to type DoubleFloat. **/
    iucmple_df = 1170   ,/** compare unsigned uint_32 less than or equal to type DoubleFloat. **/
    icmpge_df = 1171    ,/** compare int_32 greater than or equal to type DoubleFloat. **/
    iucmpge_df = 1172   ,/** compare unsigned uint_32 greater than or equal to type DoubleFloat. **/
    icmpne_df = 1173    ,/** compare int_32 not equal with type DoubleFloat. **/
    iucmpne_df = 1174   ,/** compare unsigned uint_32 not equal with type DoubleFloat. **/
    icast_dd = 1175     ,/** cast int_32 to type DoubleDouble. **/
    iucast_dd = 1176    ,/** cast unsigned uint_32 to type DoubleDouble. **/
    iadd_dd = 1177      ,/** add int_32 with type DoubleDouble. **/
    iuadd_dd = 1178     ,/** add unsigned uint_32 with type DoubleDouble. **/
    isub_dd = 1179      ,/** subtract int_32 with type DoubleDouble. **/
    iusub_dd = 1180     ,/** subtract unsigned uint_32 with type DoubleDouble. **/
    imul_dd = 1181      ,/** multiply int_32 with type DoubleDouble. **/
    iumul_dd = 1182     ,/** multiply unsigned uint_32 with type DoubleDouble. **/
    idiv_dd = 1183      ,/** divide int_32 with type DoubleDouble. **/
    iudiv_dd = 1184     ,/** divide unsigned uint_32 with type DoubleDouble. **/
    icmpl_dd = 1185     ,/** compare int_32 less than type DoubleDouble. **/
    iucmpl_dd = 1186    ,/** compare unsigned uint_32 less than type DoubleDouble. **/
    icmpg_dd = 1187     ,/** compare int_32 greater than type DoubleDouble. **/
    iucmpg_dd = 1188    ,/** compare unsigned uint_32 greater than type DoubleDouble. **/
    icmpe_dd = 1189     ,/** compare int_32 equal with type DoubleDouble. **/
    iucmpe_dd = 1190    ,/** compare unsigned uint_32 equal with type DoubleDouble. **/
    icmple_dd = 1191    ,/** compare int_32 less than or equal to type DoubleDouble. **/
    iucmple_dd = 1192   ,/** compare unsigned uint_32 less than or equal to type DoubleDouble. **/
    icmpge_dd = 1193    ,/** compare int_32 greater than or equal to type DoubleDouble. **/
    iucmpge_dd = 1194   ,/** compare unsigned uint_32 greater than or equal to type DoubleDouble. **/
    icmpne_dd = 1195    ,/** compare int_32 not equal with type DoubleDouble. **/
    iucmpne_dd = 1196   ,/** compare unsigned uint_32 not equal with type DoubleDouble. **/
    imod_b = 1197       ,/** modulo int_32 with type Byte. **/
    icast_ub = 1198     ,/** cast int_32 to unsigned type Byte. **/
    iucast_ub = 1199    ,/** cast unsigned uint_32 to unsigned type Byte. **/
    iadd_ub = 1200      ,/** add int_32 with unsigned type Byte. **/
    iuadd_ub = 1201     ,/** add unsigned uint_32 with unsigned type Byte. **/
    isub_ub = 1202      ,/** subtract int_32 with unsigned type Byte. **/
    iusub_ub = 1203     ,/** subtract unsigned uint_32 with unsigned type Byte. **/
    imul_ub = 1204      ,/** multiply int_32 with unsigned type Byte. **/
    iumul_ub = 1205     ,/** multiply unsigned uint_32 with unsigned type Byte. **/
    idiv_ub = 1206      ,/** divide int_32 with unsigned type Byte. **/
    iudiv_ub = 1207     ,/** divide unsigned uint_32 with unsigned type Byte. **/
    icmpl_ub = 1208     ,/** compare int_32 less than unsigned type Byte. **/
    iucmpl_ub = 1209    ,/** compare unsigned uint_32 less than unsigned type Byte. **/
    icmpg_ub = 1210     ,/** compare int_32 greater than unsigned type Byte. **/
    iucmpg_ub = 1211    ,/** compare unsigned uint_32 greater than unsigned type Byte. **/
    icmpe_ub = 1212     ,/** compare int_32 equal with unsigned type Byte. **/
    iucmpe_ub = 1213    ,/** compare unsigned uint_32 equal with unsigned type Byte. **/
    icmple_ub = 1214    ,/** compare int_32 less than or equal to unsigned type Byte. **/
    iucmple_ub = 1215   ,/** compare unsigned uint_32 less than or equal to unsigned type Byte. **/
    icmpge_ub = 1216    ,/** compare int_32 greater than or equal to unsigned type Byte. **/
    iucmpge_ub = 1217   ,/** compare unsigned uint_32 greater than or equal to unsigned type Byte. **/
    icmpne_ub = 1218    ,/** compare int_32 not equal with unsigned type Byte. **/
    iucmpne_ub = 1219   ,/** compare unsigned uint_32 not equal with unsigned type Byte. **/
    iswapb = 1220       ,/** swap the 2 topmost int_32 elements where the top element is a Byte. **/
    imod_s = 1221       ,/** modulo int_32 with type Short. **/
    icast_us = 1222     ,/** cast int_32 to unsigned type Short. **/
    iucast_us = 1223    ,/** cast unsigned uint_32 to unsigned type Short. **/
    iadd_us = 1224      ,/** add int_32 with unsigned type Short. **/
    iuadd_us = 1225     ,/** add unsigned uint_32 with unsigned type Short. **/
    isub_us = 1226      ,/** subtract int_32 with unsigned type Short. **/
    iusub_us = 1227     ,/** subtract unsigned uint_32 with unsigned type Short. **/
    imul_us = 1228      ,/** multiply int_32 with unsigned type Short. **/
    iumul_us = 1229     ,/** multiply unsigned uint_32 with unsigned type Short. **/
    idiv_us = 1230      ,/** divide int_32 with unsigned type Short. **/
    iudiv_us = 1231     ,/** divide unsigned uint_32 with unsigned type Short. **/
    icmpl_us = 1232     ,/** compare int_32 less than unsigned type Short. **/
    iucmpl_us = 1233    ,/** compare unsigned uint_32 less than unsigned type Short. **/
    icmpg_us = 1234     ,/** compare int_32 greater than unsigned type Short. **/
    iucmpg_us = 1235    ,/** compare unsigned uint_32 greater than unsigned type Short. **/
    icmpe_us = 1236     ,/** compare int_32 equal with unsigned type Short. **/
    iucmpe_us = 1237    ,/** compare unsigned uint_32 equal with unsigned type Short. **/
    icmple_us = 1238    ,/** compare int_32 less than or equal to unsigned type Short. **/
    iucmple_us = 1239   ,/** compare unsigned uint_32 less than or equal to unsigned type Short. **/
    icmpge_us = 1240    ,/** compare int_32 greater than or equal to unsigned type Short. **/
    iucmpge_us = 1241   ,/** compare unsigned uint_32 greater than or equal to unsigned type Short. **/
    icmpne_us = 1242    ,/** compare int_32 not equal with unsigned type Short. **/
    iucmpne_us = 1243   ,/** compare unsigned uint_32 not equal with unsigned type Short. **/
    iswaps = 1244       ,/** swap the 2 topmost int_32 elements where the top element is a Short. **/
    imod_i = 1245       ,/** modulo int_32 with type Int. **/
    icast_ui = 1246     ,/** cast int_32 to unsigned type Int. **/
    iucast_ui = 1247    ,/** cast unsigned uint_32 to unsigned type Int. **/
    iadd_ui = 1248      ,/** add int_32 with unsigned type Int. **/
    iuadd_ui = 1249     ,/** add unsigned uint_32 with unsigned type Int. **/
    isub_ui = 1250      ,/** subtract int_32 with unsigned type Int. **/
    iusub_ui = 1251     ,/** subtract unsigned uint_32 with unsigned type Int. **/
    imul_ui = 1252      ,/** multiply int_32 with unsigned type Int. **/
    iumul_ui = 1253     ,/** multiply unsigned uint_32 with unsigned type Int. **/
    idiv_ui = 1254      ,/** divide int_32 with unsigned type Int. **/
    iudiv_ui = 1255     ,/** divide unsigned uint_32 with unsigned type Int. **/
    icmpl_ui = 1256     ,/** compare int_32 less than unsigned type Int. **/
    iucmpl_ui = 1257    ,/** compare unsigned uint_32 less than unsigned type Int. **/
    icmpg_ui = 1258     ,/** compare int_32 greater than unsigned type Int. **/
    iucmpg_ui = 1259    ,/** compare unsigned uint_32 greater than unsigned type Int. **/
    icmpe_ui = 1260     ,/** compare int_32 equal with unsigned type Int. **/
    iucmpe_ui = 1261    ,/** compare unsigned uint_32 equal with unsigned type Int. **/
    icmple_ui = 1262    ,/** compare int_32 less than or equal to unsigned type Int. **/
    iucmple_ui = 1263   ,/** compare unsigned uint_32 less than or equal to unsigned type Int. **/
    icmpge_ui = 1264    ,/** compare int_32 greater than or equal to unsigned type Int. **/
    iucmpge_ui = 1265   ,/** compare unsigned uint_32 greater than or equal to unsigned type Int. **/
    icmpne_ui = 1266    ,/** compare int_32 not equal with unsigned type Int. **/
    iucmpne_ui = 1267   ,/** compare unsigned uint_32 not equal with unsigned type Int. **/
    iswapi = 1268       ,/** swap the 2 topmost int_32 elements where the top element is a Int. **/
    imod_l = 1269       ,/** modulo int_32 with type Long. **/
    icast_ul = 1270     ,/** cast int_32 to unsigned type Long. **/
    iucast_ul = 1271    ,/** cast unsigned uint_32 to unsigned type Long. **/
    iadd_ul = 1272      ,/** add int_32 with unsigned type Long. **/
    iuadd_ul = 1273     ,/** add unsigned uint_32 with unsigned type Long. **/
    isub_ul = 1274      ,/** subtract int_32 with unsigned type Long. **/
    iusub_ul = 1275     ,/** subtract unsigned uint_32 with unsigned type Long. **/
    imul_ul = 1276      ,/** multiply int_32 with unsigned type Long. **/
    iumul_ul = 1277     ,/** multiply unsigned uint_32 with unsigned type Long. **/
    idiv_ul = 1278      ,/** divide int_32 with unsigned type Long. **/
    iudiv_ul = 1279     ,/** divide unsigned uint_32 with unsigned type Long. **/
    icmpl_ul = 1280     ,/** compare int_32 less than unsigned type Long. **/
    iucmpl_ul = 1281    ,/** compare unsigned uint_32 less than unsigned type Long. **/
    icmpg_ul = 1282     ,/** compare int_32 greater than unsigned type Long. **/
    iucmpg_ul = 1283    ,/** compare unsigned uint_32 greater than unsigned type Long. **/
    icmpe_ul = 1284     ,/** compare int_32 equal with unsigned type Long. **/
    iucmpe_ul = 1285    ,/** compare unsigned uint_32 equal with unsigned type Long. **/
    icmple_ul = 1286    ,/** compare int_32 less than or equal to unsigned type Long. **/
    iucmple_ul = 1287   ,/** compare unsigned uint_32 less than or equal to unsigned type Long. **/
    icmpge_ul = 1288    ,/** compare int_32 greater than or equal to unsigned type Long. **/
    iucmpge_ul = 1289   ,/** compare unsigned uint_32 greater than or equal to unsigned type Long. **/
    icmpne_ul = 1290    ,/** compare int_32 not equal with unsigned type Long. **/
    iucmpne_ul = 1291   ,/** compare unsigned uint_32 not equal with unsigned type Long. **/
    iswapl = 1292       ,/** swap the 2 topmost int_32 elements where the top element is a Long. **/
    imod_li = 1293      ,/** modulo int_32 with type LongInt. **/
    icast_uli = 1294    ,/** cast int_32 to unsigned type LongInt. **/
    iucast_uli = 1295   ,/** cast unsigned uint_32 to unsigned type LongInt. **/
    iadd_uli = 1296     ,/** add int_32 with unsigned type LongInt. **/
    iuadd_uli = 1297    ,/** add unsigned uint_32 with unsigned type LongInt. **/
    isub_uli = 1298     ,/** subtract int_32 with unsigned type LongInt. **/
    iusub_uli = 1299    ,/** subtract unsigned uint_32 with unsigned type LongInt. **/
    imul_uli = 1300     ,/** multiply int_32 with unsigned type LongInt. **/
    iumul_uli = 1301    ,/** multiply unsigned uint_32 with unsigned type LongInt. **/
    idiv_uli = 1302     ,/** divide int_32 with unsigned type LongInt. **/
    iudiv_uli = 1303    ,/** divide unsigned uint_32 with unsigned type LongInt. **/
    icmpl_uli = 1304    ,/** compare int_32 less than unsigned type LongInt. **/
    iucmpl_uli = 1305   ,/** compare unsigned uint_32 less than unsigned type LongInt. **/
    icmpg_uli = 1306    ,/** compare int_32 greater than unsigned type LongInt. **/
    iucmpg_uli = 1307   ,/** compare unsigned uint_32 greater than unsigned type LongInt. **/
    icmpe_uli = 1308    ,/** compare int_32 equal with unsigned type LongInt. **/
    iucmpe_uli = 1309   ,/** compare unsigned uint_32 equal with unsigned type LongInt. **/
    icmple_uli = 1310   ,/** compare int_32 less than or equal to unsigned type LongInt. **/
    iucmple_uli = 1311  ,/** compare unsigned uint_32 less than or equal to unsigned type LongInt. **/
    icmpge_uli = 1312   ,/** compare int_32 greater than or equal to unsigned type LongInt. **/
    iucmpge_uli = 1313  ,/** compare unsigned uint_32 greater than or equal to unsigned type LongInt. **/
    icmpne_uli = 1314   ,/** compare int_32 not equal with unsigned type LongInt. **/
    iucmpne_uli = 1315  ,/** compare unsigned uint_32 not equal with unsigned type LongInt. **/
    iswapli = 1316      ,/** swap the 2 topmost int_32 elements where the top element is a LongInt. **/
    imod_ll = 1317      ,/** modulo int_32 with type LongLong. **/
    icast_ull = 1318    ,/** cast int_32 to unsigned type LongLong. **/
    iucast_ull = 1319   ,/** cast unsigned uint_32 to unsigned type LongLong. **/
    iadd_ull = 1320     ,/** add int_32 with unsigned type LongLong. **/
    iuadd_ull = 1321    ,/** add unsigned uint_32 with unsigned type LongLong. **/
    isub_ull = 1322     ,/** subtract int_32 with unsigned type LongLong. **/
    iusub_ull = 1323    ,/** subtract unsigned uint_32 with unsigned type LongLong. **/
    imul_ull = 1324     ,/** multiply int_32 with unsigned type LongLong. **/
    iumul_ull = 1325    ,/** multiply unsigned uint_32 with unsigned type LongLong. **/
    idiv_ull = 1326     ,/** divide int_32 with unsigned type LongLong. **/
    iudiv_ull = 1327    ,/** divide unsigned uint_32 with unsigned type LongLong. **/
    icmpl_ull = 1328    ,/** compare int_32 less than unsigned type LongLong. **/
    iucmpl_ull = 1329   ,/** compare unsigned uint_32 less than unsigned type LongLong. **/
    icmpg_ull = 1330    ,/** compare int_32 greater than unsigned type LongLong. **/
    iucmpg_ull = 1331   ,/** compare unsigned uint_32 greater than unsigned type LongLong. **/
    icmpe_ull = 1332    ,/** compare int_32 equal with unsigned type LongLong. **/
    iucmpe_ull = 1333   ,/** compare unsigned uint_32 equal with unsigned type LongLong. **/
    icmple_ull = 1334   ,/** compare int_32 less than or equal to unsigned type LongLong. **/
    iucmple_ull = 1335  ,/** compare unsigned uint_32 less than or equal to unsigned type LongLong. **/
    icmpge_ull = 1336   ,/** compare int_32 greater than or equal to unsigned type LongLong. **/
    iucmpge_ull = 1337  ,/** compare unsigned uint_32 greater than or equal to unsigned type LongLong. **/
    icmpne_ull = 1338   ,/** compare int_32 not equal with unsigned type LongLong. **/
    iucmpne_ull = 1339  ,/** compare unsigned uint_32 not equal with unsigned type LongLong. **/
    iswapll = 1340      ,/** swap the 2 topmost int_32 elements where the top element is a LongLong. **/
    iswapf = 1341       ,/** swap the 2 topmost int_32 elements where the top element is a Float. **/
    iswapd = 1342       ,/** swap the 2 topmost int_32 elements where the top element is a Double. **/
    iswapdf = 1343      ,/** swap the 2 topmost int_32 elements where the top element is a DoubleFloat. **/
    iswapdd = 1344      ,/** swap the 2 topmost int_32 elements where the top element is a DoubleDouble. **/
    iswapa = 1345       ,/** swap the 2 topmost int_32 elements where the top element is a Pointer. **/
    iand_b = 1346       ,/** bitwise and int_32 with type Byte. **/
    ior_b = 1347        ,/** bitwise or int_32 with type Byte. **/
    ixor_b = 1348       ,/** bitwise xor int_32 with type Byte. **/
    ishftr_b = 1349     ,/** shift right int_32 with type Byte. **/
    ishftl_b = 1350     ,/** shift left xor int_32 with type Byte. **/
    iand_s = 1351       ,/** bitwise and int_32 with type Short. **/
    ior_s = 1352        ,/** bitwise or int_32 with type Short. **/
    ixor_s = 1353       ,/** bitwise xor int_32 with type Short. **/
    ishftr_s = 1354     ,/** shift right int_32 with type Short. **/
    ishftl_s = 1355     ,/** shift left xor int_32 with type Short. **/
    iand_i = 1356       ,/** bitwise and int_32 with type Int. **/
    ior_i = 1357        ,/** bitwise or int_32 with type Int. **/
    ixor_i = 1358       ,/** bitwise xor int_32 with type Int. **/
    ishftr_i = 1359     ,/** shift right int_32 with type Int. **/
    ishftl_i = 1360     ,/** shift left xor int_32 with type Int. **/
    iand_l = 1361       ,/** bitwise and int_32 with type Long. **/
    ior_l = 1362        ,/** bitwise or int_32 with type Long. **/
    ixor_l = 1363       ,/** bitwise xor int_32 with type Long. **/
    ishftr_l = 1364     ,/** shift right int_32 with type Long. **/
    ishftl_l = 1365     ,/** shift left xor int_32 with type Long. **/
    iand_li = 1366      ,/** bitwise and int_32 with type LongInt. **/
    ior_li = 1367       ,/** bitwise or int_32 with type LongInt. **/
    ixor_li = 1368      ,/** bitwise xor int_32 with type LongInt. **/
    ishftr_li = 1369    ,/** shift right int_32 with type LongInt. **/
    ishftl_li = 1370    ,/** shift left xor int_32 with type LongInt. **/
    iand_ll = 1371      ,/** bitwise and int_32 with type LongLong. **/
    ior_ll = 1372       ,/** bitwise or int_32 with type LongLong. **/
    ixor_ll = 1373      ,/** bitwise xor int_32 with type LongLong. **/
    ishftr_ll = 1374    ,/** shift right int_32 with type LongLong. **/
    ishftl_ll = 1375    ,/** shift left xor int_32 with type LongLong. **/
    idup = 1376         ,/** duplicate a int_32 on the stack. **/
    idup2 = 1377        ,/** duplicate a int_32 2 times on the stack. **/
    idup3 = 1378        ,/** duplicate a int_32 3 times on the stack. **/
    idup4 = 1379        ,/** duplicate a int_32 4 times on the stack. **/
    idup5 = 1380        ,/** duplicate a int_32 5 times on the stack. **/
    iswap = 1381        ,/** swap the 2 topmost int_32 elements. **/
    irot = 1382         ,/** rotate the 3 topmost int_32 elements. **/
    iset = 1383         ,/** set a int_32 from stack into a field on base pointer. **/
    iget = 1384         ,/** get a int_32 from a field on base pointer to stack. **/
    ivset = 1385        ,/** set a int_32 from value into a field on base pointer. **/
    isget = 1386        ,/** get a int_32 from a field on base pointer to stack using address from stack. **/
    isset = 1387        ,/** set a int_32 from stack into a field on base pointer using address from stack. **/
    isetl = 1388        ,/** set a int_32 from local variable into a field on base pointer. **/
    iinc_1 = 1389       ,/** increment int_32 by 1 on stack. **/
    iinc_2 = 1390       ,/** increment int_32 by 2 on stack. **/
    istinc_1 = 1391     ,/** increment int_32 by 1 on stack. **/
    istinc_2 = 1392     ,/** increment int_32 by 2 on stack. **/
    ireturn = 1393      ,/** return a int_32 into the main stack. **/
    imainst = 1394      ,/** store a int_32 from main stack in a local variable.. **/
    imainst_0 = 1395    ,/** store a int_32 from main stack in local variable 0. **/
    imainst_1 = 1396    ,/** store a int_32 from main stack in local variable 1. **/
    imainst_2 = 1397    ,/** store a int_32 from main stack in local variable 2. **/
    imainst_3 = 1398    ,/** store a int_32 from main stack in local variable 3. **/
    iprint = 1399       ,/** print a int_32 from stack. **/
    iuprint = 1400      ,/** print a unsigned uint_32 from stack. **/
    lconst = 1401       ,/** push a const int_64 into the stack. **/
    lconst_0 = 1402     ,/** push a const int_64 into the stack (value = 0). **/
    lconst_1 = 1403     ,/** push a const int_64 into the stack (value = 1). **/
    lconst_2 = 1404     ,/** push a const int_64 into the stack (value = 2). **/
    lconst_3 = 1405     ,/** push a const int_64 into the stack (value = 3). **/
    lconst_4 = 1406     ,/** push a const int_64 into the stack (value = 4). **/
    lconst_5 = 1407     ,/** push a const int_64 into the stack (value = 5). **/
    lconst_6 = 1408     ,/** push a const int_64 into the stack (value = 6). **/
    lconst_9 = 1409     ,/** push a const int_64 into the stack (value = 9). **/
    lconst_10 = 1410    ,/** push a const int_64 into the stack (value = 10). **/
    lconst_11 = 1411    ,/** push a const int_64 into the stack (value = 11). **/
    lconst_12 = 1412    ,/** push a const int_64 into the stack (value = 12). **/
    lload = 1413        ,/** load a int_64 into the stack from local variable. **/
    lload_0 = 1414      ,/** load a int_64 into the stack from local variable 0. **/
    lload_1 = 1415      ,/** load a int_64 into the stack from local variable 1. **/
    lload_2 = 1416      ,/** load a int_64 into the stack from local variable 2. **/
    lload_3 = 1417      ,/** load a int_64 into the stack from local variable 3. **/
    lload_4 = 1418      ,/** load a int_64 into the stack from local variable 4. **/
    lstore = 1419       ,/** store a int_64 from stack into local variable. **/
    lstore_0 = 1420     ,/** store a int_64 from stack into local variable 0. **/
    lstore_1 = 1421     ,/** store a int_64 from stack into local variable 1. **/
    lstore_2 = 1422     ,/** store a int_64 from stack into local variable 2. **/
    lstore_3 = 1423     ,/** store a int_64 from stack into local variable 3. **/
    lstore_4 = 1424     ,/** store a int_64 from stack into local variable 4. **/
    lcast_b = 1425      ,/** cast int_64 to type Byte. **/
    lucast_b = 1426     ,/** cast unsigned uint_64 to type Byte. **/
    ladd_b = 1427       ,/** add int_64 with type Byte. **/
    luadd_b = 1428      ,/** add unsigned uint_64 with type Byte. **/
    lsub_b = 1429       ,/** subtract int_64 with type Byte. **/
    lusub_b = 1430      ,/** subtract unsigned uint_64 with type Byte. **/
    lmul_b = 1431       ,/** multiply int_64 with type Byte. **/
    lumul_b = 1432      ,/** multiply unsigned uint_64 with type Byte. **/
    ldiv_b = 1433       ,/** divide int_64 with type Byte. **/
    ludiv_b = 1434      ,/** divide unsigned uint_64 with type Byte. **/
    lcmpl_b = 1435      ,/** compare int_64 less than type Byte. **/
    lucmpl_b = 1436     ,/** compare unsigned uint_64 less than type Byte. **/
    lcmpg_b = 1437      ,/** compare int_64 greater than type Byte. **/
    lucmpg_b = 1438     ,/** compare unsigned uint_64 greater than type Byte. **/
    lcmpe_b = 1439      ,/** compare int_64 equal with type Byte. **/
    lucmpe_b = 1440     ,/** compare unsigned uint_64 equal with type Byte. **/
    lcmple_b = 1441     ,/** compare int_64 less than or equal to type Byte. **/
    lucmple_b = 1442    ,/** compare unsigned uint_64 less than or equal to type Byte. **/
    lcmpge_b = 1443     ,/** compare int_64 greater than or equal to type Byte. **/
    lucmpge_b = 1444    ,/** compare unsigned uint_64 greater than or equal to type Byte. **/
    lcmpne_b = 1445     ,/** compare int_64 not equal with type Byte. **/
    lucmpne_b = 1446    ,/** compare unsigned uint_64 not equal with type Byte. **/
    lcast_s = 1447      ,/** cast int_64 to type Short. **/
    lucast_s = 1448     ,/** cast unsigned uint_64 to type Short. **/
    ladd_s = 1449       ,/** add int_64 with type Short. **/
    luadd_s = 1450      ,/** add unsigned uint_64 with type Short. **/
    lsub_s = 1451       ,/** subtract int_64 with type Short. **/
    lusub_s = 1452      ,/** subtract unsigned uint_64 with type Short. **/
    lmul_s = 1453       ,/** multiply int_64 with type Short. **/
    lumul_s = 1454      ,/** multiply unsigned uint_64 with type Short. **/
    ldiv_s = 1455       ,/** divide int_64 with type Short. **/
    ludiv_s = 1456      ,/** divide unsigned uint_64 with type Short. **/
    lcmpl_s = 1457      ,/** compare int_64 less than type Short. **/
    lucmpl_s = 1458     ,/** compare unsigned uint_64 less than type Short. **/
    lcmpg_s = 1459      ,/** compare int_64 greater than type Short. **/
    lucmpg_s = 1460     ,/** compare unsigned uint_64 greater than type Short. **/
    lcmpe_s = 1461      ,/** compare int_64 equal with type Short. **/
    lucmpe_s = 1462     ,/** compare unsigned uint_64 equal with type Short. **/
    lcmple_s = 1463     ,/** compare int_64 less than or equal to type Short. **/
    lucmple_s = 1464    ,/** compare unsigned uint_64 less than or equal to type Short. **/
    lcmpge_s = 1465     ,/** compare int_64 greater than or equal to type Short. **/
    lucmpge_s = 1466    ,/** compare unsigned uint_64 greater than or equal to type Short. **/
    lcmpne_s = 1467     ,/** compare int_64 not equal with type Short. **/
    lucmpne_s = 1468    ,/** compare unsigned uint_64 not equal with type Short. **/
    lcast_i = 1469      ,/** cast int_64 to type Int. **/
    lucast_i = 1470     ,/** cast unsigned uint_64 to type Int. **/
    ladd_i = 1471       ,/** add int_64 with type Int. **/
    luadd_i = 1472      ,/** add unsigned uint_64 with type Int. **/
    lsub_i = 1473       ,/** subtract int_64 with type Int. **/
    lusub_i = 1474      ,/** subtract unsigned uint_64 with type Int. **/
    lmul_i = 1475       ,/** multiply int_64 with type Int. **/
    lumul_i = 1476      ,/** multiply unsigned uint_64 with type Int. **/
    ldiv_i = 1477       ,/** divide int_64 with type Int. **/
    ludiv_i = 1478      ,/** divide unsigned uint_64 with type Int. **/
    lcmpl_i = 1479      ,/** compare int_64 less than type Int. **/
    lucmpl_i = 1480     ,/** compare unsigned uint_64 less than type Int. **/
    lcmpg_i = 1481      ,/** compare int_64 greater than type Int. **/
    lucmpg_i = 1482     ,/** compare unsigned uint_64 greater than type Int. **/
    lcmpe_i = 1483      ,/** compare int_64 equal with type Int. **/
    lucmpe_i = 1484     ,/** compare unsigned uint_64 equal with type Int. **/
    lcmple_i = 1485     ,/** compare int_64 less than or equal to type Int. **/
    lucmple_i = 1486    ,/** compare unsigned uint_64 less than or equal to type Int. **/
    lcmpge_i = 1487     ,/** compare int_64 greater than or equal to type Int. **/
    lucmpge_i = 1488    ,/** compare unsigned uint_64 greater than or equal to type Int. **/
    lcmpne_i = 1489     ,/** compare int_64 not equal with type Int. **/
    lucmpne_i = 1490    ,/** compare unsigned uint_64 not equal with type Int. **/
    lcast_l = 1491      ,/** cast int_64 to type Long. **/
    lucast_l = 1492     ,/** cast unsigned uint_64 to type Long. **/
    ladd_l = 1493       ,/** add int_64 with type Long. **/
    luadd_l = 1494      ,/** add unsigned uint_64 with type Long. **/
    lsub_l = 1495       ,/** subtract int_64 with type Long. **/
    lusub_l = 1496      ,/** subtract unsigned uint_64 with type Long. **/
    lmul_l = 1497       ,/** multiply int_64 with type Long. **/
    lumul_l = 1498      ,/** multiply unsigned uint_64 with type Long. **/
    ldiv_l = 1499       ,/** divide int_64 with type Long. **/
    ludiv_l = 1500      ,/** divide unsigned uint_64 with type Long. **/
    lcmpl_l = 1501      ,/** compare int_64 less than type Long. **/
    lucmpl_l = 1502     ,/** compare unsigned uint_64 less than type Long. **/
    lcmpg_l = 1503      ,/** compare int_64 greater than type Long. **/
    lucmpg_l = 1504     ,/** compare unsigned uint_64 greater than type Long. **/
    lcmpe_l = 1505      ,/** compare int_64 equal with type Long. **/
    lucmpe_l = 1506     ,/** compare unsigned uint_64 equal with type Long. **/
    lcmple_l = 1507     ,/** compare int_64 less than or equal to type Long. **/
    lucmple_l = 1508    ,/** compare unsigned uint_64 less than or equal to type Long. **/
    lcmpge_l = 1509     ,/** compare int_64 greater than or equal to type Long. **/
    lucmpge_l = 1510    ,/** compare unsigned uint_64 greater than or equal to type Long. **/
    lcmpne_l = 1511     ,/** compare int_64 not equal with type Long. **/
    lucmpne_l = 1512    ,/** compare unsigned uint_64 not equal with type Long. **/
    lcast_li = 1513     ,/** cast int_64 to type LongInt. **/
    lucast_li = 1514    ,/** cast unsigned uint_64 to type LongInt. **/
    ladd_li = 1515      ,/** add int_64 with type LongInt. **/
    luadd_li = 1516     ,/** add unsigned uint_64 with type LongInt. **/
    lsub_li = 1517      ,/** subtract int_64 with type LongInt. **/
    lusub_li = 1518     ,/** subtract unsigned uint_64 with type LongInt. **/
    lmul_li = 1519      ,/** multiply int_64 with type LongInt. **/
    lumul_li = 1520     ,/** multiply unsigned uint_64 with type LongInt. **/
    ldiv_li = 1521      ,/** divide int_64 with type LongInt. **/
    ludiv_li = 1522     ,/** divide unsigned uint_64 with type LongInt. **/
    lcmpl_li = 1523     ,/** compare int_64 less than type LongInt. **/
    lucmpl_li = 1524    ,/** compare unsigned uint_64 less than type LongInt. **/
    lcmpg_li = 1525     ,/** compare int_64 greater than type LongInt. **/
    lucmpg_li = 1526    ,/** compare unsigned uint_64 greater than type LongInt. **/
    lcmpe_li = 1527     ,/** compare int_64 equal with type LongInt. **/
    lucmpe_li = 1528    ,/** compare unsigned uint_64 equal with type LongInt. **/
    lcmple_li = 1529    ,/** compare int_64 less than or equal to type LongInt. **/
    lucmple_li = 1530   ,/** compare unsigned uint_64 less than or equal to type LongInt. **/
    lcmpge_li = 1531    ,/** compare int_64 greater than or equal to type LongInt. **/
    lucmpge_li = 1532   ,/** compare unsigned uint_64 greater than or equal to type LongInt. **/
    lcmpne_li = 1533    ,/** compare int_64 not equal with type LongInt. **/
    lucmpne_li = 1534   ,/** compare unsigned uint_64 not equal with type LongInt. **/
    lcast_ll = 1535     ,/** cast int_64 to type LongLong. **/
    lucast_ll = 1536    ,/** cast unsigned uint_64 to type LongLong. **/
    ladd_ll = 1537      ,/** add int_64 with type LongLong. **/
    luadd_ll = 1538     ,/** add unsigned uint_64 with type LongLong. **/
    lsub_ll = 1539      ,/** subtract int_64 with type LongLong. **/
    lusub_ll = 1540     ,/** subtract unsigned uint_64 with type LongLong. **/
    lmul_ll = 1541      ,/** multiply int_64 with type LongLong. **/
    lumul_ll = 1542     ,/** multiply unsigned uint_64 with type LongLong. **/
    ldiv_ll = 1543      ,/** divide int_64 with type LongLong. **/
    ludiv_ll = 1544     ,/** divide unsigned uint_64 with type LongLong. **/
    lcmpl_ll = 1545     ,/** compare int_64 less than type LongLong. **/
    lucmpl_ll = 1546    ,/** compare unsigned uint_64 less than type LongLong. **/
    lcmpg_ll = 1547     ,/** compare int_64 greater than type LongLong. **/
    lucmpg_ll = 1548    ,/** compare unsigned uint_64 greater than type LongLong. **/
    lcmpe_ll = 1549     ,/** compare int_64 equal with type LongLong. **/
    lucmpe_ll = 1550    ,/** compare unsigned uint_64 equal with type LongLong. **/
    lcmple_ll = 1551    ,/** compare int_64 less than or equal to type LongLong. **/
    lucmple_ll = 1552   ,/** compare unsigned uint_64 less than or equal to type LongLong. **/
    lcmpge_ll = 1553    ,/** compare int_64 greater than or equal to type LongLong. **/
    lucmpge_ll = 1554   ,/** compare unsigned uint_64 greater than or equal to type LongLong. **/
    lcmpne_ll = 1555    ,/** compare int_64 not equal with type LongLong. **/
    lucmpne_ll = 1556   ,/** compare unsigned uint_64 not equal with type LongLong. **/
    lcast_f = 1557      ,/** cast int_64 to type Float. **/
    lucast_f = 1558     ,/** cast unsigned uint_64 to type Float. **/
    ladd_f = 1559       ,/** add int_64 with type Float. **/
    luadd_f = 1560      ,/** add unsigned uint_64 with type Float. **/
    lsub_f = 1561       ,/** subtract int_64 with type Float. **/
    lusub_f = 1562      ,/** subtract unsigned uint_64 with type Float. **/
    lmul_f = 1563       ,/** multiply int_64 with type Float. **/
    lumul_f = 1564      ,/** multiply unsigned uint_64 with type Float. **/
    ldiv_f = 1565       ,/** divide int_64 with type Float. **/
    ludiv_f = 1566      ,/** divide unsigned uint_64 with type Float. **/
    lcmpl_f = 1567      ,/** compare int_64 less than type Float. **/
    lucmpl_f = 1568     ,/** compare unsigned uint_64 less than type Float. **/
    lcmpg_f = 1569      ,/** compare int_64 greater than type Float. **/
    lucmpg_f = 1570     ,/** compare unsigned uint_64 greater than type Float. **/
    lcmpe_f = 1571      ,/** compare int_64 equal with type Float. **/
    lucmpe_f = 1572     ,/** compare unsigned uint_64 equal with type Float. **/
    lcmple_f = 1573     ,/** compare int_64 less than or equal to type Float. **/
    lucmple_f = 1574    ,/** compare unsigned uint_64 less than or equal to type Float. **/
    lcmpge_f = 1575     ,/** compare int_64 greater than or equal to type Float. **/
    lucmpge_f = 1576    ,/** compare unsigned uint_64 greater than or equal to type Float. **/
    lcmpne_f = 1577     ,/** compare int_64 not equal with type Float. **/
    lucmpne_f = 1578    ,/** compare unsigned uint_64 not equal with type Float. **/
    lcast_d = 1579      ,/** cast int_64 to type Double. **/
    lucast_d = 1580     ,/** cast unsigned uint_64 to type Double. **/
    ladd_d = 1581       ,/** add int_64 with type Double. **/
    luadd_d = 1582      ,/** add unsigned uint_64 with type Double. **/
    lsub_d = 1583       ,/** subtract int_64 with type Double. **/
    lusub_d = 1584      ,/** subtract unsigned uint_64 with type Double. **/
    lmul_d = 1585       ,/** multiply int_64 with type Double. **/
    lumul_d = 1586      ,/** multiply unsigned uint_64 with type Double. **/
    ldiv_d = 1587       ,/** divide int_64 with type Double. **/
    ludiv_d = 1588      ,/** divide unsigned uint_64 with type Double. **/
    lcmpl_d = 1589      ,/** compare int_64 less than type Double. **/
    lucmpl_d = 1590     ,/** compare unsigned uint_64 less than type Double. **/
    lcmpg_d = 1591      ,/** compare int_64 greater than type Double. **/
    lucmpg_d = 1592     ,/** compare unsigned uint_64 greater than type Double. **/
    lcmpe_d = 1593      ,/** compare int_64 equal with type Double. **/
    lucmpe_d = 1594     ,/** compare unsigned uint_64 equal with type Double. **/
    lcmple_d = 1595     ,/** compare int_64 less than or equal to type Double. **/
    lucmple_d = 1596    ,/** compare unsigned uint_64 less than or equal to type Double. **/
    lcmpge_d = 1597     ,/** compare int_64 greater than or equal to type Double. **/
    lucmpge_d = 1598    ,/** compare unsigned uint_64 greater than or equal to type Double. **/
    lcmpne_d = 1599     ,/** compare int_64 not equal with type Double. **/
    lucmpne_d = 1600    ,/** compare unsigned uint_64 not equal with type Double. **/
    lcast_df = 1601     ,/** cast int_64 to type DoubleFloat. **/
    lucast_df = 1602    ,/** cast unsigned uint_64 to type DoubleFloat. **/
    ladd_df = 1603      ,/** add int_64 with type DoubleFloat. **/
    luadd_df = 1604     ,/** add unsigned uint_64 with type DoubleFloat. **/
    lsub_df = 1605      ,/** subtract int_64 with type DoubleFloat. **/
    lusub_df = 1606     ,/** subtract unsigned uint_64 with type DoubleFloat. **/
    lmul_df = 1607      ,/** multiply int_64 with type DoubleFloat. **/
    lumul_df = 1608     ,/** multiply unsigned uint_64 with type DoubleFloat. **/
    ldiv_df = 1609      ,/** divide int_64 with type DoubleFloat. **/
    ludiv_df = 1610     ,/** divide unsigned uint_64 with type DoubleFloat. **/
    lcmpl_df = 1611     ,/** compare int_64 less than type DoubleFloat. **/
    lucmpl_df = 1612    ,/** compare unsigned uint_64 less than type DoubleFloat. **/
    lcmpg_df = 1613     ,/** compare int_64 greater than type DoubleFloat. **/
    lucmpg_df = 1614    ,/** compare unsigned uint_64 greater than type DoubleFloat. **/
    lcmpe_df = 1615     ,/** compare int_64 equal with type DoubleFloat. **/
    lucmpe_df = 1616    ,/** compare unsigned uint_64 equal with type DoubleFloat. **/
    lcmple_df = 1617    ,/** compare int_64 less than or equal to type DoubleFloat. **/
    lucmple_df = 1618   ,/** compare unsigned uint_64 less than or equal to type DoubleFloat. **/
    lcmpge_df = 1619    ,/** compare int_64 greater than or equal to type DoubleFloat. **/
    lucmpge_df = 1620   ,/** compare unsigned uint_64 greater than or equal to type DoubleFloat. **/
    lcmpne_df = 1621    ,/** compare int_64 not equal with type DoubleFloat. **/
    lucmpne_df = 1622   ,/** compare unsigned uint_64 not equal with type DoubleFloat. **/
    lcast_dd = 1623     ,/** cast int_64 to type DoubleDouble. **/
    lucast_dd = 1624    ,/** cast unsigned uint_64 to type DoubleDouble. **/
    ladd_dd = 1625      ,/** add int_64 with type DoubleDouble. **/
    luadd_dd = 1626     ,/** add unsigned uint_64 with type DoubleDouble. **/
    lsub_dd = 1627      ,/** subtract int_64 with type DoubleDouble. **/
    lusub_dd = 1628     ,/** subtract unsigned uint_64 with type DoubleDouble. **/
    lmul_dd = 1629      ,/** multiply int_64 with type DoubleDouble. **/
    lumul_dd = 1630     ,/** multiply unsigned uint_64 with type DoubleDouble. **/
    ldiv_dd = 1631      ,/** divide int_64 with type DoubleDouble. **/
    ludiv_dd = 1632     ,/** divide unsigned uint_64 with type DoubleDouble. **/
    lcmpl_dd = 1633     ,/** compare int_64 less than type DoubleDouble. **/
    lucmpl_dd = 1634    ,/** compare unsigned uint_64 less than type DoubleDouble. **/
    lcmpg_dd = 1635     ,/** compare int_64 greater than type DoubleDouble. **/
    lucmpg_dd = 1636    ,/** compare unsigned uint_64 greater than type DoubleDouble. **/
    lcmpe_dd = 1637     ,/** compare int_64 equal with type DoubleDouble. **/
    lucmpe_dd = 1638    ,/** compare unsigned uint_64 equal with type DoubleDouble. **/
    lcmple_dd = 1639    ,/** compare int_64 less than or equal to type DoubleDouble. **/
    lucmple_dd = 1640   ,/** compare unsigned uint_64 less than or equal to type DoubleDouble. **/
    lcmpge_dd = 1641    ,/** compare int_64 greater than or equal to type DoubleDouble. **/
    lucmpge_dd = 1642   ,/** compare unsigned uint_64 greater than or equal to type DoubleDouble. **/
    lcmpne_dd = 1643    ,/** compare int_64 not equal with type DoubleDouble. **/
    lucmpne_dd = 1644   ,/** compare unsigned uint_64 not equal with type DoubleDouble. **/
    lmod_b = 1645       ,/** modulo int_64 with type Byte. **/
    lcast_ub = 1646     ,/** cast int_64 to unsigned type Byte. **/
    lucast_ub = 1647    ,/** cast unsigned uint_64 to unsigned type Byte. **/
    ladd_ub = 1648      ,/** add int_64 with unsigned type Byte. **/
    luadd_ub = 1649     ,/** add unsigned uint_64 with unsigned type Byte. **/
    lsub_ub = 1650      ,/** subtract int_64 with unsigned type Byte. **/
    lusub_ub = 1651     ,/** subtract unsigned uint_64 with unsigned type Byte. **/
    lmul_ub = 1652      ,/** multiply int_64 with unsigned type Byte. **/
    lumul_ub = 1653     ,/** multiply unsigned uint_64 with unsigned type Byte. **/
    ldiv_ub = 1654      ,/** divide int_64 with unsigned type Byte. **/
    ludiv_ub = 1655     ,/** divide unsigned uint_64 with unsigned type Byte. **/
    lcmpl_ub = 1656     ,/** compare int_64 less than unsigned type Byte. **/
    lucmpl_ub = 1657    ,/** compare unsigned uint_64 less than unsigned type Byte. **/
    lcmpg_ub = 1658     ,/** compare int_64 greater than unsigned type Byte. **/
    lucmpg_ub = 1659    ,/** compare unsigned uint_64 greater than unsigned type Byte. **/
    lcmpe_ub = 1660     ,/** compare int_64 equal with unsigned type Byte. **/
    lucmpe_ub = 1661    ,/** compare unsigned uint_64 equal with unsigned type Byte. **/
    lcmple_ub = 1662    ,/** compare int_64 less than or equal to unsigned type Byte. **/
    lucmple_ub = 1663   ,/** compare unsigned uint_64 less than or equal to unsigned type Byte. **/
    lcmpge_ub = 1664    ,/** compare int_64 greater than or equal to unsigned type Byte. **/
    lucmpge_ub = 1665   ,/** compare unsigned uint_64 greater than or equal to unsigned type Byte. **/
    lcmpne_ub = 1666    ,/** compare int_64 not equal with unsigned type Byte. **/
    lucmpne_ub = 1667   ,/** compare unsigned uint_64 not equal with unsigned type Byte. **/
    lswapb = 1668       ,/** swap the 2 topmost int_64 elements where the top element is a Byte. **/
    lmod_s = 1669       ,/** modulo int_64 with type Short. **/
    lcast_us = 1670     ,/** cast int_64 to unsigned type Short. **/
    lucast_us = 1671    ,/** cast unsigned uint_64 to unsigned type Short. **/
    ladd_us = 1672      ,/** add int_64 with unsigned type Short. **/
    luadd_us = 1673     ,/** add unsigned uint_64 with unsigned type Short. **/
    lsub_us = 1674      ,/** subtract int_64 with unsigned type Short. **/
    lusub_us = 1675     ,/** subtract unsigned uint_64 with unsigned type Short. **/
    lmul_us = 1676      ,/** multiply int_64 with unsigned type Short. **/
    lumul_us = 1677     ,/** multiply unsigned uint_64 with unsigned type Short. **/
    ldiv_us = 1678      ,/** divide int_64 with unsigned type Short. **/
    ludiv_us = 1679     ,/** divide unsigned uint_64 with unsigned type Short. **/
    lcmpl_us = 1680     ,/** compare int_64 less than unsigned type Short. **/
    lucmpl_us = 1681    ,/** compare unsigned uint_64 less than unsigned type Short. **/
    lcmpg_us = 1682     ,/** compare int_64 greater than unsigned type Short. **/
    lucmpg_us = 1683    ,/** compare unsigned uint_64 greater than unsigned type Short. **/
    lcmpe_us = 1684     ,/** compare int_64 equal with unsigned type Short. **/
    lucmpe_us = 1685    ,/** compare unsigned uint_64 equal with unsigned type Short. **/
    lcmple_us = 1686    ,/** compare int_64 less than or equal to unsigned type Short. **/
    lucmple_us = 1687   ,/** compare unsigned uint_64 less than or equal to unsigned type Short. **/
    lcmpge_us = 1688    ,/** compare int_64 greater than or equal to unsigned type Short. **/
    lucmpge_us = 1689   ,/** compare unsigned uint_64 greater than or equal to unsigned type Short. **/
    lcmpne_us = 1690    ,/** compare int_64 not equal with unsigned type Short. **/
    lucmpne_us = 1691   ,/** compare unsigned uint_64 not equal with unsigned type Short. **/
    lswaps = 1692       ,/** swap the 2 topmost int_64 elements where the top element is a Short. **/
    lmod_i = 1693       ,/** modulo int_64 with type Int. **/
    lcast_ui = 1694     ,/** cast int_64 to unsigned type Int. **/
    lucast_ui = 1695    ,/** cast unsigned uint_64 to unsigned type Int. **/
    ladd_ui = 1696      ,/** add int_64 with unsigned type Int. **/
    luadd_ui = 1697     ,/** add unsigned uint_64 with unsigned type Int. **/
    lsub_ui = 1698      ,/** subtract int_64 with unsigned type Int. **/
    lusub_ui = 1699     ,/** subtract unsigned uint_64 with unsigned type Int. **/
    lmul_ui = 1700      ,/** multiply int_64 with unsigned type Int. **/
    lumul_ui = 1701     ,/** multiply unsigned uint_64 with unsigned type Int. **/
    ldiv_ui = 1702      ,/** divide int_64 with unsigned type Int. **/
    ludiv_ui = 1703     ,/** divide unsigned uint_64 with unsigned type Int. **/
    lcmpl_ui = 1704     ,/** compare int_64 less than unsigned type Int. **/
    lucmpl_ui = 1705    ,/** compare unsigned uint_64 less than unsigned type Int. **/
    lcmpg_ui = 1706     ,/** compare int_64 greater than unsigned type Int. **/
    lucmpg_ui = 1707    ,/** compare unsigned uint_64 greater than unsigned type Int. **/
    lcmpe_ui = 1708     ,/** compare int_64 equal with unsigned type Int. **/
    lucmpe_ui = 1709    ,/** compare unsigned uint_64 equal with unsigned type Int. **/
    lcmple_ui = 1710    ,/** compare int_64 less than or equal to unsigned type Int. **/
    lucmple_ui = 1711   ,/** compare unsigned uint_64 less than or equal to unsigned type Int. **/
    lcmpge_ui = 1712    ,/** compare int_64 greater than or equal to unsigned type Int. **/
    lucmpge_ui = 1713   ,/** compare unsigned uint_64 greater than or equal to unsigned type Int. **/
    lcmpne_ui = 1714    ,/** compare int_64 not equal with unsigned type Int. **/
    lucmpne_ui = 1715   ,/** compare unsigned uint_64 not equal with unsigned type Int. **/
    lswapi = 1716       ,/** swap the 2 topmost int_64 elements where the top element is a Int. **/
    lmod_l = 1717       ,/** modulo int_64 with type Long. **/
    lcast_ul = 1718     ,/** cast int_64 to unsigned type Long. **/
    lucast_ul = 1719    ,/** cast unsigned uint_64 to unsigned type Long. **/
    ladd_ul = 1720      ,/** add int_64 with unsigned type Long. **/
    luadd_ul = 1721     ,/** add unsigned uint_64 with unsigned type Long. **/
    lsub_ul = 1722      ,/** subtract int_64 with unsigned type Long. **/
    lusub_ul = 1723     ,/** subtract unsigned uint_64 with unsigned type Long. **/
    lmul_ul = 1724      ,/** multiply int_64 with unsigned type Long. **/
    lumul_ul = 1725     ,/** multiply unsigned uint_64 with unsigned type Long. **/
    ldiv_ul = 1726      ,/** divide int_64 with unsigned type Long. **/
    ludiv_ul = 1727     ,/** divide unsigned uint_64 with unsigned type Long. **/
    lcmpl_ul = 1728     ,/** compare int_64 less than unsigned type Long. **/
    lucmpl_ul = 1729    ,/** compare unsigned uint_64 less than unsigned type Long. **/
    lcmpg_ul = 1730     ,/** compare int_64 greater than unsigned type Long. **/
    lucmpg_ul = 1731    ,/** compare unsigned uint_64 greater than unsigned type Long. **/
    lcmpe_ul = 1732     ,/** compare int_64 equal with unsigned type Long. **/
    lucmpe_ul = 1733    ,/** compare unsigned uint_64 equal with unsigned type Long. **/
    lcmple_ul = 1734    ,/** compare int_64 less than or equal to unsigned type Long. **/
    lucmple_ul = 1735   ,/** compare unsigned uint_64 less than or equal to unsigned type Long. **/
    lcmpge_ul = 1736    ,/** compare int_64 greater than or equal to unsigned type Long. **/
    lucmpge_ul = 1737   ,/** compare unsigned uint_64 greater than or equal to unsigned type Long. **/
    lcmpne_ul = 1738    ,/** compare int_64 not equal with unsigned type Long. **/
    lucmpne_ul = 1739   ,/** compare unsigned uint_64 not equal with unsigned type Long. **/
    lswapl = 1740       ,/** swap the 2 topmost int_64 elements where the top element is a Long. **/
    lmod_li = 1741      ,/** modulo int_64 with type LongInt. **/
    lcast_uli = 1742    ,/** cast int_64 to unsigned type LongInt. **/
    lucast_uli = 1743   ,/** cast unsigned uint_64 to unsigned type LongInt. **/
    ladd_uli = 1744     ,/** add int_64 with unsigned type LongInt. **/
    luadd_uli = 1745    ,/** add unsigned uint_64 with unsigned type LongInt. **/
    lsub_uli = 1746     ,/** subtract int_64 with unsigned type LongInt. **/
    lusub_uli = 1747    ,/** subtract unsigned uint_64 with unsigned type LongInt. **/
    lmul_uli = 1748     ,/** multiply int_64 with unsigned type LongInt. **/
    lumul_uli = 1749    ,/** multiply unsigned uint_64 with unsigned type LongInt. **/
    ldiv_uli = 1750     ,/** divide int_64 with unsigned type LongInt. **/
    ludiv_uli = 1751    ,/** divide unsigned uint_64 with unsigned type LongInt. **/
    lcmpl_uli = 1752    ,/** compare int_64 less than unsigned type LongInt. **/
    lucmpl_uli = 1753   ,/** compare unsigned uint_64 less than unsigned type LongInt. **/
    lcmpg_uli = 1754    ,/** compare int_64 greater than unsigned type LongInt. **/
    lucmpg_uli = 1755   ,/** compare unsigned uint_64 greater than unsigned type LongInt. **/
    lcmpe_uli = 1756    ,/** compare int_64 equal with unsigned type LongInt. **/
    lucmpe_uli = 1757   ,/** compare unsigned uint_64 equal with unsigned type LongInt. **/
    lcmple_uli = 1758   ,/** compare int_64 less than or equal to unsigned type LongInt. **/
    lucmple_uli = 1759  ,/** compare unsigned uint_64 less than or equal to unsigned type LongInt. **/
    lcmpge_uli = 1760   ,/** compare int_64 greater than or equal to unsigned type LongInt. **/
    lucmpge_uli = 1761  ,/** compare unsigned uint_64 greater than or equal to unsigned type LongInt. **/
    lcmpne_uli = 1762   ,/** compare int_64 not equal with unsigned type LongInt. **/
    lucmpne_uli = 1763  ,/** compare unsigned uint_64 not equal with unsigned type LongInt. **/
    lswapli = 1764      ,/** swap the 2 topmost int_64 elements where the top element is a LongInt. **/
    lmod_ll = 1765      ,/** modulo int_64 with type LongLong. **/
    lcast_ull = 1766    ,/** cast int_64 to unsigned type LongLong. **/
    lucast_ull = 1767   ,/** cast unsigned uint_64 to unsigned type LongLong. **/
    ladd_ull = 1768     ,/** add int_64 with unsigned type LongLong. **/
    luadd_ull = 1769    ,/** add unsigned uint_64 with unsigned type LongLong. **/
    lsub_ull = 1770     ,/** subtract int_64 with unsigned type LongLong. **/
    lusub_ull = 1771    ,/** subtract unsigned uint_64 with unsigned type LongLong. **/
    lmul_ull = 1772     ,/** multiply int_64 with unsigned type LongLong. **/
    lumul_ull = 1773    ,/** multiply unsigned uint_64 with unsigned type LongLong. **/
    ldiv_ull = 1774     ,/** divide int_64 with unsigned type LongLong. **/
    ludiv_ull = 1775    ,/** divide unsigned uint_64 with unsigned type LongLong. **/
    lcmpl_ull = 1776    ,/** compare int_64 less than unsigned type LongLong. **/
    lucmpl_ull = 1777   ,/** compare unsigned uint_64 less than unsigned type LongLong. **/
    lcmpg_ull = 1778    ,/** compare int_64 greater than unsigned type LongLong. **/
    lucmpg_ull = 1779   ,/** compare unsigned uint_64 greater than unsigned type LongLong. **/
    lcmpe_ull = 1780    ,/** compare int_64 equal with unsigned type LongLong. **/
    lucmpe_ull = 1781   ,/** compare unsigned uint_64 equal with unsigned type LongLong. **/
    lcmple_ull = 1782   ,/** compare int_64 less than or equal to unsigned type LongLong. **/
    lucmple_ull = 1783  ,/** compare unsigned uint_64 less than or equal to unsigned type LongLong. **/
    lcmpge_ull = 1784   ,/** compare int_64 greater than or equal to unsigned type LongLong. **/
    lucmpge_ull = 1785  ,/** compare unsigned uint_64 greater than or equal to unsigned type LongLong. **/
    lcmpne_ull = 1786   ,/** compare int_64 not equal with unsigned type LongLong. **/
    lucmpne_ull = 1787  ,/** compare unsigned uint_64 not equal with unsigned type LongLong. **/
    lswapll = 1788      ,/** swap the 2 topmost int_64 elements where the top element is a LongLong. **/
    lswapf = 1789       ,/** swap the 2 topmost int_64 elements where the top element is a Float. **/
    lswapd = 1790       ,/** swap the 2 topmost int_64 elements where the top element is a Double. **/
    lswapdf = 1791      ,/** swap the 2 topmost int_64 elements where the top element is a DoubleFloat. **/
    lswapdd = 1792      ,/** swap the 2 topmost int_64 elements where the top element is a DoubleDouble. **/
    lswapa = 1793       ,/** swap the 2 topmost int_64 elements where the top element is a Pointer. **/
    land_b = 1794       ,/** bitwise and int_64 with type Byte. **/
    lor_b = 1795        ,/** bitwise or int_64 with type Byte. **/
    lxor_b = 1796       ,/** bitwise xor int_64 with type Byte. **/
    lshftr_b = 1797     ,/** shift right int_64 with type Byte. **/
    lshftl_b = 1798     ,/** shift left xor int_64 with type Byte. **/
    land_s = 1799       ,/** bitwise and int_64 with type Short. **/
    lor_s = 1800        ,/** bitwise or int_64 with type Short. **/
    lxor_s = 1801       ,/** bitwise xor int_64 with type Short. **/
    lshftr_s = 1802     ,/** shift right int_64 with type Short. **/
    lshftl_s = 1803     ,/** shift left xor int_64 with type Short. **/
    land_i = 1804       ,/** bitwise and int_64 with type Int. **/
    lor_i = 1805        ,/** bitwise or int_64 with type Int. **/
    lxor_i = 1806       ,/** bitwise xor int_64 with type Int. **/
    lshftr_i = 1807     ,/** shift right int_64 with type Int. **/
    lshftl_i = 1808     ,/** shift left xor int_64 with type Int. **/
    land_l = 1809       ,/** bitwise and int_64 with type Long. **/
    lor_l = 1810        ,/** bitwise or int_64 with type Long. **/
    lxor_l = 1811       ,/** bitwise xor int_64 with type Long. **/
    lshftr_l = 1812     ,/** shift right int_64 with type Long. **/
    lshftl_l = 1813     ,/** shift left xor int_64 with type Long. **/
    land_li = 1814      ,/** bitwise and int_64 with type LongInt. **/
    lor_li = 1815       ,/** bitwise or int_64 with type LongInt. **/
    lxor_li = 1816      ,/** bitwise xor int_64 with type LongInt. **/
    lshftr_li = 1817    ,/** shift right int_64 with type LongInt. **/
    lshftl_li = 1818    ,/** shift left xor int_64 with type LongInt. **/
    land_ll = 1819      ,/** bitwise and int_64 with type LongLong. **/
    lor_ll = 1820       ,/** bitwise or int_64 with type LongLong. **/
    lxor_ll = 1821      ,/** bitwise xor int_64 with type LongLong. **/
    lshftr_ll = 1822    ,/** shift right int_64 with type LongLong. **/
    lshftl_ll = 1823    ,/** shift left xor int_64 with type LongLong. **/
    ldup = 1824         ,/** duplicate a int_64 on the stack. **/
    ldup2 = 1825        ,/** duplicate a int_64 2 times on the stack. **/
    ldup3 = 1826        ,/** duplicate a int_64 3 times on the stack. **/
    ldup4 = 1827        ,/** duplicate a int_64 4 times on the stack. **/
    ldup5 = 1828        ,/** duplicate a int_64 5 times on the stack. **/
    lswap = 1829        ,/** swap the 2 topmost int_64 elements. **/
    lrot = 1830         ,/** rotate the 3 topmost int_64 elements. **/
    lset = 1831         ,/** set a int_64 from stack into a field on base pointer. **/
    lget = 1832         ,/** get a int_64 from a field on base pointer to stack. **/
    lvset = 1833        ,/** set a int_64 from value into a field on base pointer. **/
    lsget = 1834        ,/** get a int_64 from a field on base pointer to stack using address from stack. **/
    lsset = 1835        ,/** set a int_64 from stack into a field on base pointer using address from stack. **/
    lsetl = 1836        ,/** set a int_64 from local variable into a field on base pointer. **/
    linc_1 = 1837       ,/** increment int_64 by 1 on stack. **/
    linc_2 = 1838       ,/** increment int_64 by 2 on stack. **/
    lstinc_1 = 1839     ,/** increment int_64 by 1 on stack. **/
    lstinc_2 = 1840     ,/** increment int_64 by 2 on stack. **/
    lreturn = 1841      ,/** return a int_64 into the main stack. **/
    lmainst = 1842      ,/** store a int_64 from main stack in a local variable.. **/
    lmainst_0 = 1843    ,/** store a int_64 from main stack in local variable 0. **/
    lmainst_1 = 1844    ,/** store a int_64 from main stack in local variable 1. **/
    lmainst_2 = 1845    ,/** store a int_64 from main stack in local variable 2. **/
    lmainst_3 = 1846    ,/** store a int_64 from main stack in local variable 3. **/
    lprint = 1847       ,/** print a int_64 from stack. **/
    luprint = 1848      ,/** print a unsigned uint_64 from stack. **/
    liconst = 1849      ,/** push a const int_128 into the stack. **/
    liconst_0 = 1850    ,/** push a const int_128 into the stack (value = 0). **/
    liconst_1 = 1851    ,/** push a const int_128 into the stack (value = 1). **/
    liconst_2 = 1852    ,/** push a const int_128 into the stack (value = 2). **/
    liconst_3 = 1853    ,/** push a const int_128 into the stack (value = 3). **/
    liconst_4 = 1854    ,/** push a const int_128 into the stack (value = 4). **/
    liconst_5 = 1855    ,/** push a const int_128 into the stack (value = 5). **/
    liconst_6 = 1856    ,/** push a const int_128 into the stack (value = 6). **/
    liconst_9 = 1857    ,/** push a const int_128 into the stack (value = 9). **/
    liconst_10 = 1858   ,/** push a const int_128 into the stack (value = 10). **/
    liconst_11 = 1859   ,/** push a const int_128 into the stack (value = 11). **/
    liconst_12 = 1860   ,/** push a const int_128 into the stack (value = 12). **/
    liload = 1861       ,/** load a int_128 into the stack from local variable. **/
    liload_0 = 1862     ,/** load a int_128 into the stack from local variable 0. **/
    liload_1 = 1863     ,/** load a int_128 into the stack from local variable 1. **/
    liload_2 = 1864     ,/** load a int_128 into the stack from local variable 2. **/
    liload_3 = 1865     ,/** load a int_128 into the stack from local variable 3. **/
    liload_4 = 1866     ,/** load a int_128 into the stack from local variable 4. **/
    listore = 1867      ,/** store a int_128 from stack into local variable. **/
    listore_0 = 1868    ,/** store a int_128 from stack into local variable 0. **/
    listore_1 = 1869    ,/** store a int_128 from stack into local variable 1. **/
    listore_2 = 1870    ,/** store a int_128 from stack into local variable 2. **/
    listore_3 = 1871    ,/** store a int_128 from stack into local variable 3. **/
    listore_4 = 1872    ,/** store a int_128 from stack into local variable 4. **/
    licast_b = 1873     ,/** cast int_128 to type Byte. **/
    liucast_b = 1874    ,/** cast unsigned uint_128 to type Byte. **/
    liadd_b = 1875      ,/** add int_128 with type Byte. **/
    liuadd_b = 1876     ,/** add unsigned uint_128 with type Byte. **/
    lisub_b = 1877      ,/** subtract int_128 with type Byte. **/
    liusub_b = 1878     ,/** subtract unsigned uint_128 with type Byte. **/
    limul_b = 1879      ,/** multiply int_128 with type Byte. **/
    liumul_b = 1880     ,/** multiply unsigned uint_128 with type Byte. **/
    lidiv_b = 1881      ,/** divide int_128 with type Byte. **/
    liudiv_b = 1882     ,/** divide unsigned uint_128 with type Byte. **/
    licmpl_b = 1883     ,/** compare int_128 less than type Byte. **/
    liucmpl_b = 1884    ,/** compare unsigned uint_128 less than type Byte. **/
    licmpg_b = 1885     ,/** compare int_128 greater than type Byte. **/
    liucmpg_b = 1886    ,/** compare unsigned uint_128 greater than type Byte. **/
    licmpe_b = 1887     ,/** compare int_128 equal with type Byte. **/
    liucmpe_b = 1888    ,/** compare unsigned uint_128 equal with type Byte. **/
    licmple_b = 1889    ,/** compare int_128 less than or equal to type Byte. **/
    liucmple_b = 1890   ,/** compare unsigned uint_128 less than or equal to type Byte. **/
    licmpge_b = 1891    ,/** compare int_128 greater than or equal to type Byte. **/
    liucmpge_b = 1892   ,/** compare unsigned uint_128 greater than or equal to type Byte. **/
    licmpne_b = 1893    ,/** compare int_128 not equal with type Byte. **/
    liucmpne_b = 1894   ,/** compare unsigned uint_128 not equal with type Byte. **/
    licast_s = 1895     ,/** cast int_128 to type Short. **/
    liucast_s = 1896    ,/** cast unsigned uint_128 to type Short. **/
    liadd_s = 1897      ,/** add int_128 with type Short. **/
    liuadd_s = 1898     ,/** add unsigned uint_128 with type Short. **/
    lisub_s = 1899      ,/** subtract int_128 with type Short. **/
    liusub_s = 1900     ,/** subtract unsigned uint_128 with type Short. **/
    limul_s = 1901      ,/** multiply int_128 with type Short. **/
    liumul_s = 1902     ,/** multiply unsigned uint_128 with type Short. **/
    lidiv_s = 1903      ,/** divide int_128 with type Short. **/
    liudiv_s = 1904     ,/** divide unsigned uint_128 with type Short. **/
    licmpl_s = 1905     ,/** compare int_128 less than type Short. **/
    liucmpl_s = 1906    ,/** compare unsigned uint_128 less than type Short. **/
    licmpg_s = 1907     ,/** compare int_128 greater than type Short. **/
    liucmpg_s = 1908    ,/** compare unsigned uint_128 greater than type Short. **/
    licmpe_s = 1909     ,/** compare int_128 equal with type Short. **/
    liucmpe_s = 1910    ,/** compare unsigned uint_128 equal with type Short. **/
    licmple_s = 1911    ,/** compare int_128 less than or equal to type Short. **/
    liucmple_s = 1912   ,/** compare unsigned uint_128 less than or equal to type Short. **/
    licmpge_s = 1913    ,/** compare int_128 greater than or equal to type Short. **/
    liucmpge_s = 1914   ,/** compare unsigned uint_128 greater than or equal to type Short. **/
    licmpne_s = 1915    ,/** compare int_128 not equal with type Short. **/
    liucmpne_s = 1916   ,/** compare unsigned uint_128 not equal with type Short. **/
    licast_i = 1917     ,/** cast int_128 to type Int. **/
    liucast_i = 1918    ,/** cast unsigned uint_128 to type Int. **/
    liadd_i = 1919      ,/** add int_128 with type Int. **/
    liuadd_i = 1920     ,/** add unsigned uint_128 with type Int. **/
    lisub_i = 1921      ,/** subtract int_128 with type Int. **/
    liusub_i = 1922     ,/** subtract unsigned uint_128 with type Int. **/
    limul_i = 1923      ,/** multiply int_128 with type Int. **/
    liumul_i = 1924     ,/** multiply unsigned uint_128 with type Int. **/
    lidiv_i = 1925      ,/** divide int_128 with type Int. **/
    liudiv_i = 1926     ,/** divide unsigned uint_128 with type Int. **/
    licmpl_i = 1927     ,/** compare int_128 less than type Int. **/
    liucmpl_i = 1928    ,/** compare unsigned uint_128 less than type Int. **/
    licmpg_i = 1929     ,/** compare int_128 greater than type Int. **/
    liucmpg_i = 1930    ,/** compare unsigned uint_128 greater than type Int. **/
    licmpe_i = 1931     ,/** compare int_128 equal with type Int. **/
    liucmpe_i = 1932    ,/** compare unsigned uint_128 equal with type Int. **/
    licmple_i = 1933    ,/** compare int_128 less than or equal to type Int. **/
    liucmple_i = 1934   ,/** compare unsigned uint_128 less than or equal to type Int. **/
    licmpge_i = 1935    ,/** compare int_128 greater than or equal to type Int. **/
    liucmpge_i = 1936   ,/** compare unsigned uint_128 greater than or equal to type Int. **/
    licmpne_i = 1937    ,/** compare int_128 not equal with type Int. **/
    liucmpne_i = 1938   ,/** compare unsigned uint_128 not equal with type Int. **/
    licast_l = 1939     ,/** cast int_128 to type Long. **/
    liucast_l = 1940    ,/** cast unsigned uint_128 to type Long. **/
    liadd_l = 1941      ,/** add int_128 with type Long. **/
    liuadd_l = 1942     ,/** add unsigned uint_128 with type Long. **/
    lisub_l = 1943      ,/** subtract int_128 with type Long. **/
    liusub_l = 1944     ,/** subtract unsigned uint_128 with type Long. **/
    limul_l = 1945      ,/** multiply int_128 with type Long. **/
    liumul_l = 1946     ,/** multiply unsigned uint_128 with type Long. **/
    lidiv_l = 1947      ,/** divide int_128 with type Long. **/
    liudiv_l = 1948     ,/** divide unsigned uint_128 with type Long. **/
    licmpl_l = 1949     ,/** compare int_128 less than type Long. **/
    liucmpl_l = 1950    ,/** compare unsigned uint_128 less than type Long. **/
    licmpg_l = 1951     ,/** compare int_128 greater than type Long. **/
    liucmpg_l = 1952    ,/** compare unsigned uint_128 greater than type Long. **/
    licmpe_l = 1953     ,/** compare int_128 equal with type Long. **/
    liucmpe_l = 1954    ,/** compare unsigned uint_128 equal with type Long. **/
    licmple_l = 1955    ,/** compare int_128 less than or equal to type Long. **/
    liucmple_l = 1956   ,/** compare unsigned uint_128 less than or equal to type Long. **/
    licmpge_l = 1957    ,/** compare int_128 greater than or equal to type Long. **/
    liucmpge_l = 1958   ,/** compare unsigned uint_128 greater than or equal to type Long. **/
    licmpne_l = 1959    ,/** compare int_128 not equal with type Long. **/
    liucmpne_l = 1960   ,/** compare unsigned uint_128 not equal with type Long. **/
    licast_li = 1961    ,/** cast int_128 to type LongInt. **/
    liucast_li = 1962   ,/** cast unsigned uint_128 to type LongInt. **/
    liadd_li = 1963     ,/** add int_128 with type LongInt. **/
    liuadd_li = 1964    ,/** add unsigned uint_128 with type LongInt. **/
    lisub_li = 1965     ,/** subtract int_128 with type LongInt. **/
    liusub_li = 1966    ,/** subtract unsigned uint_128 with type LongInt. **/
    limul_li = 1967     ,/** multiply int_128 with type LongInt. **/
    liumul_li = 1968    ,/** multiply unsigned uint_128 with type LongInt. **/
    lidiv_li = 1969     ,/** divide int_128 with type LongInt. **/
    liudiv_li = 1970    ,/** divide unsigned uint_128 with type LongInt. **/
    licmpl_li = 1971    ,/** compare int_128 less than type LongInt. **/
    liucmpl_li = 1972   ,/** compare unsigned uint_128 less than type LongInt. **/
    licmpg_li = 1973    ,/** compare int_128 greater than type LongInt. **/
    liucmpg_li = 1974   ,/** compare unsigned uint_128 greater than type LongInt. **/
    licmpe_li = 1975    ,/** compare int_128 equal with type LongInt. **/
    liucmpe_li = 1976   ,/** compare unsigned uint_128 equal with type LongInt. **/
    licmple_li = 1977   ,/** compare int_128 less than or equal to type LongInt. **/
    liucmple_li = 1978  ,/** compare unsigned uint_128 less than or equal to type LongInt. **/
    licmpge_li = 1979   ,/** compare int_128 greater than or equal to type LongInt. **/
    liucmpge_li = 1980  ,/** compare unsigned uint_128 greater than or equal to type LongInt. **/
    licmpne_li = 1981   ,/** compare int_128 not equal with type LongInt. **/
    liucmpne_li = 1982  ,/** compare unsigned uint_128 not equal with type LongInt. **/
    licast_ll = 1983    ,/** cast int_128 to type LongLong. **/
    liucast_ll = 1984   ,/** cast unsigned uint_128 to type LongLong. **/
    liadd_ll = 1985     ,/** add int_128 with type LongLong. **/
    liuadd_ll = 1986    ,/** add unsigned uint_128 with type LongLong. **/
    lisub_ll = 1987     ,/** subtract int_128 with type LongLong. **/
    liusub_ll = 1988    ,/** subtract unsigned uint_128 with type LongLong. **/
    limul_ll = 1989     ,/** multiply int_128 with type LongLong. **/
    liumul_ll = 1990    ,/** multiply unsigned uint_128 with type LongLong. **/
    lidiv_ll = 1991     ,/** divide int_128 with type LongLong. **/
    liudiv_ll = 1992    ,/** divide unsigned uint_128 with type LongLong. **/
    licmpl_ll = 1993    ,/** compare int_128 less than type LongLong. **/
    liucmpl_ll = 1994   ,/** compare unsigned uint_128 less than type LongLong. **/
    licmpg_ll = 1995    ,/** compare int_128 greater than type LongLong. **/
    liucmpg_ll = 1996   ,/** compare unsigned uint_128 greater than type LongLong. **/
    licmpe_ll = 1997    ,/** compare int_128 equal with type LongLong. **/
    liucmpe_ll = 1998   ,/** compare unsigned uint_128 equal with type LongLong. **/
    licmple_ll = 1999   ,/** compare int_128 less than or equal to type LongLong. **/
    liucmple_ll = 2000  ,/** compare unsigned uint_128 less than or equal to type LongLong. **/
    licmpge_ll = 2001   ,/** compare int_128 greater than or equal to type LongLong. **/
    liucmpge_ll = 2002  ,/** compare unsigned uint_128 greater than or equal to type LongLong. **/
    licmpne_ll = 2003   ,/** compare int_128 not equal with type LongLong. **/
    liucmpne_ll = 2004  ,/** compare unsigned uint_128 not equal with type LongLong. **/
    licast_f = 2005     ,/** cast int_128 to type Float. **/
    liucast_f = 2006    ,/** cast unsigned uint_128 to type Float. **/
    liadd_f = 2007      ,/** add int_128 with type Float. **/
    liuadd_f = 2008     ,/** add unsigned uint_128 with type Float. **/
    lisub_f = 2009      ,/** subtract int_128 with type Float. **/
    liusub_f = 2010     ,/** subtract unsigned uint_128 with type Float. **/
    limul_f = 2011      ,/** multiply int_128 with type Float. **/
    liumul_f = 2012     ,/** multiply unsigned uint_128 with type Float. **/
    lidiv_f = 2013      ,/** divide int_128 with type Float. **/
    liudiv_f = 2014     ,/** divide unsigned uint_128 with type Float. **/
    licmpl_f = 2015     ,/** compare int_128 less than type Float. **/
    liucmpl_f = 2016    ,/** compare unsigned uint_128 less than type Float. **/
    licmpg_f = 2017     ,/** compare int_128 greater than type Float. **/
    liucmpg_f = 2018    ,/** compare unsigned uint_128 greater than type Float. **/
    licmpe_f = 2019     ,/** compare int_128 equal with type Float. **/
    liucmpe_f = 2020    ,/** compare unsigned uint_128 equal with type Float. **/
    licmple_f = 2021    ,/** compare int_128 less than or equal to type Float. **/
    liucmple_f = 2022   ,/** compare unsigned uint_128 less than or equal to type Float. **/
    licmpge_f = 2023    ,/** compare int_128 greater than or equal to type Float. **/
    liucmpge_f = 2024   ,/** compare unsigned uint_128 greater than or equal to type Float. **/
    licmpne_f = 2025    ,/** compare int_128 not equal with type Float. **/
    liucmpne_f = 2026   ,/** compare unsigned uint_128 not equal with type Float. **/
    licast_d = 2027     ,/** cast int_128 to type Double. **/
    liucast_d = 2028    ,/** cast unsigned uint_128 to type Double. **/
    liadd_d = 2029      ,/** add int_128 with type Double. **/
    liuadd_d = 2030     ,/** add unsigned uint_128 with type Double. **/
    lisub_d = 2031      ,/** subtract int_128 with type Double. **/
    liusub_d = 2032     ,/** subtract unsigned uint_128 with type Double. **/
    limul_d = 2033      ,/** multiply int_128 with type Double. **/
    liumul_d = 2034     ,/** multiply unsigned uint_128 with type Double. **/
    lidiv_d = 2035      ,/** divide int_128 with type Double. **/
    liudiv_d = 2036     ,/** divide unsigned uint_128 with type Double. **/
    licmpl_d = 2037     ,/** compare int_128 less than type Double. **/
    liucmpl_d = 2038    ,/** compare unsigned uint_128 less than type Double. **/
    licmpg_d = 2039     ,/** compare int_128 greater than type Double. **/
    liucmpg_d = 2040    ,/** compare unsigned uint_128 greater than type Double. **/
    licmpe_d = 2041     ,/** compare int_128 equal with type Double. **/
    liucmpe_d = 2042    ,/** compare unsigned uint_128 equal with type Double. **/
    licmple_d = 2043    ,/** compare int_128 less than or equal to type Double. **/
    liucmple_d = 2044   ,/** compare unsigned uint_128 less than or equal to type Double. **/
    licmpge_d = 2045    ,/** compare int_128 greater than or equal to type Double. **/
    liucmpge_d = 2046   ,/** compare unsigned uint_128 greater than or equal to type Double. **/
    licmpne_d = 2047    ,/** compare int_128 not equal with type Double. **/
    liucmpne_d = 2048   ,/** compare unsigned uint_128 not equal with type Double. **/
    licast_df = 2049    ,/** cast int_128 to type DoubleFloat. **/
    liucast_df = 2050   ,/** cast unsigned uint_128 to type DoubleFloat. **/
    liadd_df = 2051     ,/** add int_128 with type DoubleFloat. **/
    liuadd_df = 2052    ,/** add unsigned uint_128 with type DoubleFloat. **/
    lisub_df = 2053     ,/** subtract int_128 with type DoubleFloat. **/
    liusub_df = 2054    ,/** subtract unsigned uint_128 with type DoubleFloat. **/
    limul_df = 2055     ,/** multiply int_128 with type DoubleFloat. **/
    liumul_df = 2056    ,/** multiply unsigned uint_128 with type DoubleFloat. **/
    lidiv_df = 2057     ,/** divide int_128 with type DoubleFloat. **/
    liudiv_df = 2058    ,/** divide unsigned uint_128 with type DoubleFloat. **/
    licmpl_df = 2059    ,/** compare int_128 less than type DoubleFloat. **/
    liucmpl_df = 2060   ,/** compare unsigned uint_128 less than type DoubleFloat. **/
    licmpg_df = 2061    ,/** compare int_128 greater than type DoubleFloat. **/
    liucmpg_df = 2062   ,/** compare unsigned uint_128 greater than type DoubleFloat. **/
    licmpe_df = 2063    ,/** compare int_128 equal with type DoubleFloat. **/
    liucmpe_df = 2064   ,/** compare unsigned uint_128 equal with type DoubleFloat. **/
    licmple_df = 2065   ,/** compare int_128 less than or equal to type DoubleFloat. **/
    liucmple_df = 2066  ,/** compare unsigned uint_128 less than or equal to type DoubleFloat. **/
    licmpge_df = 2067   ,/** compare int_128 greater than or equal to type DoubleFloat. **/
    liucmpge_df = 2068  ,/** compare unsigned uint_128 greater than or equal to type DoubleFloat. **/
    licmpne_df = 2069   ,/** compare int_128 not equal with type DoubleFloat. **/
    liucmpne_df = 2070  ,/** compare unsigned uint_128 not equal with type DoubleFloat. **/
    licast_dd = 2071    ,/** cast int_128 to type DoubleDouble. **/
    liucast_dd = 2072   ,/** cast unsigned uint_128 to type DoubleDouble. **/
    liadd_dd = 2073     ,/** add int_128 with type DoubleDouble. **/
    liuadd_dd = 2074    ,/** add unsigned uint_128 with type DoubleDouble. **/
    lisub_dd = 2075     ,/** subtract int_128 with type DoubleDouble. **/
    liusub_dd = 2076    ,/** subtract unsigned uint_128 with type DoubleDouble. **/
    limul_dd = 2077     ,/** multiply int_128 with type DoubleDouble. **/
    liumul_dd = 2078    ,/** multiply unsigned uint_128 with type DoubleDouble. **/
    lidiv_dd = 2079     ,/** divide int_128 with type DoubleDouble. **/
    liudiv_dd = 2080    ,/** divide unsigned uint_128 with type DoubleDouble. **/
    licmpl_dd = 2081    ,/** compare int_128 less than type DoubleDouble. **/
    liucmpl_dd = 2082   ,/** compare unsigned uint_128 less than type DoubleDouble. **/
    licmpg_dd = 2083    ,/** compare int_128 greater than type DoubleDouble. **/
    liucmpg_dd = 2084   ,/** compare unsigned uint_128 greater than type DoubleDouble. **/
    licmpe_dd = 2085    ,/** compare int_128 equal with type DoubleDouble. **/
    liucmpe_dd = 2086   ,/** compare unsigned uint_128 equal with type DoubleDouble. **/
    licmple_dd = 2087   ,/** compare int_128 less than or equal to type DoubleDouble. **/
    liucmple_dd = 2088  ,/** compare unsigned uint_128 less than or equal to type DoubleDouble. **/
    licmpge_dd = 2089   ,/** compare int_128 greater than or equal to type DoubleDouble. **/
    liucmpge_dd = 2090  ,/** compare unsigned uint_128 greater than or equal to type DoubleDouble. **/
    licmpne_dd = 2091   ,/** compare int_128 not equal with type DoubleDouble. **/
    liucmpne_dd = 2092  ,/** compare unsigned uint_128 not equal with type DoubleDouble. **/
    limod_b = 2093      ,/** modulo int_128 with type Byte. **/
    licast_ub = 2094    ,/** cast int_128 to unsigned type Byte. **/
    liucast_ub = 2095   ,/** cast unsigned uint_128 to unsigned type Byte. **/
    liadd_ub = 2096     ,/** add int_128 with unsigned type Byte. **/
    liuadd_ub = 2097    ,/** add unsigned uint_128 with unsigned type Byte. **/
    lisub_ub = 2098     ,/** subtract int_128 with unsigned type Byte. **/
    liusub_ub = 2099    ,/** subtract unsigned uint_128 with unsigned type Byte. **/
    limul_ub = 2100     ,/** multiply int_128 with unsigned type Byte. **/
    liumul_ub = 2101    ,/** multiply unsigned uint_128 with unsigned type Byte. **/
    lidiv_ub = 2102     ,/** divide int_128 with unsigned type Byte. **/
    liudiv_ub = 2103    ,/** divide unsigned uint_128 with unsigned type Byte. **/
    licmpl_ub = 2104    ,/** compare int_128 less than unsigned type Byte. **/
    liucmpl_ub = 2105   ,/** compare unsigned uint_128 less than unsigned type Byte. **/
    licmpg_ub = 2106    ,/** compare int_128 greater than unsigned type Byte. **/
    liucmpg_ub = 2107   ,/** compare unsigned uint_128 greater than unsigned type Byte. **/
    licmpe_ub = 2108    ,/** compare int_128 equal with unsigned type Byte. **/
    liucmpe_ub = 2109   ,/** compare unsigned uint_128 equal with unsigned type Byte. **/
    licmple_ub = 2110   ,/** compare int_128 less than or equal to unsigned type Byte. **/
    liucmple_ub = 2111  ,/** compare unsigned uint_128 less than or equal to unsigned type Byte. **/
    licmpge_ub = 2112   ,/** compare int_128 greater than or equal to unsigned type Byte. **/
    liucmpge_ub = 2113  ,/** compare unsigned uint_128 greater than or equal to unsigned type Byte. **/
    licmpne_ub = 2114   ,/** compare int_128 not equal with unsigned type Byte. **/
    liucmpne_ub = 2115  ,/** compare unsigned uint_128 not equal with unsigned type Byte. **/
    liswapb = 2116      ,/** swap the 2 topmost int_128 elements where the top element is a Byte. **/
    limod_s = 2117      ,/** modulo int_128 with type Short. **/
    licast_us = 2118    ,/** cast int_128 to unsigned type Short. **/
    liucast_us = 2119   ,/** cast unsigned uint_128 to unsigned type Short. **/
    liadd_us = 2120     ,/** add int_128 with unsigned type Short. **/
    liuadd_us = 2121    ,/** add unsigned uint_128 with unsigned type Short. **/
    lisub_us = 2122     ,/** subtract int_128 with unsigned type Short. **/
    liusub_us = 2123    ,/** subtract unsigned uint_128 with unsigned type Short. **/
    limul_us = 2124     ,/** multiply int_128 with unsigned type Short. **/
    liumul_us = 2125    ,/** multiply unsigned uint_128 with unsigned type Short. **/
    lidiv_us = 2126     ,/** divide int_128 with unsigned type Short. **/
    liudiv_us = 2127    ,/** divide unsigned uint_128 with unsigned type Short. **/
    licmpl_us = 2128    ,/** compare int_128 less than unsigned type Short. **/
    liucmpl_us = 2129   ,/** compare unsigned uint_128 less than unsigned type Short. **/
    licmpg_us = 2130    ,/** compare int_128 greater than unsigned type Short. **/
    liucmpg_us = 2131   ,/** compare unsigned uint_128 greater than unsigned type Short. **/
    licmpe_us = 2132    ,/** compare int_128 equal with unsigned type Short. **/
    liucmpe_us = 2133   ,/** compare unsigned uint_128 equal with unsigned type Short. **/
    licmple_us = 2134   ,/** compare int_128 less than or equal to unsigned type Short. **/
    liucmple_us = 2135  ,/** compare unsigned uint_128 less than or equal to unsigned type Short. **/
    licmpge_us = 2136   ,/** compare int_128 greater than or equal to unsigned type Short. **/
    liucmpge_us = 2137  ,/** compare unsigned uint_128 greater than or equal to unsigned type Short. **/
    licmpne_us = 2138   ,/** compare int_128 not equal with unsigned type Short. **/
    liucmpne_us = 2139  ,/** compare unsigned uint_128 not equal with unsigned type Short. **/
    liswaps = 2140      ,/** swap the 2 topmost int_128 elements where the top element is a Short. **/
    limod_i = 2141      ,/** modulo int_128 with type Int. **/
    licast_ui = 2142    ,/** cast int_128 to unsigned type Int. **/
    liucast_ui = 2143   ,/** cast unsigned uint_128 to unsigned type Int. **/
    liadd_ui = 2144     ,/** add int_128 with unsigned type Int. **/
    liuadd_ui = 2145    ,/** add unsigned uint_128 with unsigned type Int. **/
    lisub_ui = 2146     ,/** subtract int_128 with unsigned type Int. **/
    liusub_ui = 2147    ,/** subtract unsigned uint_128 with unsigned type Int. **/
    limul_ui = 2148     ,/** multiply int_128 with unsigned type Int. **/
    liumul_ui = 2149    ,/** multiply unsigned uint_128 with unsigned type Int. **/
    lidiv_ui = 2150     ,/** divide int_128 with unsigned type Int. **/
    liudiv_ui = 2151    ,/** divide unsigned uint_128 with unsigned type Int. **/
    licmpl_ui = 2152    ,/** compare int_128 less than unsigned type Int. **/
    liucmpl_ui = 2153   ,/** compare unsigned uint_128 less than unsigned type Int. **/
    licmpg_ui = 2154    ,/** compare int_128 greater than unsigned type Int. **/
    liucmpg_ui = 2155   ,/** compare unsigned uint_128 greater than unsigned type Int. **/
    licmpe_ui = 2156    ,/** compare int_128 equal with unsigned type Int. **/
    liucmpe_ui = 2157   ,/** compare unsigned uint_128 equal with unsigned type Int. **/
    licmple_ui = 2158   ,/** compare int_128 less than or equal to unsigned type Int. **/
    liucmple_ui = 2159  ,/** compare unsigned uint_128 less than or equal to unsigned type Int. **/
    licmpge_ui = 2160   ,/** compare int_128 greater than or equal to unsigned type Int. **/
    liucmpge_ui = 2161  ,/** compare unsigned uint_128 greater than or equal to unsigned type Int. **/
    licmpne_ui = 2162   ,/** compare int_128 not equal with unsigned type Int. **/
    liucmpne_ui = 2163  ,/** compare unsigned uint_128 not equal with unsigned type Int. **/
    liswapi = 2164      ,/** swap the 2 topmost int_128 elements where the top element is a Int. **/
    limod_l = 2165      ,/** modulo int_128 with type Long. **/
    licast_ul = 2166    ,/** cast int_128 to unsigned type Long. **/
    liucast_ul = 2167   ,/** cast unsigned uint_128 to unsigned type Long. **/
    liadd_ul = 2168     ,/** add int_128 with unsigned type Long. **/
    liuadd_ul = 2169    ,/** add unsigned uint_128 with unsigned type Long. **/
    lisub_ul = 2170     ,/** subtract int_128 with unsigned type Long. **/
    liusub_ul = 2171    ,/** subtract unsigned uint_128 with unsigned type Long. **/
    limul_ul = 2172     ,/** multiply int_128 with unsigned type Long. **/
    liumul_ul = 2173    ,/** multiply unsigned uint_128 with unsigned type Long. **/
    lidiv_ul = 2174     ,/** divide int_128 with unsigned type Long. **/
    liudiv_ul = 2175    ,/** divide unsigned uint_128 with unsigned type Long. **/
    licmpl_ul = 2176    ,/** compare int_128 less than unsigned type Long. **/
    liucmpl_ul = 2177   ,/** compare unsigned uint_128 less than unsigned type Long. **/
    licmpg_ul = 2178    ,/** compare int_128 greater than unsigned type Long. **/
    liucmpg_ul = 2179   ,/** compare unsigned uint_128 greater than unsigned type Long. **/
    licmpe_ul = 2180    ,/** compare int_128 equal with unsigned type Long. **/
    liucmpe_ul = 2181   ,/** compare unsigned uint_128 equal with unsigned type Long. **/
    licmple_ul = 2182   ,/** compare int_128 less than or equal to unsigned type Long. **/
    liucmple_ul = 2183  ,/** compare unsigned uint_128 less than or equal to unsigned type Long. **/
    licmpge_ul = 2184   ,/** compare int_128 greater than or equal to unsigned type Long. **/
    liucmpge_ul = 2185  ,/** compare unsigned uint_128 greater than or equal to unsigned type Long. **/
    licmpne_ul = 2186   ,/** compare int_128 not equal with unsigned type Long. **/
    liucmpne_ul = 2187  ,/** compare unsigned uint_128 not equal with unsigned type Long. **/
    liswapl = 2188      ,/** swap the 2 topmost int_128 elements where the top element is a Long. **/
    limod_li = 2189     ,/** modulo int_128 with type LongInt. **/
    licast_uli = 2190   ,/** cast int_128 to unsigned type LongInt. **/
    liucast_uli = 2191  ,/** cast unsigned uint_128 to unsigned type LongInt. **/
    liadd_uli = 2192    ,/** add int_128 with unsigned type LongInt. **/
    liuadd_uli = 2193   ,/** add unsigned uint_128 with unsigned type LongInt. **/
    lisub_uli = 2194    ,/** subtract int_128 with unsigned type LongInt. **/
    liusub_uli = 2195   ,/** subtract unsigned uint_128 with unsigned type LongInt. **/
    limul_uli = 2196    ,/** multiply int_128 with unsigned type LongInt. **/
    liumul_uli = 2197   ,/** multiply unsigned uint_128 with unsigned type LongInt. **/
    lidiv_uli = 2198    ,/** divide int_128 with unsigned type LongInt. **/
    liudiv_uli = 2199   ,/** divide unsigned uint_128 with unsigned type LongInt. **/
    licmpl_uli = 2200   ,/** compare int_128 less than unsigned type LongInt. **/
    liucmpl_uli = 2201  ,/** compare unsigned uint_128 less than unsigned type LongInt. **/
    licmpg_uli = 2202   ,/** compare int_128 greater than unsigned type LongInt. **/
    liucmpg_uli = 2203  ,/** compare unsigned uint_128 greater than unsigned type LongInt. **/
    licmpe_uli = 2204   ,/** compare int_128 equal with unsigned type LongInt. **/
    liucmpe_uli = 2205  ,/** compare unsigned uint_128 equal with unsigned type LongInt. **/
    licmple_uli = 2206  ,/** compare int_128 less than or equal to unsigned type LongInt. **/
    liucmple_uli = 2207 ,/** compare unsigned uint_128 less than or equal to unsigned type LongInt. **/
    licmpge_uli = 2208  ,/** compare int_128 greater than or equal to unsigned type LongInt. **/
    liucmpge_uli = 2209 ,/** compare unsigned uint_128 greater than or equal to unsigned type LongInt. **/
    licmpne_uli = 2210  ,/** compare int_128 not equal with unsigned type LongInt. **/
    liucmpne_uli = 2211 ,/** compare unsigned uint_128 not equal with unsigned type LongInt. **/
    liswapli = 2212     ,/** swap the 2 topmost int_128 elements where the top element is a LongInt. **/
    limod_ll = 2213     ,/** modulo int_128 with type LongLong. **/
    licast_ull = 2214   ,/** cast int_128 to unsigned type LongLong. **/
    liucast_ull = 2215  ,/** cast unsigned uint_128 to unsigned type LongLong. **/
    liadd_ull = 2216    ,/** add int_128 with unsigned type LongLong. **/
    liuadd_ull = 2217   ,/** add unsigned uint_128 with unsigned type LongLong. **/
    lisub_ull = 2218    ,/** subtract int_128 with unsigned type LongLong. **/
    liusub_ull = 2219   ,/** subtract unsigned uint_128 with unsigned type LongLong. **/
    limul_ull = 2220    ,/** multiply int_128 with unsigned type LongLong. **/
    liumul_ull = 2221   ,/** multiply unsigned uint_128 with unsigned type LongLong. **/
    lidiv_ull = 2222    ,/** divide int_128 with unsigned type LongLong. **/
    liudiv_ull = 2223   ,/** divide unsigned uint_128 with unsigned type LongLong. **/
    licmpl_ull = 2224   ,/** compare int_128 less than unsigned type LongLong. **/
    liucmpl_ull = 2225  ,/** compare unsigned uint_128 less than unsigned type LongLong. **/
    licmpg_ull = 2226   ,/** compare int_128 greater than unsigned type LongLong. **/
    liucmpg_ull = 2227  ,/** compare unsigned uint_128 greater than unsigned type LongLong. **/
    licmpe_ull = 2228   ,/** compare int_128 equal with unsigned type LongLong. **/
    liucmpe_ull = 2229  ,/** compare unsigned uint_128 equal with unsigned type LongLong. **/
    licmple_ull = 2230  ,/** compare int_128 less than or equal to unsigned type LongLong. **/
    liucmple_ull = 2231 ,/** compare unsigned uint_128 less than or equal to unsigned type LongLong. **/
    licmpge_ull = 2232  ,/** compare int_128 greater than or equal to unsigned type LongLong. **/
    liucmpge_ull = 2233 ,/** compare unsigned uint_128 greater than or equal to unsigned type LongLong. **/
    licmpne_ull = 2234  ,/** compare int_128 not equal with unsigned type LongLong. **/
    liucmpne_ull = 2235 ,/** compare unsigned uint_128 not equal with unsigned type LongLong. **/
    liswapll = 2236     ,/** swap the 2 topmost int_128 elements where the top element is a LongLong. **/
    liswapf = 2237      ,/** swap the 2 topmost int_128 elements where the top element is a Float. **/
    liswapd = 2238      ,/** swap the 2 topmost int_128 elements where the top element is a Double. **/
    liswapdf = 2239     ,/** swap the 2 topmost int_128 elements where the top element is a DoubleFloat. **/
    liswapdd = 2240     ,/** swap the 2 topmost int_128 elements where the top element is a DoubleDouble. **/
    liswapa = 2241      ,/** swap the 2 topmost int_128 elements where the top element is a Pointer. **/
    liand_b = 2242      ,/** bitwise and int_128 with type Byte. **/
    lior_b = 2243       ,/** bitwise or int_128 with type Byte. **/
    lixor_b = 2244      ,/** bitwise xor int_128 with type Byte. **/
    lishftr_b = 2245    ,/** shift right int_128 with type Byte. **/
    lishftl_b = 2246    ,/** shift left xor int_128 with type Byte. **/
    liand_s = 2247      ,/** bitwise and int_128 with type Short. **/
    lior_s = 2248       ,/** bitwise or int_128 with type Short. **/
    lixor_s = 2249      ,/** bitwise xor int_128 with type Short. **/
    lishftr_s = 2250    ,/** shift right int_128 with type Short. **/
    lishftl_s = 2251    ,/** shift left xor int_128 with type Short. **/
    liand_i = 2252      ,/** bitwise and int_128 with type Int. **/
    lior_i = 2253       ,/** bitwise or int_128 with type Int. **/
    lixor_i = 2254      ,/** bitwise xor int_128 with type Int. **/
    lishftr_i = 2255    ,/** shift right int_128 with type Int. **/
    lishftl_i = 2256    ,/** shift left xor int_128 with type Int. **/
    liand_l = 2257      ,/** bitwise and int_128 with type Long. **/
    lior_l = 2258       ,/** bitwise or int_128 with type Long. **/
    lixor_l = 2259      ,/** bitwise xor int_128 with type Long. **/
    lishftr_l = 2260    ,/** shift right int_128 with type Long. **/
    lishftl_l = 2261    ,/** shift left xor int_128 with type Long. **/
    liand_li = 2262     ,/** bitwise and int_128 with type LongInt. **/
    lior_li = 2263      ,/** bitwise or int_128 with type LongInt. **/
    lixor_li = 2264     ,/** bitwise xor int_128 with type LongInt. **/
    lishftr_li = 2265   ,/** shift right int_128 with type LongInt. **/
    lishftl_li = 2266   ,/** shift left xor int_128 with type LongInt. **/
    liand_ll = 2267     ,/** bitwise and int_128 with type LongLong. **/
    lior_ll = 2268      ,/** bitwise or int_128 with type LongLong. **/
    lixor_ll = 2269     ,/** bitwise xor int_128 with type LongLong. **/
    lishftr_ll = 2270   ,/** shift right int_128 with type LongLong. **/
    lishftl_ll = 2271   ,/** shift left xor int_128 with type LongLong. **/
    lidup = 2272        ,/** duplicate a int_128 on the stack. **/
    lidup2 = 2273       ,/** duplicate a int_128 2 times on the stack. **/
    lidup3 = 2274       ,/** duplicate a int_128 3 times on the stack. **/
    lidup4 = 2275       ,/** duplicate a int_128 4 times on the stack. **/
    lidup5 = 2276       ,/** duplicate a int_128 5 times on the stack. **/
    liswap = 2277       ,/** swap the 2 topmost int_128 elements. **/
    lirot = 2278        ,/** rotate the 3 topmost int_128 elements. **/
    liset = 2279        ,/** set a int_128 from stack into a field on base pointer. **/
    liget = 2280        ,/** get a int_128 from a field on base pointer to stack. **/
    livset = 2281       ,/** set a int_128 from value into a field on base pointer. **/
    lisget = 2282       ,/** get a int_128 from a field on base pointer to stack using address from stack. **/
    lisset = 2283       ,/** set a int_128 from stack into a field on base pointer using address from stack. **/
    lisetl = 2284       ,/** set a int_128 from local variable into a field on base pointer. **/
    liinc_1 = 2285      ,/** increment int_128 by 1 on stack. **/
    liinc_2 = 2286      ,/** increment int_128 by 2 on stack. **/
    listinc_1 = 2287    ,/** increment int_128 by 1 on stack. **/
    listinc_2 = 2288    ,/** increment int_128 by 2 on stack. **/
    lireturn = 2289     ,/** return a int_128 into the main stack. **/
    limainst = 2290     ,/** store a int_128 from main stack in a local variable.. **/
    limainst_0 = 2291   ,/** store a int_128 from main stack in local variable 0. **/
    limainst_1 = 2292   ,/** store a int_128 from main stack in local variable 1. **/
    limainst_2 = 2293   ,/** store a int_128 from main stack in local variable 2. **/
    limainst_3 = 2294   ,/** store a int_128 from main stack in local variable 3. **/
    liprint = 2295      ,/** print a int_128 from stack. **/
    liuprint = 2296     ,/** print a unsigned uint_128 from stack. **/
    llconst = 2297      ,/** push a const int_256 into the stack. **/
    llconst_0 = 2298    ,/** push a const int_256 into the stack (value = 0). **/
    llconst_1 = 2299    ,/** push a const int_256 into the stack (value = 1). **/
    llconst_2 = 2300    ,/** push a const int_256 into the stack (value = 2). **/
    llconst_3 = 2301    ,/** push a const int_256 into the stack (value = 3). **/
    llconst_4 = 2302    ,/** push a const int_256 into the stack (value = 4). **/
    llconst_5 = 2303    ,/** push a const int_256 into the stack (value = 5). **/
    llconst_6 = 2304    ,/** push a const int_256 into the stack (value = 6). **/
    llconst_9 = 2305    ,/** push a const int_256 into the stack (value = 9). **/
    llconst_10 = 2306   ,/** push a const int_256 into the stack (value = 10). **/
    llconst_11 = 2307   ,/** push a const int_256 into the stack (value = 11). **/
    llconst_12 = 2308   ,/** push a const int_256 into the stack (value = 12). **/
    llload = 2309       ,/** load a int_256 into the stack from local variable. **/
    llload_0 = 2310     ,/** load a int_256 into the stack from local variable 0. **/
    llload_1 = 2311     ,/** load a int_256 into the stack from local variable 1. **/
    llload_2 = 2312     ,/** load a int_256 into the stack from local variable 2. **/
    llload_3 = 2313     ,/** load a int_256 into the stack from local variable 3. **/
    llload_4 = 2314     ,/** load a int_256 into the stack from local variable 4. **/
    llstore = 2315      ,/** store a int_256 from stack into local variable. **/
    llstore_0 = 2316    ,/** store a int_256 from stack into local variable 0. **/
    llstore_1 = 2317    ,/** store a int_256 from stack into local variable 1. **/
    llstore_2 = 2318    ,/** store a int_256 from stack into local variable 2. **/
    llstore_3 = 2319    ,/** store a int_256 from stack into local variable 3. **/
    llstore_4 = 2320    ,/** store a int_256 from stack into local variable 4. **/
    llcast_b = 2321     ,/** cast int_256 to type Byte. **/
    llucast_b = 2322    ,/** cast unsigned uint_256 to type Byte. **/
    lladd_b = 2323      ,/** add int_256 with type Byte. **/
    lluadd_b = 2324     ,/** add unsigned uint_256 with type Byte. **/
    llsub_b = 2325      ,/** subtract int_256 with type Byte. **/
    llusub_b = 2326     ,/** subtract unsigned uint_256 with type Byte. **/
    llmul_b = 2327      ,/** multiply int_256 with type Byte. **/
    llumul_b = 2328     ,/** multiply unsigned uint_256 with type Byte. **/
    lldiv_b = 2329      ,/** divide int_256 with type Byte. **/
    lludiv_b = 2330     ,/** divide unsigned uint_256 with type Byte. **/
    llcmpl_b = 2331     ,/** compare int_256 less than type Byte. **/
    llucmpl_b = 2332    ,/** compare unsigned uint_256 less than type Byte. **/
    llcmpg_b = 2333     ,/** compare int_256 greater than type Byte. **/
    llucmpg_b = 2334    ,/** compare unsigned uint_256 greater than type Byte. **/
    llcmpe_b = 2335     ,/** compare int_256 equal with type Byte. **/
    llucmpe_b = 2336    ,/** compare unsigned uint_256 equal with type Byte. **/
    llcmple_b = 2337    ,/** compare int_256 less than or equal to type Byte. **/
    llucmple_b = 2338   ,/** compare unsigned uint_256 less than or equal to type Byte. **/
    llcmpge_b = 2339    ,/** compare int_256 greater than or equal to type Byte. **/
    llucmpge_b = 2340   ,/** compare unsigned uint_256 greater than or equal to type Byte. **/
    llcmpne_b = 2341    ,/** compare int_256 not equal with type Byte. **/
    llucmpne_b = 2342   ,/** compare unsigned uint_256 not equal with type Byte. **/
    llcast_s = 2343     ,/** cast int_256 to type Short. **/
    llucast_s = 2344    ,/** cast unsigned uint_256 to type Short. **/
    lladd_s = 2345      ,/** add int_256 with type Short. **/
    lluadd_s = 2346     ,/** add unsigned uint_256 with type Short. **/
    llsub_s = 2347      ,/** subtract int_256 with type Short. **/
    llusub_s = 2348     ,/** subtract unsigned uint_256 with type Short. **/
    llmul_s = 2349      ,/** multiply int_256 with type Short. **/
    llumul_s = 2350     ,/** multiply unsigned uint_256 with type Short. **/
    lldiv_s = 2351      ,/** divide int_256 with type Short. **/
    lludiv_s = 2352     ,/** divide unsigned uint_256 with type Short. **/
    llcmpl_s = 2353     ,/** compare int_256 less than type Short. **/
    llucmpl_s = 2354    ,/** compare unsigned uint_256 less than type Short. **/
    llcmpg_s = 2355     ,/** compare int_256 greater than type Short. **/
    llucmpg_s = 2356    ,/** compare unsigned uint_256 greater than type Short. **/
    llcmpe_s = 2357     ,/** compare int_256 equal with type Short. **/
    llucmpe_s = 2358    ,/** compare unsigned uint_256 equal with type Short. **/
    llcmple_s = 2359    ,/** compare int_256 less than or equal to type Short. **/
    llucmple_s = 2360   ,/** compare unsigned uint_256 less than or equal to type Short. **/
    llcmpge_s = 2361    ,/** compare int_256 greater than or equal to type Short. **/
    llucmpge_s = 2362   ,/** compare unsigned uint_256 greater than or equal to type Short. **/
    llcmpne_s = 2363    ,/** compare int_256 not equal with type Short. **/
    llucmpne_s = 2364   ,/** compare unsigned uint_256 not equal with type Short. **/
    llcast_i = 2365     ,/** cast int_256 to type Int. **/
    llucast_i = 2366    ,/** cast unsigned uint_256 to type Int. **/
    lladd_i = 2367      ,/** add int_256 with type Int. **/
    lluadd_i = 2368     ,/** add unsigned uint_256 with type Int. **/
    llsub_i = 2369      ,/** subtract int_256 with type Int. **/
    llusub_i = 2370     ,/** subtract unsigned uint_256 with type Int. **/
    llmul_i = 2371      ,/** multiply int_256 with type Int. **/
    llumul_i = 2372     ,/** multiply unsigned uint_256 with type Int. **/
    lldiv_i = 2373      ,/** divide int_256 with type Int. **/
    lludiv_i = 2374     ,/** divide unsigned uint_256 with type Int. **/
    llcmpl_i = 2375     ,/** compare int_256 less than type Int. **/
    llucmpl_i = 2376    ,/** compare unsigned uint_256 less than type Int. **/
    llcmpg_i = 2377     ,/** compare int_256 greater than type Int. **/
    llucmpg_i = 2378    ,/** compare unsigned uint_256 greater than type Int. **/
    llcmpe_i = 2379     ,/** compare int_256 equal with type Int. **/
    llucmpe_i = 2380    ,/** compare unsigned uint_256 equal with type Int. **/
    llcmple_i = 2381    ,/** compare int_256 less than or equal to type Int. **/
    llucmple_i = 2382   ,/** compare unsigned uint_256 less than or equal to type Int. **/
    llcmpge_i = 2383    ,/** compare int_256 greater than or equal to type Int. **/
    llucmpge_i = 2384   ,/** compare unsigned uint_256 greater than or equal to type Int. **/
    llcmpne_i = 2385    ,/** compare int_256 not equal with type Int. **/
    llucmpne_i = 2386   ,/** compare unsigned uint_256 not equal with type Int. **/
    llcast_l = 2387     ,/** cast int_256 to type Long. **/
    llucast_l = 2388    ,/** cast unsigned uint_256 to type Long. **/
    lladd_l = 2389      ,/** add int_256 with type Long. **/
    lluadd_l = 2390     ,/** add unsigned uint_256 with type Long. **/
    llsub_l = 2391      ,/** subtract int_256 with type Long. **/
    llusub_l = 2392     ,/** subtract unsigned uint_256 with type Long. **/
    llmul_l = 2393      ,/** multiply int_256 with type Long. **/
    llumul_l = 2394     ,/** multiply unsigned uint_256 with type Long. **/
    lldiv_l = 2395      ,/** divide int_256 with type Long. **/
    lludiv_l = 2396     ,/** divide unsigned uint_256 with type Long. **/
    llcmpl_l = 2397     ,/** compare int_256 less than type Long. **/
    llucmpl_l = 2398    ,/** compare unsigned uint_256 less than type Long. **/
    llcmpg_l = 2399     ,/** compare int_256 greater than type Long. **/
    llucmpg_l = 2400    ,/** compare unsigned uint_256 greater than type Long. **/
    llcmpe_l = 2401     ,/** compare int_256 equal with type Long. **/
    llucmpe_l = 2402    ,/** compare unsigned uint_256 equal with type Long. **/
    llcmple_l = 2403    ,/** compare int_256 less than or equal to type Long. **/
    llucmple_l = 2404   ,/** compare unsigned uint_256 less than or equal to type Long. **/
    llcmpge_l = 2405    ,/** compare int_256 greater than or equal to type Long. **/
    llucmpge_l = 2406   ,/** compare unsigned uint_256 greater than or equal to type Long. **/
    llcmpne_l = 2407    ,/** compare int_256 not equal with type Long. **/
    llucmpne_l = 2408   ,/** compare unsigned uint_256 not equal with type Long. **/
    llcast_li = 2409    ,/** cast int_256 to type LongInt. **/
    llucast_li = 2410   ,/** cast unsigned uint_256 to type LongInt. **/
    lladd_li = 2411     ,/** add int_256 with type LongInt. **/
    lluadd_li = 2412    ,/** add unsigned uint_256 with type LongInt. **/
    llsub_li = 2413     ,/** subtract int_256 with type LongInt. **/
    llusub_li = 2414    ,/** subtract unsigned uint_256 with type LongInt. **/
    llmul_li = 2415     ,/** multiply int_256 with type LongInt. **/
    llumul_li = 2416    ,/** multiply unsigned uint_256 with type LongInt. **/
    lldiv_li = 2417     ,/** divide int_256 with type LongInt. **/
    lludiv_li = 2418    ,/** divide unsigned uint_256 with type LongInt. **/
    llcmpl_li = 2419    ,/** compare int_256 less than type LongInt. **/
    llucmpl_li = 2420   ,/** compare unsigned uint_256 less than type LongInt. **/
    llcmpg_li = 2421    ,/** compare int_256 greater than type LongInt. **/
    llucmpg_li = 2422   ,/** compare unsigned uint_256 greater than type LongInt. **/
    llcmpe_li = 2423    ,/** compare int_256 equal with type LongInt. **/
    llucmpe_li = 2424   ,/** compare unsigned uint_256 equal with type LongInt. **/
    llcmple_li = 2425   ,/** compare int_256 less than or equal to type LongInt. **/
    llucmple_li = 2426  ,/** compare unsigned uint_256 less than or equal to type LongInt. **/
    llcmpge_li = 2427   ,/** compare int_256 greater than or equal to type LongInt. **/
    llucmpge_li = 2428  ,/** compare unsigned uint_256 greater than or equal to type LongInt. **/
    llcmpne_li = 2429   ,/** compare int_256 not equal with type LongInt. **/
    llucmpne_li = 2430  ,/** compare unsigned uint_256 not equal with type LongInt. **/
    llcast_ll = 2431    ,/** cast int_256 to type LongLong. **/
    llucast_ll = 2432   ,/** cast unsigned uint_256 to type LongLong. **/
    lladd_ll = 2433     ,/** add int_256 with type LongLong. **/
    lluadd_ll = 2434    ,/** add unsigned uint_256 with type LongLong. **/
    llsub_ll = 2435     ,/** subtract int_256 with type LongLong. **/
    llusub_ll = 2436    ,/** subtract unsigned uint_256 with type LongLong. **/
    llmul_ll = 2437     ,/** multiply int_256 with type LongLong. **/
    llumul_ll = 2438    ,/** multiply unsigned uint_256 with type LongLong. **/
    lldiv_ll = 2439     ,/** divide int_256 with type LongLong. **/
    lludiv_ll = 2440    ,/** divide unsigned uint_256 with type LongLong. **/
    llcmpl_ll = 2441    ,/** compare int_256 less than type LongLong. **/
    llucmpl_ll = 2442   ,/** compare unsigned uint_256 less than type LongLong. **/
    llcmpg_ll = 2443    ,/** compare int_256 greater than type LongLong. **/
    llucmpg_ll = 2444   ,/** compare unsigned uint_256 greater than type LongLong. **/
    llcmpe_ll = 2445    ,/** compare int_256 equal with type LongLong. **/
    llucmpe_ll = 2446   ,/** compare unsigned uint_256 equal with type LongLong. **/
    llcmple_ll = 2447   ,/** compare int_256 less than or equal to type LongLong. **/
    llucmple_ll = 2448  ,/** compare unsigned uint_256 less than or equal to type LongLong. **/
    llcmpge_ll = 2449   ,/** compare int_256 greater than or equal to type LongLong. **/
    llucmpge_ll = 2450  ,/** compare unsigned uint_256 greater than or equal to type LongLong. **/
    llcmpne_ll = 2451   ,/** compare int_256 not equal with type LongLong. **/
    llucmpne_ll = 2452  ,/** compare unsigned uint_256 not equal with type LongLong. **/
    llcast_f = 2453     ,/** cast int_256 to type Float. **/
    llucast_f = 2454    ,/** cast unsigned uint_256 to type Float. **/
    lladd_f = 2455      ,/** add int_256 with type Float. **/
    lluadd_f = 2456     ,/** add unsigned uint_256 with type Float. **/
    llsub_f = 2457      ,/** subtract int_256 with type Float. **/
    llusub_f = 2458     ,/** subtract unsigned uint_256 with type Float. **/
    llmul_f = 2459      ,/** multiply int_256 with type Float. **/
    llumul_f = 2460     ,/** multiply unsigned uint_256 with type Float. **/
    lldiv_f = 2461      ,/** divide int_256 with type Float. **/
    lludiv_f = 2462     ,/** divide unsigned uint_256 with type Float. **/
    llcmpl_f = 2463     ,/** compare int_256 less than type Float. **/
    llucmpl_f = 2464    ,/** compare unsigned uint_256 less than type Float. **/
    llcmpg_f = 2465     ,/** compare int_256 greater than type Float. **/
    llucmpg_f = 2466    ,/** compare unsigned uint_256 greater than type Float. **/
    llcmpe_f = 2467     ,/** compare int_256 equal with type Float. **/
    llucmpe_f = 2468    ,/** compare unsigned uint_256 equal with type Float. **/
    llcmple_f = 2469    ,/** compare int_256 less than or equal to type Float. **/
    llucmple_f = 2470   ,/** compare unsigned uint_256 less than or equal to type Float. **/
    llcmpge_f = 2471    ,/** compare int_256 greater than or equal to type Float. **/
    llucmpge_f = 2472   ,/** compare unsigned uint_256 greater than or equal to type Float. **/
    llcmpne_f = 2473    ,/** compare int_256 not equal with type Float. **/
    llucmpne_f = 2474   ,/** compare unsigned uint_256 not equal with type Float. **/
    llcast_d = 2475     ,/** cast int_256 to type Double. **/
    llucast_d = 2476    ,/** cast unsigned uint_256 to type Double. **/
    lladd_d = 2477      ,/** add int_256 with type Double. **/
    lluadd_d = 2478     ,/** add unsigned uint_256 with type Double. **/
    llsub_d = 2479      ,/** subtract int_256 with type Double. **/
    llusub_d = 2480     ,/** subtract unsigned uint_256 with type Double. **/
    llmul_d = 2481      ,/** multiply int_256 with type Double. **/
    llumul_d = 2482     ,/** multiply unsigned uint_256 with type Double. **/
    lldiv_d = 2483      ,/** divide int_256 with type Double. **/
    lludiv_d = 2484     ,/** divide unsigned uint_256 with type Double. **/
    llcmpl_d = 2485     ,/** compare int_256 less than type Double. **/
    llucmpl_d = 2486    ,/** compare unsigned uint_256 less than type Double. **/
    llcmpg_d = 2487     ,/** compare int_256 greater than type Double. **/
    llucmpg_d = 2488    ,/** compare unsigned uint_256 greater than type Double. **/
    llcmpe_d = 2489     ,/** compare int_256 equal with type Double. **/
    llucmpe_d = 2490    ,/** compare unsigned uint_256 equal with type Double. **/
    llcmple_d = 2491    ,/** compare int_256 less than or equal to type Double. **/
    llucmple_d = 2492   ,/** compare unsigned uint_256 less than or equal to type Double. **/
    llcmpge_d = 2493    ,/** compare int_256 greater than or equal to type Double. **/
    llucmpge_d = 2494   ,/** compare unsigned uint_256 greater than or equal to type Double. **/
    llcmpne_d = 2495    ,/** compare int_256 not equal with type Double. **/
    llucmpne_d = 2496   ,/** compare unsigned uint_256 not equal with type Double. **/
    llcast_df = 2497    ,/** cast int_256 to type DoubleFloat. **/
    llucast_df = 2498   ,/** cast unsigned uint_256 to type DoubleFloat. **/
    lladd_df = 2499     ,/** add int_256 with type DoubleFloat. **/
    lluadd_df = 2500    ,/** add unsigned uint_256 with type DoubleFloat. **/
    llsub_df = 2501     ,/** subtract int_256 with type DoubleFloat. **/
    llusub_df = 2502    ,/** subtract unsigned uint_256 with type DoubleFloat. **/
    llmul_df = 2503     ,/** multiply int_256 with type DoubleFloat. **/
    llumul_df = 2504    ,/** multiply unsigned uint_256 with type DoubleFloat. **/
    lldiv_df = 2505     ,/** divide int_256 with type DoubleFloat. **/
    lludiv_df = 2506    ,/** divide unsigned uint_256 with type DoubleFloat. **/
    llcmpl_df = 2507    ,/** compare int_256 less than type DoubleFloat. **/
    llucmpl_df = 2508   ,/** compare unsigned uint_256 less than type DoubleFloat. **/
    llcmpg_df = 2509    ,/** compare int_256 greater than type DoubleFloat. **/
    llucmpg_df = 2510   ,/** compare unsigned uint_256 greater than type DoubleFloat. **/
    llcmpe_df = 2511    ,/** compare int_256 equal with type DoubleFloat. **/
    llucmpe_df = 2512   ,/** compare unsigned uint_256 equal with type DoubleFloat. **/
    llcmple_df = 2513   ,/** compare int_256 less than or equal to type DoubleFloat. **/
    llucmple_df = 2514  ,/** compare unsigned uint_256 less than or equal to type DoubleFloat. **/
    llcmpge_df = 2515   ,/** compare int_256 greater than or equal to type DoubleFloat. **/
    llucmpge_df = 2516  ,/** compare unsigned uint_256 greater than or equal to type DoubleFloat. **/
    llcmpne_df = 2517   ,/** compare int_256 not equal with type DoubleFloat. **/
    llucmpne_df = 2518  ,/** compare unsigned uint_256 not equal with type DoubleFloat. **/
    llcast_dd = 2519    ,/** cast int_256 to type DoubleDouble. **/
    llucast_dd = 2520   ,/** cast unsigned uint_256 to type DoubleDouble. **/
    lladd_dd = 2521     ,/** add int_256 with type DoubleDouble. **/
    lluadd_dd = 2522    ,/** add unsigned uint_256 with type DoubleDouble. **/
    llsub_dd = 2523     ,/** subtract int_256 with type DoubleDouble. **/
    llusub_dd = 2524    ,/** subtract unsigned uint_256 with type DoubleDouble. **/
    llmul_dd = 2525     ,/** multiply int_256 with type DoubleDouble. **/
    llumul_dd = 2526    ,/** multiply unsigned uint_256 with type DoubleDouble. **/
    lldiv_dd = 2527     ,/** divide int_256 with type DoubleDouble. **/
    lludiv_dd = 2528    ,/** divide unsigned uint_256 with type DoubleDouble. **/
    llcmpl_dd = 2529    ,/** compare int_256 less than type DoubleDouble. **/
    llucmpl_dd = 2530   ,/** compare unsigned uint_256 less than type DoubleDouble. **/
    llcmpg_dd = 2531    ,/** compare int_256 greater than type DoubleDouble. **/
    llucmpg_dd = 2532   ,/** compare unsigned uint_256 greater than type DoubleDouble. **/
    llcmpe_dd = 2533    ,/** compare int_256 equal with type DoubleDouble. **/
    llucmpe_dd = 2534   ,/** compare unsigned uint_256 equal with type DoubleDouble. **/
    llcmple_dd = 2535   ,/** compare int_256 less than or equal to type DoubleDouble. **/
    llucmple_dd = 2536  ,/** compare unsigned uint_256 less than or equal to type DoubleDouble. **/
    llcmpge_dd = 2537   ,/** compare int_256 greater than or equal to type DoubleDouble. **/
    llucmpge_dd = 2538  ,/** compare unsigned uint_256 greater than or equal to type DoubleDouble. **/
    llcmpne_dd = 2539   ,/** compare int_256 not equal with type DoubleDouble. **/
    llucmpne_dd = 2540  ,/** compare unsigned uint_256 not equal with type DoubleDouble. **/
    llmod_b = 2541      ,/** modulo int_256 with type Byte. **/
    llcast_ub = 2542    ,/** cast int_256 to unsigned type Byte. **/
    llucast_ub = 2543   ,/** cast unsigned uint_256 to unsigned type Byte. **/
    lladd_ub = 2544     ,/** add int_256 with unsigned type Byte. **/
    lluadd_ub = 2545    ,/** add unsigned uint_256 with unsigned type Byte. **/
    llsub_ub = 2546     ,/** subtract int_256 with unsigned type Byte. **/
    llusub_ub = 2547    ,/** subtract unsigned uint_256 with unsigned type Byte. **/
    llmul_ub = 2548     ,/** multiply int_256 with unsigned type Byte. **/
    llumul_ub = 2549    ,/** multiply unsigned uint_256 with unsigned type Byte. **/
    lldiv_ub = 2550     ,/** divide int_256 with unsigned type Byte. **/
    lludiv_ub = 2551    ,/** divide unsigned uint_256 with unsigned type Byte. **/
    llcmpl_ub = 2552    ,/** compare int_256 less than unsigned type Byte. **/
    llucmpl_ub = 2553   ,/** compare unsigned uint_256 less than unsigned type Byte. **/
    llcmpg_ub = 2554    ,/** compare int_256 greater than unsigned type Byte. **/
    llucmpg_ub = 2555   ,/** compare unsigned uint_256 greater than unsigned type Byte. **/
    llcmpe_ub = 2556    ,/** compare int_256 equal with unsigned type Byte. **/
    llucmpe_ub = 2557   ,/** compare unsigned uint_256 equal with unsigned type Byte. **/
    llcmple_ub = 2558   ,/** compare int_256 less than or equal to unsigned type Byte. **/
    llucmple_ub = 2559  ,/** compare unsigned uint_256 less than or equal to unsigned type Byte. **/
    llcmpge_ub = 2560   ,/** compare int_256 greater than or equal to unsigned type Byte. **/
    llucmpge_ub = 2561  ,/** compare unsigned uint_256 greater than or equal to unsigned type Byte. **/
    llcmpne_ub = 2562   ,/** compare int_256 not equal with unsigned type Byte. **/
    llucmpne_ub = 2563  ,/** compare unsigned uint_256 not equal with unsigned type Byte. **/
    llswapb = 2564      ,/** swap the 2 topmost int_256 elements where the top element is a Byte. **/
    llmod_s = 2565      ,/** modulo int_256 with type Short. **/
    llcast_us = 2566    ,/** cast int_256 to unsigned type Short. **/
    llucast_us = 2567   ,/** cast unsigned uint_256 to unsigned type Short. **/
    lladd_us = 2568     ,/** add int_256 with unsigned type Short. **/
    lluadd_us = 2569    ,/** add unsigned uint_256 with unsigned type Short. **/
    llsub_us = 2570     ,/** subtract int_256 with unsigned type Short. **/
    llusub_us = 2571    ,/** subtract unsigned uint_256 with unsigned type Short. **/
    llmul_us = 2572     ,/** multiply int_256 with unsigned type Short. **/
    llumul_us = 2573    ,/** multiply unsigned uint_256 with unsigned type Short. **/
    lldiv_us = 2574     ,/** divide int_256 with unsigned type Short. **/
    lludiv_us = 2575    ,/** divide unsigned uint_256 with unsigned type Short. **/
    llcmpl_us = 2576    ,/** compare int_256 less than unsigned type Short. **/
    llucmpl_us = 2577   ,/** compare unsigned uint_256 less than unsigned type Short. **/
    llcmpg_us = 2578    ,/** compare int_256 greater than unsigned type Short. **/
    llucmpg_us = 2579   ,/** compare unsigned uint_256 greater than unsigned type Short. **/
    llcmpe_us = 2580    ,/** compare int_256 equal with unsigned type Short. **/
    llucmpe_us = 2581   ,/** compare unsigned uint_256 equal with unsigned type Short. **/
    llcmple_us = 2582   ,/** compare int_256 less than or equal to unsigned type Short. **/
    llucmple_us = 2583  ,/** compare unsigned uint_256 less than or equal to unsigned type Short. **/
    llcmpge_us = 2584   ,/** compare int_256 greater than or equal to unsigned type Short. **/
    llucmpge_us = 2585  ,/** compare unsigned uint_256 greater than or equal to unsigned type Short. **/
    llcmpne_us = 2586   ,/** compare int_256 not equal with unsigned type Short. **/
    llucmpne_us = 2587  ,/** compare unsigned uint_256 not equal with unsigned type Short. **/
    llswaps = 2588      ,/** swap the 2 topmost int_256 elements where the top element is a Short. **/
    llmod_i = 2589      ,/** modulo int_256 with type Int. **/
    llcast_ui = 2590    ,/** cast int_256 to unsigned type Int. **/
    llucast_ui = 2591   ,/** cast unsigned uint_256 to unsigned type Int. **/
    lladd_ui = 2592     ,/** add int_256 with unsigned type Int. **/
    lluadd_ui = 2593    ,/** add unsigned uint_256 with unsigned type Int. **/
    llsub_ui = 2594     ,/** subtract int_256 with unsigned type Int. **/
    llusub_ui = 2595    ,/** subtract unsigned uint_256 with unsigned type Int. **/
    llmul_ui = 2596     ,/** multiply int_256 with unsigned type Int. **/
    llumul_ui = 2597    ,/** multiply unsigned uint_256 with unsigned type Int. **/
    lldiv_ui = 2598     ,/** divide int_256 with unsigned type Int. **/
    lludiv_ui = 2599    ,/** divide unsigned uint_256 with unsigned type Int. **/
    llcmpl_ui = 2600    ,/** compare int_256 less than unsigned type Int. **/
    llucmpl_ui = 2601   ,/** compare unsigned uint_256 less than unsigned type Int. **/
    llcmpg_ui = 2602    ,/** compare int_256 greater than unsigned type Int. **/
    llucmpg_ui = 2603   ,/** compare unsigned uint_256 greater than unsigned type Int. **/
    llcmpe_ui = 2604    ,/** compare int_256 equal with unsigned type Int. **/
    llucmpe_ui = 2605   ,/** compare unsigned uint_256 equal with unsigned type Int. **/
    llcmple_ui = 2606   ,/** compare int_256 less than or equal to unsigned type Int. **/
    llucmple_ui = 2607  ,/** compare unsigned uint_256 less than or equal to unsigned type Int. **/
    llcmpge_ui = 2608   ,/** compare int_256 greater than or equal to unsigned type Int. **/
    llucmpge_ui = 2609  ,/** compare unsigned uint_256 greater than or equal to unsigned type Int. **/
    llcmpne_ui = 2610   ,/** compare int_256 not equal with unsigned type Int. **/
    llucmpne_ui = 2611  ,/** compare unsigned uint_256 not equal with unsigned type Int. **/
    llswapi = 2612      ,/** swap the 2 topmost int_256 elements where the top element is a Int. **/
    llmod_l = 2613      ,/** modulo int_256 with type Long. **/
    llcast_ul = 2614    ,/** cast int_256 to unsigned type Long. **/
    llucast_ul = 2615   ,/** cast unsigned uint_256 to unsigned type Long. **/
    lladd_ul = 2616     ,/** add int_256 with unsigned type Long. **/
    lluadd_ul = 2617    ,/** add unsigned uint_256 with unsigned type Long. **/
    llsub_ul = 2618     ,/** subtract int_256 with unsigned type Long. **/
    llusub_ul = 2619    ,/** subtract unsigned uint_256 with unsigned type Long. **/
    llmul_ul = 2620     ,/** multiply int_256 with unsigned type Long. **/
    llumul_ul = 2621    ,/** multiply unsigned uint_256 with unsigned type Long. **/
    lldiv_ul = 2622     ,/** divide int_256 with unsigned type Long. **/
    lludiv_ul = 2623    ,/** divide unsigned uint_256 with unsigned type Long. **/
    llcmpl_ul = 2624    ,/** compare int_256 less than unsigned type Long. **/
    llucmpl_ul = 2625   ,/** compare unsigned uint_256 less than unsigned type Long. **/
    llcmpg_ul = 2626    ,/** compare int_256 greater than unsigned type Long. **/
    llucmpg_ul = 2627   ,/** compare unsigned uint_256 greater than unsigned type Long. **/
    llcmpe_ul = 2628    ,/** compare int_256 equal with unsigned type Long. **/
    llucmpe_ul = 2629   ,/** compare unsigned uint_256 equal with unsigned type Long. **/
    llcmple_ul = 2630   ,/** compare int_256 less than or equal to unsigned type Long. **/
    llucmple_ul = 2631  ,/** compare unsigned uint_256 less than or equal to unsigned type Long. **/
    llcmpge_ul = 2632   ,/** compare int_256 greater than or equal to unsigned type Long. **/
    llucmpge_ul = 2633  ,/** compare unsigned uint_256 greater than or equal to unsigned type Long. **/
    llcmpne_ul = 2634   ,/** compare int_256 not equal with unsigned type Long. **/
    llucmpne_ul = 2635  ,/** compare unsigned uint_256 not equal with unsigned type Long. **/
    llswapl = 2636      ,/** swap the 2 topmost int_256 elements where the top element is a Long. **/
    llmod_li = 2637     ,/** modulo int_256 with type LongInt. **/
    llcast_uli = 2638   ,/** cast int_256 to unsigned type LongInt. **/
    llucast_uli = 2639  ,/** cast unsigned uint_256 to unsigned type LongInt. **/
    lladd_uli = 2640    ,/** add int_256 with unsigned type LongInt. **/
    lluadd_uli = 2641   ,/** add unsigned uint_256 with unsigned type LongInt. **/
    llsub_uli = 2642    ,/** subtract int_256 with unsigned type LongInt. **/
    llusub_uli = 2643   ,/** subtract unsigned uint_256 with unsigned type LongInt. **/
    llmul_uli = 2644    ,/** multiply int_256 with unsigned type LongInt. **/
    llumul_uli = 2645   ,/** multiply unsigned uint_256 with unsigned type LongInt. **/
    lldiv_uli = 2646    ,/** divide int_256 with unsigned type LongInt. **/
    lludiv_uli = 2647   ,/** divide unsigned uint_256 with unsigned type LongInt. **/
    llcmpl_uli = 2648   ,/** compare int_256 less than unsigned type LongInt. **/
    llucmpl_uli = 2649  ,/** compare unsigned uint_256 less than unsigned type LongInt. **/
    llcmpg_uli = 2650   ,/** compare int_256 greater than unsigned type LongInt. **/
    llucmpg_uli = 2651  ,/** compare unsigned uint_256 greater than unsigned type LongInt. **/
    llcmpe_uli = 2652   ,/** compare int_256 equal with unsigned type LongInt. **/
    llucmpe_uli = 2653  ,/** compare unsigned uint_256 equal with unsigned type LongInt. **/
    llcmple_uli = 2654  ,/** compare int_256 less than or equal to unsigned type LongInt. **/
    llucmple_uli = 2655 ,/** compare unsigned uint_256 less than or equal to unsigned type LongInt. **/
    llcmpge_uli = 2656  ,/** compare int_256 greater than or equal to unsigned type LongInt. **/
    llucmpge_uli = 2657 ,/** compare unsigned uint_256 greater than or equal to unsigned type LongInt. **/
    llcmpne_uli = 2658  ,/** compare int_256 not equal with unsigned type LongInt. **/
    llucmpne_uli = 2659 ,/** compare unsigned uint_256 not equal with unsigned type LongInt. **/
    llswapli = 2660     ,/** swap the 2 topmost int_256 elements where the top element is a LongInt. **/
    llmod_ll = 2661     ,/** modulo int_256 with type LongLong. **/
    llcast_ull = 2662   ,/** cast int_256 to unsigned type LongLong. **/
    llucast_ull = 2663  ,/** cast unsigned uint_256 to unsigned type LongLong. **/
    lladd_ull = 2664    ,/** add int_256 with unsigned type LongLong. **/
    lluadd_ull = 2665   ,/** add unsigned uint_256 with unsigned type LongLong. **/
    llsub_ull = 2666    ,/** subtract int_256 with unsigned type LongLong. **/
    llusub_ull = 2667   ,/** subtract unsigned uint_256 with unsigned type LongLong. **/
    llmul_ull = 2668    ,/** multiply int_256 with unsigned type LongLong. **/
    llumul_ull = 2669   ,/** multiply unsigned uint_256 with unsigned type LongLong. **/
    lldiv_ull = 2670    ,/** divide int_256 with unsigned type LongLong. **/
    lludiv_ull = 2671   ,/** divide unsigned uint_256 with unsigned type LongLong. **/
    llcmpl_ull = 2672   ,/** compare int_256 less than unsigned type LongLong. **/
    llucmpl_ull = 2673  ,/** compare unsigned uint_256 less than unsigned type LongLong. **/
    llcmpg_ull = 2674   ,/** compare int_256 greater than unsigned type LongLong. **/
    llucmpg_ull = 2675  ,/** compare unsigned uint_256 greater than unsigned type LongLong. **/
    llcmpe_ull = 2676   ,/** compare int_256 equal with unsigned type LongLong. **/
    llucmpe_ull = 2677  ,/** compare unsigned uint_256 equal with unsigned type LongLong. **/
    llcmple_ull = 2678  ,/** compare int_256 less than or equal to unsigned type LongLong. **/
    llucmple_ull = 2679 ,/** compare unsigned uint_256 less than or equal to unsigned type LongLong. **/
    llcmpge_ull = 2680  ,/** compare int_256 greater than or equal to unsigned type LongLong. **/
    llucmpge_ull = 2681 ,/** compare unsigned uint_256 greater than or equal to unsigned type LongLong. **/
    llcmpne_ull = 2682  ,/** compare int_256 not equal with unsigned type LongLong. **/
    llucmpne_ull = 2683 ,/** compare unsigned uint_256 not equal with unsigned type LongLong. **/
    llswapll = 2684     ,/** swap the 2 topmost int_256 elements where the top element is a LongLong. **/
    llswapf = 2685      ,/** swap the 2 topmost int_256 elements where the top element is a Float. **/
    llswapd = 2686      ,/** swap the 2 topmost int_256 elements where the top element is a Double. **/
    llswapdf = 2687     ,/** swap the 2 topmost int_256 elements where the top element is a DoubleFloat. **/
    llswapdd = 2688     ,/** swap the 2 topmost int_256 elements where the top element is a DoubleDouble. **/
    llswapa = 2689      ,/** swap the 2 topmost int_256 elements where the top element is a Pointer. **/
    lland_b = 2690      ,/** bitwise and int_256 with type Byte. **/
    llor_b = 2691       ,/** bitwise or int_256 with type Byte. **/
    llxor_b = 2692      ,/** bitwise xor int_256 with type Byte. **/
    llshftr_b = 2693    ,/** shift right int_256 with type Byte. **/
    llshftl_b = 2694    ,/** shift left xor int_256 with type Byte. **/
    lland_s = 2695      ,/** bitwise and int_256 with type Short. **/
    llor_s = 2696       ,/** bitwise or int_256 with type Short. **/
    llxor_s = 2697      ,/** bitwise xor int_256 with type Short. **/
    llshftr_s = 2698    ,/** shift right int_256 with type Short. **/
    llshftl_s = 2699    ,/** shift left xor int_256 with type Short. **/
    lland_i = 2700      ,/** bitwise and int_256 with type Int. **/
    llor_i = 2701       ,/** bitwise or int_256 with type Int. **/
    llxor_i = 2702      ,/** bitwise xor int_256 with type Int. **/
    llshftr_i = 2703    ,/** shift right int_256 with type Int. **/
    llshftl_i = 2704    ,/** shift left xor int_256 with type Int. **/
    lland_l = 2705      ,/** bitwise and int_256 with type Long. **/
    llor_l = 2706       ,/** bitwise or int_256 with type Long. **/
    llxor_l = 2707      ,/** bitwise xor int_256 with type Long. **/
    llshftr_l = 2708    ,/** shift right int_256 with type Long. **/
    llshftl_l = 2709    ,/** shift left xor int_256 with type Long. **/
    lland_li = 2710     ,/** bitwise and int_256 with type LongInt. **/
    llor_li = 2711      ,/** bitwise or int_256 with type LongInt. **/
    llxor_li = 2712     ,/** bitwise xor int_256 with type LongInt. **/
    llshftr_li = 2713   ,/** shift right int_256 with type LongInt. **/
    llshftl_li = 2714   ,/** shift left xor int_256 with type LongInt. **/
    lland_ll = 2715     ,/** bitwise and int_256 with type LongLong. **/
    llor_ll = 2716      ,/** bitwise or int_256 with type LongLong. **/
    llxor_ll = 2717     ,/** bitwise xor int_256 with type LongLong. **/
    llshftr_ll = 2718   ,/** shift right int_256 with type LongLong. **/
    llshftl_ll = 2719   ,/** shift left xor int_256 with type LongLong. **/
    lldup = 2720        ,/** duplicate a int_256 on the stack. **/
    lldup2 = 2721       ,/** duplicate a int_256 2 times on the stack. **/
    lldup3 = 2722       ,/** duplicate a int_256 3 times on the stack. **/
    lldup4 = 2723       ,/** duplicate a int_256 4 times on the stack. **/
    lldup5 = 2724       ,/** duplicate a int_256 5 times on the stack. **/
    llswap = 2725       ,/** swap the 2 topmost int_256 elements. **/
    llrot = 2726        ,/** rotate the 3 topmost int_256 elements. **/
    llset = 2727        ,/** set a int_256 from stack into a field on base pointer. **/
    llget = 2728        ,/** get a int_256 from a field on base pointer to stack. **/
    llvset = 2729       ,/** set a int_256 from value into a field on base pointer. **/
    llsget = 2730       ,/** get a int_256 from a field on base pointer to stack using address from stack. **/
    llsset = 2731       ,/** set a int_256 from stack into a field on base pointer using address from stack. **/
    llsetl = 2732       ,/** set a int_256 from local variable into a field on base pointer. **/
    llinc_1 = 2733      ,/** increment int_256 by 1 on stack. **/
    llinc_2 = 2734      ,/** increment int_256 by 2 on stack. **/
    llstinc_1 = 2735    ,/** increment int_256 by 1 on stack. **/
    llstinc_2 = 2736    ,/** increment int_256 by 2 on stack. **/
    llreturn = 2737     ,/** return a int_256 into the main stack. **/
    llmainst = 2738     ,/** store a int_256 from main stack in a local variable.. **/
    llmainst_0 = 2739   ,/** store a int_256 from main stack in local variable 0. **/
    llmainst_1 = 2740   ,/** store a int_256 from main stack in local variable 1. **/
    llmainst_2 = 2741   ,/** store a int_256 from main stack in local variable 2. **/
    llmainst_3 = 2742   ,/** store a int_256 from main stack in local variable 3. **/
    llprint = 2743      ,/** print a int_256 from stack. **/
    lluprint = 2744     ,/** print a unsigned uint_256 from stack. **/
    fconst = 2745       ,/** push a const flt_32 into the stack. **/
    fconst_0 = 2746     ,/** push a const flt_32 into the stack (value = 0). **/
    fload = 2747        ,/** load a flt_32 into the stack from local variable. **/
    fload_0 = 2748      ,/** load a flt_32 into the stack from local variable 0. **/
    fload_1 = 2749      ,/** load a flt_32 into the stack from local variable 1. **/
    fload_2 = 2750      ,/** load a flt_32 into the stack from local variable 2. **/
    fload_3 = 2751      ,/** load a flt_32 into the stack from local variable 3. **/
    fload_4 = 2752      ,/** load a flt_32 into the stack from local variable 4. **/
    fstore = 2753       ,/** store a flt_32 from stack into local variable. **/
    fstore_0 = 2754     ,/** store a flt_32 from stack into local variable 0. **/
    fstore_1 = 2755     ,/** store a flt_32 from stack into local variable 1. **/
    fstore_2 = 2756     ,/** store a flt_32 from stack into local variable 2. **/
    fstore_3 = 2757     ,/** store a flt_32 from stack into local variable 3. **/
    fstore_4 = 2758     ,/** store a flt_32 from stack into local variable 4. **/
    fswapb = 2759       ,/** swap the 2 topmost flt_32 elements where the top element is a Byte. **/
    fswaps = 2760       ,/** swap the 2 topmost flt_32 elements where the top element is a Short. **/
    fswapi = 2761       ,/** swap the 2 topmost flt_32 elements where the top element is a Int. **/
    fswapl = 2762       ,/** swap the 2 topmost flt_32 elements where the top element is a Long. **/
    fswapli = 2763      ,/** swap the 2 topmost flt_32 elements where the top element is a LongInt. **/
    fswapll = 2764      ,/** swap the 2 topmost flt_32 elements where the top element is a LongLong. **/
    fswapf = 2765       ,/** swap the 2 topmost flt_32 elements where the top element is a Float. **/
    fswapd = 2766       ,/** swap the 2 topmost flt_32 elements where the top element is a Double. **/
    fswapdf = 2767      ,/** swap the 2 topmost flt_32 elements where the top element is a DoubleFloat. **/
    fswapdd = 2768      ,/** swap the 2 topmost flt_32 elements where the top element is a DoubleDouble. **/
    fswapa = 2769       ,/** swap the 2 topmost flt_32 elements where the top element is a Pointer. **/
    fdup = 2770         ,/** duplicate a flt_32 on the stack. **/
    fdup2 = 2771        ,/** duplicate a flt_32 2 times on the stack. **/
    fdup3 = 2772        ,/** duplicate a flt_32 3 times on the stack. **/
    fdup4 = 2773        ,/** duplicate a flt_32 4 times on the stack. **/
    fdup5 = 2774        ,/** duplicate a flt_32 5 times on the stack. **/
    fswap = 2775        ,/** swap the 2 topmost flt_32 elements. **/
    frot = 2776         ,/** rotate the 3 topmost flt_32 elements. **/
    fset = 2777         ,/** set a flt_32 from stack into a field on base pointer. **/
    fget = 2778         ,/** get a flt_32 from a field on base pointer to stack. **/
    fvset = 2779        ,/** set a flt_32 from value into a field on base pointer. **/
    fsget = 2780        ,/** get a flt_32 from a field on base pointer to stack using address from stack. **/
    fsset = 2781        ,/** set a flt_32 from stack into a field on base pointer using address from stack. **/
    fsetl = 2782        ,/** set a flt_32 from local variable into a field on base pointer. **/
    finc_1 = 2783       ,/** increment flt_32 by 1 on stack. **/
    finc_2 = 2784       ,/** increment flt_32 by 2 on stack. **/
    fstinc_1 = 2785     ,/** increment flt_32 by 1 on stack. **/
    fstinc_2 = 2786     ,/** increment flt_32 by 2 on stack. **/
    freturn = 2787      ,/** return a flt_32 into the main stack. **/
    fmainst = 2788      ,/** store a flt_32 from main stack in a local variable.. **/
    fmainst_0 = 2789    ,/** store a flt_32 from main stack in local variable 0. **/
    fmainst_1 = 2790    ,/** store a flt_32 from main stack in local variable 1. **/
    fmainst_2 = 2791    ,/** store a flt_32 from main stack in local variable 2. **/
    fmainst_3 = 2792    ,/** store a flt_32 from main stack in local variable 3. **/
    dconst = 2793       ,/** push a const flt_64 into the stack. **/
    dconst_0 = 2794     ,/** push a const flt_64 into the stack (value = 0). **/
    dload = 2795        ,/** load a flt_64 into the stack from local variable. **/
    dload_0 = 2796      ,/** load a flt_64 into the stack from local variable 0. **/
    dload_1 = 2797      ,/** load a flt_64 into the stack from local variable 1. **/
    dload_2 = 2798      ,/** load a flt_64 into the stack from local variable 2. **/
    dload_3 = 2799      ,/** load a flt_64 into the stack from local variable 3. **/
    dload_4 = 2800      ,/** load a flt_64 into the stack from local variable 4. **/
    dstore = 2801       ,/** store a flt_64 from stack into local variable. **/
    dstore_0 = 2802     ,/** store a flt_64 from stack into local variable 0. **/
    dstore_1 = 2803     ,/** store a flt_64 from stack into local variable 1. **/
    dstore_2 = 2804     ,/** store a flt_64 from stack into local variable 2. **/
    dstore_3 = 2805     ,/** store a flt_64 from stack into local variable 3. **/
    dstore_4 = 2806     ,/** store a flt_64 from stack into local variable 4. **/
    dswapb = 2807       ,/** swap the 2 topmost flt_64 elements where the top element is a Byte. **/
    dswaps = 2808       ,/** swap the 2 topmost flt_64 elements where the top element is a Short. **/
    dswapi = 2809       ,/** swap the 2 topmost flt_64 elements where the top element is a Int. **/
    dswapl = 2810       ,/** swap the 2 topmost flt_64 elements where the top element is a Long. **/
    dswapli = 2811      ,/** swap the 2 topmost flt_64 elements where the top element is a LongInt. **/
    dswapll = 2812      ,/** swap the 2 topmost flt_64 elements where the top element is a LongLong. **/
    dswapf = 2813       ,/** swap the 2 topmost flt_64 elements where the top element is a Float. **/
    dswapd = 2814       ,/** swap the 2 topmost flt_64 elements where the top element is a Double. **/
    dswapdf = 2815      ,/** swap the 2 topmost flt_64 elements where the top element is a DoubleFloat. **/
    dswapdd = 2816      ,/** swap the 2 topmost flt_64 elements where the top element is a DoubleDouble. **/
    dswapa = 2817       ,/** swap the 2 topmost flt_64 elements where the top element is a Pointer. **/
    ddup = 2818         ,/** duplicate a flt_64 on the stack. **/
    ddup2 = 2819        ,/** duplicate a flt_64 2 times on the stack. **/
    ddup3 = 2820        ,/** duplicate a flt_64 3 times on the stack. **/
    ddup4 = 2821        ,/** duplicate a flt_64 4 times on the stack. **/
    ddup5 = 2822        ,/** duplicate a flt_64 5 times on the stack. **/
    dswap = 2823        ,/** swap the 2 topmost flt_64 elements. **/
    drot = 2824         ,/** rotate the 3 topmost flt_64 elements. **/
    dset = 2825         ,/** set a flt_64 from stack into a field on base pointer. **/
    dget = 2826         ,/** get a flt_64 from a field on base pointer to stack. **/
    dvset = 2827        ,/** set a flt_64 from value into a field on base pointer. **/
    dsget = 2828        ,/** get a flt_64 from a field on base pointer to stack using address from stack. **/
    dsset = 2829        ,/** set a flt_64 from stack into a field on base pointer using address from stack. **/
    dsetl = 2830        ,/** set a flt_64 from local variable into a field on base pointer. **/
    dinc_1 = 2831       ,/** increment flt_64 by 1 on stack. **/
    dinc_2 = 2832       ,/** increment flt_64 by 2 on stack. **/
    dstinc_1 = 2833     ,/** increment flt_64 by 1 on stack. **/
    dstinc_2 = 2834     ,/** increment flt_64 by 2 on stack. **/
    dreturn = 2835      ,/** return a flt_64 into the main stack. **/
    dmainst = 2836      ,/** store a flt_64 from main stack in a local variable.. **/
    dmainst_0 = 2837    ,/** store a flt_64 from main stack in local variable 0. **/
    dmainst_1 = 2838    ,/** store a flt_64 from main stack in local variable 1. **/
    dmainst_2 = 2839    ,/** store a flt_64 from main stack in local variable 2. **/
    dmainst_3 = 2840    ,/** store a flt_64 from main stack in local variable 3. **/
    dfconst = 2841      ,/** push a const flt_128 into the stack. **/
    dfconst_0 = 2842    ,/** push a const flt_128 into the stack (value = 0). **/
    dfload = 2843       ,/** load a flt_128 into the stack from local variable. **/
    dfload_0 = 2844     ,/** load a flt_128 into the stack from local variable 0. **/
    dfload_1 = 2845     ,/** load a flt_128 into the stack from local variable 1. **/
    dfload_2 = 2846     ,/** load a flt_128 into the stack from local variable 2. **/
    dfload_3 = 2847     ,/** load a flt_128 into the stack from local variable 3. **/
    dfload_4 = 2848     ,/** load a flt_128 into the stack from local variable 4. **/
    dfstore = 2849      ,/** store a flt_128 from stack into local variable. **/
    dfstore_0 = 2850    ,/** store a flt_128 from stack into local variable 0. **/
    dfstore_1 = 2851    ,/** store a flt_128 from stack into local variable 1. **/
    dfstore_2 = 2852    ,/** store a flt_128 from stack into local variable 2. **/
    dfstore_3 = 2853    ,/** store a flt_128 from stack into local variable 3. **/
    dfstore_4 = 2854    ,/** store a flt_128 from stack into local variable 4. **/
    dfswapb = 2855      ,/** swap the 2 topmost flt_128 elements where the top element is a Byte. **/
    dfswaps = 2856      ,/** swap the 2 topmost flt_128 elements where the top element is a Short. **/
    dfswapi = 2857      ,/** swap the 2 topmost flt_128 elements where the top element is a Int. **/
    dfswapl = 2858      ,/** swap the 2 topmost flt_128 elements where the top element is a Long. **/
    dfswapli = 2859     ,/** swap the 2 topmost flt_128 elements where the top element is a LongInt. **/
    dfswapll = 2860     ,/** swap the 2 topmost flt_128 elements where the top element is a LongLong. **/
    dfswapf = 2861      ,/** swap the 2 topmost flt_128 elements where the top element is a Float. **/
    dfswapd = 2862      ,/** swap the 2 topmost flt_128 elements where the top element is a Double. **/
    dfswapdf = 2863     ,/** swap the 2 topmost flt_128 elements where the top element is a DoubleFloat. **/
    dfswapdd = 2864     ,/** swap the 2 topmost flt_128 elements where the top element is a DoubleDouble. **/
    dfswapa = 2865      ,/** swap the 2 topmost flt_128 elements where the top element is a Pointer. **/
    dfdup = 2866        ,/** duplicate a flt_128 on the stack. **/
    dfdup2 = 2867       ,/** duplicate a flt_128 2 times on the stack. **/
    dfdup3 = 2868       ,/** duplicate a flt_128 3 times on the stack. **/
    dfdup4 = 2869       ,/** duplicate a flt_128 4 times on the stack. **/
    dfdup5 = 2870       ,/** duplicate a flt_128 5 times on the stack. **/
    dfswap = 2871       ,/** swap the 2 topmost flt_128 elements. **/
    dfrot = 2872        ,/** rotate the 3 topmost flt_128 elements. **/
    dfset = 2873        ,/** set a flt_128 from stack into a field on base pointer. **/
    dfget = 2874        ,/** get a flt_128 from a field on base pointer to stack. **/
    dfvset = 2875       ,/** set a flt_128 from value into a field on base pointer. **/
    dfsget = 2876       ,/** get a flt_128 from a field on base pointer to stack using address from stack. **/
    dfsset = 2877       ,/** set a flt_128 from stack into a field on base pointer using address from stack. **/
    dfsetl = 2878       ,/** set a flt_128 from local variable into a field on base pointer. **/
    dfinc_1 = 2879      ,/** increment flt_128 by 1 on stack. **/
    dfinc_2 = 2880      ,/** increment flt_128 by 2 on stack. **/
    dfstinc_1 = 2881    ,/** increment flt_128 by 1 on stack. **/
    dfstinc_2 = 2882    ,/** increment flt_128 by 2 on stack. **/
    dfreturn = 2883     ,/** return a flt_128 into the main stack. **/
    dfmainst = 2884     ,/** store a flt_128 from main stack in a local variable.. **/
    dfmainst_0 = 2885   ,/** store a flt_128 from main stack in local variable 0. **/
    dfmainst_1 = 2886   ,/** store a flt_128 from main stack in local variable 1. **/
    dfmainst_2 = 2887   ,/** store a flt_128 from main stack in local variable 2. **/
    dfmainst_3 = 2888   ,/** store a flt_128 from main stack in local variable 3. **/
    ddconst = 2889      ,/** push a const flt_256 into the stack. **/
    ddconst_0 = 2890    ,/** push a const flt_256 into the stack (value = 0). **/
    ddload = 2891       ,/** load a flt_256 into the stack from local variable. **/
    ddload_0 = 2892     ,/** load a flt_256 into the stack from local variable 0. **/
    ddload_1 = 2893     ,/** load a flt_256 into the stack from local variable 1. **/
    ddload_2 = 2894     ,/** load a flt_256 into the stack from local variable 2. **/
    ddload_3 = 2895     ,/** load a flt_256 into the stack from local variable 3. **/
    ddload_4 = 2896     ,/** load a flt_256 into the stack from local variable 4. **/
    ddstore = 2897      ,/** store a flt_256 from stack into local variable. **/
    ddstore_0 = 2898    ,/** store a flt_256 from stack into local variable 0. **/
    ddstore_1 = 2899    ,/** store a flt_256 from stack into local variable 1. **/
    ddstore_2 = 2900    ,/** store a flt_256 from stack into local variable 2. **/
    ddstore_3 = 2901    ,/** store a flt_256 from stack into local variable 3. **/
    ddstore_4 = 2902    ,/** store a flt_256 from stack into local variable 4. **/
    ddswapb = 2903      ,/** swap the 2 topmost flt_256 elements where the top element is a Byte. **/
    ddswaps = 2904      ,/** swap the 2 topmost flt_256 elements where the top element is a Short. **/
    ddswapi = 2905      ,/** swap the 2 topmost flt_256 elements where the top element is a Int. **/
    ddswapl = 2906      ,/** swap the 2 topmost flt_256 elements where the top element is a Long. **/
    ddswapli = 2907     ,/** swap the 2 topmost flt_256 elements where the top element is a LongInt. **/
    ddswapll = 2908     ,/** swap the 2 topmost flt_256 elements where the top element is a LongLong. **/
    ddswapf = 2909      ,/** swap the 2 topmost flt_256 elements where the top element is a Float. **/
    ddswapd = 2910      ,/** swap the 2 topmost flt_256 elements where the top element is a Double. **/
    ddswapdf = 2911     ,/** swap the 2 topmost flt_256 elements where the top element is a DoubleFloat. **/
    ddswapdd = 2912     ,/** swap the 2 topmost flt_256 elements where the top element is a DoubleDouble. **/
    ddswapa = 2913      ,/** swap the 2 topmost flt_256 elements where the top element is a Pointer. **/
    dddup = 2914        ,/** duplicate a flt_256 on the stack. **/
    dddup2 = 2915       ,/** duplicate a flt_256 2 times on the stack. **/
    dddup3 = 2916       ,/** duplicate a flt_256 3 times on the stack. **/
    dddup4 = 2917       ,/** duplicate a flt_256 4 times on the stack. **/
    dddup5 = 2918       ,/** duplicate a flt_256 5 times on the stack. **/
    ddswap = 2919       ,/** swap the 2 topmost flt_256 elements. **/
    ddrot = 2920        ,/** rotate the 3 topmost flt_256 elements. **/
    ddset = 2921        ,/** set a flt_256 from stack into a field on base pointer. **/
    ddget = 2922        ,/** get a flt_256 from a field on base pointer to stack. **/
    ddvset = 2923       ,/** set a flt_256 from value into a field on base pointer. **/
    ddsget = 2924       ,/** get a flt_256 from a field on base pointer to stack using address from stack. **/
    ddsset = 2925       ,/** set a flt_256 from stack into a field on base pointer using address from stack. **/
    ddsetl = 2926       ,/** set a flt_256 from local variable into a field on base pointer. **/
    ddinc_1 = 2927      ,/** increment flt_256 by 1 on stack. **/
    ddinc_2 = 2928      ,/** increment flt_256 by 2 on stack. **/
    ddstinc_1 = 2929    ,/** increment flt_256 by 1 on stack. **/
    ddstinc_2 = 2930    ,/** increment flt_256 by 2 on stack. **/
    ddreturn = 2931     ,/** return a flt_256 into the main stack. **/
    ddmainst = 2932     ,/** store a flt_256 from main stack in a local variable.. **/
    ddmainst_0 = 2933   ,/** store a flt_256 from main stack in local variable 0. **/
    ddmainst_1 = 2934   ,/** store a flt_256 from main stack in local variable 1. **/
    ddmainst_2 = 2935   ,/** store a flt_256 from main stack in local variable 2. **/
    ddmainst_3 = 2936   ,/** store a flt_256 from main stack in local variable 3. **/
    aconst = 2937       ,/** push a const pointer into the stack. **/
    aconst_0 = 2938     ,/** push a const pointer into the stack (value = 0). **/
    aload = 2939        ,/** load a pointer into the stack from local variable. **/
    aload_0 = 2940      ,/** load a pointer into the stack from local variable 0. **/
    aload_1 = 2941      ,/** load a pointer into the stack from local variable 1. **/
    aload_2 = 2942      ,/** load a pointer into the stack from local variable 2. **/
    aload_3 = 2943      ,/** load a pointer into the stack from local variable 3. **/
    aload_4 = 2944      ,/** load a pointer into the stack from local variable 4. **/
    astore = 2945       ,/** store a pointer from stack into local variable. **/
    astore_0 = 2946     ,/** store a pointer from stack into local variable 0. **/
    astore_1 = 2947     ,/** store a pointer from stack into local variable 1. **/
    astore_2 = 2948     ,/** store a pointer from stack into local variable 2. **/
    astore_3 = 2949     ,/** store a pointer from stack into local variable 3. **/
    astore_4 = 2950     ,/** store a pointer from stack into local variable 4. **/
    aswapb = 2951       ,/** swap the 2 topmost pointer elements where the top element is a Byte. **/
    aswaps = 2952       ,/** swap the 2 topmost pointer elements where the top element is a Short. **/
    aswapi = 2953       ,/** swap the 2 topmost pointer elements where the top element is a Int. **/
    aswapl = 2954       ,/** swap the 2 topmost pointer elements where the top element is a Long. **/
    aswapli = 2955      ,/** swap the 2 topmost pointer elements where the top element is a LongInt. **/
    aswapll = 2956      ,/** swap the 2 topmost pointer elements where the top element is a LongLong. **/
    aswapf = 2957       ,/** swap the 2 topmost pointer elements where the top element is a Float. **/
    aswapd = 2958       ,/** swap the 2 topmost pointer elements where the top element is a Double. **/
    aswapdf = 2959      ,/** swap the 2 topmost pointer elements where the top element is a DoubleFloat. **/
    aswapdd = 2960      ,/** swap the 2 topmost pointer elements where the top element is a DoubleDouble. **/
    aswapa = 2961       ,/** swap the 2 topmost pointer elements where the top element is a Pointer. **/
    adup = 2962         ,/** duplicate a pointer on the stack. **/
    adup2 = 2963        ,/** duplicate a pointer 2 times on the stack. **/
    adup3 = 2964        ,/** duplicate a pointer 3 times on the stack. **/
    adup4 = 2965        ,/** duplicate a pointer 4 times on the stack. **/
    adup5 = 2966        ,/** duplicate a pointer 5 times on the stack. **/
    aswap = 2967        ,/** swap the 2 topmost pointer elements. **/
    arot = 2968         ,/** rotate the 3 topmost pointer elements. **/
    aset = 2969         ,/** set a pointer from stack into a field on base pointer. **/
    aget = 2970         ,/** get a pointer from a field on base pointer to stack. **/
    avset = 2971        ,/** set a pointer from value into a field on base pointer. **/
    asget = 2972        ,/** get a pointer from a field on base pointer to stack using address from stack. **/
    asset = 2973        ,/** set a pointer from stack into a field on base pointer using address from stack. **/
    asetl = 2974        ,/** set a pointer from local variable into a field on base pointer. **/
    ainc_1 = 2975       ,/** increment pointer by 1 on stack. **/
    ainc_2 = 2976       ,/** increment pointer by 2 on stack. **/
    astinc_1 = 2977     ,/** increment pointer by 1 on stack. **/
    astinc_2 = 2978     ,/** increment pointer by 2 on stack. **/
    areturn = 2979      ,/** return a pointer into the main stack. **/
    amainst = 2980      ,/** store a pointer from main stack in a local variable.. **/
    amainst_0 = 2981    ,/** store a pointer from main stack in local variable 0. **/
    amainst_1 = 2982    ,/** store a pointer from main stack in local variable 1. **/
    amainst_2 = 2983    ,/** store a pointer from main stack in local variable 2. **/
    amainst_3 = 2984    ,/** store a pointer from main stack in local variable 3. **/
};

#endif //MVM_OPCODES_H