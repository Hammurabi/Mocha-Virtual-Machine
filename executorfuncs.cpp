//
// Created by Riverssen on 10.11.18.
//

#include "executorfuncs.h"
#include "executor.h"

implptr_t impl::impl_funcs;

void funcs::func_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * (This opcode won't be interpreted) it creates a marker for an OP_STACK (must end with a return_op of some kind).
 */




}
void funcs::hash_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * perform a hash on pointer data.
 */




}
void funcs::timens_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a (uint_64) current time in nanoseconds.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (MvM::gtimens()));


}
void funcs::timems_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a (uint_64) current time in milliseconds.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (MvM::gtimems()));


}
void funcs::strconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a constant string.
 */

    { uint_16 size_ = stack.popUnsignedShort(); pointer str = static_cast<pointer> (calloc(size_ * 2 + 2, size_ * 2 + 2)); MvM::accessMemoryAndSetUnsignedShort(str, 0, size_); stack.pushPointer(str);}


}
void funcs::strload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a string.
 */

    stack.pushUnsignedLong(lvt[ops.getUnsignedShort()].UnsignedLong);


}
void funcs::strstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a string.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Long(stack.popUnsignedLong());


}
void funcs::strsizeof_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a string.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (MvM::accessMemoryAndGetUnsignedShort(stack.popPointer(), 0)));


}
void funcs::strcast_a_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast a string to a pointer.
 */

    { pointer s = stack.popPointer(); uint_16 l = MvM::accessMemoryAndGetUnsignedShort(s, 0); pointer b = static_cast<pointer> (calloc(l * 2, l * 2)); memcpy(b, s + 2, l * 2); stack.pushPointer(b); }


}
void funcs::strcast_ba_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast a string to a byte array.
 */

    { pointer s = stack.popPointer(); uint_16 l = MvM::accessMemoryAndGetUnsignedShort(s, 0); pointer b = static_cast<pointer> (calloc(l * 2 + 6, l * 2 + 6)); memcpy(b + 6, s, l * 2); MvM::accessMemoryAndSetUnsignedLong(b, 0, static_cast<uint_64> (l)); stack.pushPointer(b); }


}
void funcs::strprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a string.
 */

    MvM::printString(stack.popPointer());


}
void funcs::strreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a string from scope.
 */

    ops.address = ops.length;;
    stack_main.pushUnsignedLong(stack.popUnsignedLong()); return;


}
void funcs::mark_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * mark a specific location.
 */

    CHECK_POINTS[ops.getUnsignedShort()] = ops.address + 2;


}
void funcs::jump_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * jump to a specific location.
 */

    ops.address = ops.getUnsignedLong();


}
void funcs::jumptomark_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * jump to a specific marked location.
 */

    ops.address = CHECK_POINTS[ops.getUnsignedShort()];


}
void funcs::newline_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a \n character into the console.
 */

    std::cout<<std::endl;


}
void funcs::ret_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return from this scope.
 */

    ops.address = ops.length;;
    return;


}
void funcs::invoke_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * invoke a method.
 */

    MvM::execute(globalTable, nativeTable, globalPointer, globalPointer, stack, globalTable[ops.getUnsignedLong()]);


}
void funcs::invokedynamic_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * dynamically invoke a method using function pointers.
 */

    MvM::execute(globalTable, nativeTable, globalPointer, globalPointer, stack, globalTable[stack.popUnsignedLong()]);


}
void funcs::invokespecial_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * invoke a native method using function pointers.
 */

    nativeTable[stack.popUnsignedLong()]->execute(globalTable, nativeTable, globalPointer, globalPointer, stack, globalTable[stack.popUnsignedLong()]);


}
void funcs::if_t_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * if true.
 */

    { uint_32 jump = ops.getUnsignedInt(); if (stack.popByte() == 0) ops.address += jump; }


}
void funcs::if_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * if not true.
 */

    { uint_32 jump = ops.getUnsignedInt(); if (stack.popByte() > 0) ops.address += jump; }


}
void funcs::amemcpy_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * copy memory to destination from source.
 */

    memcpy(stack.popPointer(), stack.popPointer(), stack.popUnsignedLong());


}
void funcs::bspmemcpy_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * copy memory to destination from base pointer.
 */

    memcpy(stack.popPointer(), base, stack.popUnsignedLong());


}
void funcs::amemcpybsp_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * copy memory to pointer from source.
 */

    memcpy(base, stack.popPointer(), stack.popUnsignedLong());


}
void funcs::amalloc_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack.
 */

    stack.pushPointer(static_cast<pointer> (malloc(stack.popUnsignedLong())));


}
void funcs::acalloc_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack.
 */

    stack.pushPointer(static_cast<pointer> (calloc(stack.popUnsignedLong(), stack.popUnsignedLong())));


}
void funcs::amallocs_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack from size_int16_t.
 */

    stack.pushPointer(static_cast<pointer> (malloc(stack.popUnsignedShort())));


}
void funcs::acallocs_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack from size_int16_t.
 */

    stack.pushPointer(static_cast<pointer> (calloc(stack.popUnsignedShort(), stack.popUnsignedShort())));


}
void funcs::abload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_8 from a pointer.
 */

    stack.pushByte(MvM::accessMemoryAndGetByte(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::asload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_16 from a pointer.
 */

    stack.pushShort(MvM::accessMemoryAndGetShort(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::aiload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_32 from a pointer.
 */

    stack.pushInt(MvM::accessMemoryAndGetInt(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::alload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_64 from a pointer.
 */

    stack.pushLong(MvM::accessMemoryAndGetLong(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::aliload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_128 from a pointer.
 */

    stack.pushLongInt(MvM::accessMemoryAndGetLongInt(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::allload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_256 from a pointer.
 */

    stack.pushLongLong(MvM::accessMemoryAndGetLongLong(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::afload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_32 from a pointer.
 */

    stack.pushFloat(MvM::accessMemoryAndGetFloat(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::adload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_64 from a pointer.
 */

    stack.pushDouble(MvM::accessMemoryAndGetDouble(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::adfload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_128 from a pointer.
 */

    stack.pushDoubleFloat(MvM::accessMemoryAndGetDoubleFloat(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::addload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_256 from a pointer.
 */

    stack.pushDoubleDouble(MvM::accessMemoryAndGetDoubleDouble(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::aaload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer from a pointer.
 */

    stack.pushPointer(MvM::accessMemoryAndGetPointer(stack.popPointer(), stack.popUnsignedLong()));


}
void funcs::abstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_8 in a pointer.
 */

    (MvM::accessMemoryAndSetByte(stack.popPointer(), stack.popUnsignedLong(), stack.popByte()));


}
void funcs::asstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_16 in a pointer.
 */

    (MvM::accessMemoryAndSetShort(stack.popPointer(), stack.popUnsignedLong(), stack.popShort()));


}
void funcs::aistore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_32 in a pointer.
 */

    (MvM::accessMemoryAndSetInt(stack.popPointer(), stack.popUnsignedLong(), stack.popInt()));


}
void funcs::alstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_64 in a pointer.
 */

    (MvM::accessMemoryAndSetLong(stack.popPointer(), stack.popUnsignedLong(), stack.popLong()));


}
void funcs::alistore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_128 in a pointer.
 */

    (MvM::accessMemoryAndSetLongInt(stack.popPointer(), stack.popUnsignedLong(), stack.popLongInt()));


}
void funcs::allstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_256 in a pointer.
 */

    (MvM::accessMemoryAndSetLongLong(stack.popPointer(), stack.popUnsignedLong(), stack.popLongLong()));


}
void funcs::afstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_32 in a pointer.
 */

    (MvM::accessMemoryAndSetFloat(stack.popPointer(), stack.popUnsignedLong(), stack.popFloat()));


}
void funcs::adstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_64 in a pointer.
 */

    (MvM::accessMemoryAndSetDouble(stack.popPointer(), stack.popUnsignedLong(), stack.popDouble()));


}
void funcs::adfstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_128 in a pointer.
 */

    (MvM::accessMemoryAndSetDoubleFloat(stack.popPointer(), stack.popUnsignedLong(), stack.popDoubleFloat()));


}
void funcs::addstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_256 in a pointer.
 */

    (MvM::accessMemoryAndSetDoubleDouble(stack.popPointer(), stack.popUnsignedLong(), stack.popDoubleDouble()));


}
void funcs::aastore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer in a pointer.
 */

    (MvM::accessMemoryAndSetPointer(stack.popPointer(), stack.popUnsignedLong(), stack.popPointer()));


}
void funcs::baconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a byte array.
 */

    { uint_64 length = stack.popUnsignedLong(); pointer p = static_cast<pointer> (calloc(length, length)); stack.pushPointer(p); MvM::accessMemoryAndSetUnsignedLong(p, 0, length); }


}
void funcs::baconsts_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a byte array using size_int16_t
 */

    { uint_64 length = static_cast<uint_64> (stack.popUnsignedShort()); pointer p = static_cast<pointer> (calloc(length, length)); stack.pushPointer(p); MvM::accessMemoryAndSetUnsignedLong(p, 0, length); }


}
void funcs::baconsti_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a byte array using size_int32_t
 */

    { uint_64 length = static_cast<uint_64> (stack.popUnsignedInt()); pointer p = static_cast<pointer> (calloc(length, length)); stack.pushPointer(p); MvM::accessMemoryAndSetUnsignedLong(p, 0, length); }


}
void funcs::bacast_a_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast a byte array into a pointer
 */

    { stack.pushPointer(stack.popPointer() + 8); }


}
void funcs::basizeof_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push the size of a byte array to stack
 */

    { stack.pushUnsignedLong(static_cast<uint_64> (MvM::accessMemoryAndGetLong(stack.popPointer(), 0))); }


}
void funcs::printba_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a byte array.
 */

    { pointer bytearray = stack.popPointer(); uint_64 bytearraysize   = static_cast<uint_64> (MvM::accessMemoryAndGetLong(bytearray, 0)); std::string data = "["; for (uint_64 i = 0; i < bytearraysize; i ++) data += std::to_string(MvM::accessMemoryAndGetByte(bytearray + 8, i)) + ((i < bytearraysize - 1) ? ", " : "]"); MvM::log(data); }


}
void funcs::bconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack.
 */

    stack.pushByte(ops.getByte());


}
void funcs::bconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 0).
 */

    stack.pushByte(0);


}
void funcs::bconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 1).
 */

    stack.pushByte(1);


}
void funcs::bconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 2).
 */

    stack.pushByte(2);


}
void funcs::bconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 3).
 */

    stack.pushByte(3);


}
void funcs::bconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 4).
 */

    stack.pushByte(4);


}
void funcs::bconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 5).
 */

    stack.pushByte(5);


}
void funcs::bconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 6).
 */

    stack.pushByte(6);


}
void funcs::bconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 9).
 */

    stack.pushByte(9);


}
void funcs::bconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 10).
 */

    stack.pushByte(10);


}
void funcs::bconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 11).
 */

    stack.pushByte(11);


}
void funcs::bconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 12).
 */

    stack.pushByte(12);


}
void funcs::bload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable.
 */

    stack.pushByte(lvt[ops.getUnsignedShort()].Byte);


}
void funcs::bload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 0.
 */

    stack.pushByte(lvt[0].Byte);


}
void funcs::bload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 1.
 */

    stack.pushByte(lvt[1].Byte);


}
void funcs::bload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 2.
 */

    stack.pushByte(lvt[2].Byte);


}
void funcs::bload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 3.
 */

    stack.pushByte(lvt[3].Byte);


}
void funcs::bload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 4.
 */

    stack.pushByte(lvt[4].Byte);


}
void funcs::bstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Byte(stack.popByte());


}
void funcs::bstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Byte(stack.popByte());


}
void funcs::bstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Byte(stack.popByte());


}
void funcs::bstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Byte(stack.popByte());


}
void funcs::bstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Byte(stack.popByte());


}
void funcs::bstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Byte(stack.popByte());


}
void funcs::bcast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popByte()));


}
void funcs::bucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a + b);
    }


}
void funcs::buadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte(a + b);
    }
    ;
}
void funcs::bsub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a - b);
    }


}
void funcs::busub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte(a - b);
    }
    ;
}
void funcs::bmul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a * b);
    }


}
void funcs::bumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte(a * b);
    }
    ;
}
void funcs::bdiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a / b);
    }


}
void funcs::budiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte(a / b);
    }
    ;
}
void funcs::bcmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popByte()));


}
void funcs::bucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a + b);
    }


}
void funcs::buadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushShort(a + b);
    }
    ;
}
void funcs::bsub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a - b);
    }


}
void funcs::busub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushShort(a - b);
    }
    ;
}
void funcs::bmul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a * b);
    }


}
void funcs::bumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushShort(a * b);
    }
    ;
}
void funcs::bdiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a / b);
    }


}
void funcs::budiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushShort(a / b);
    }
    ;
}
void funcs::bcmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popByte()));


}
void funcs::bucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a + b);
    }


}
void funcs::buadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushInt(a + b);
    }
    ;
}
void funcs::bsub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a - b);
    }


}
void funcs::busub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushInt(a - b);
    }
    ;
}
void funcs::bmul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a * b);
    }


}
void funcs::bumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushInt(a * b);
    }
    ;
}
void funcs::bdiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a / b);
    }


}
void funcs::budiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushInt(a / b);
    }
    ;
}
void funcs::bcmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popByte()));


}
void funcs::bucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }


}
void funcs::buadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::bsub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }


}
void funcs::busub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::bmul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }


}
void funcs::bumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::bdiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }


}
void funcs::budiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::bcmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popByte()));


}
void funcs::bucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }


}
void funcs::buadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::bsub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }


}
void funcs::busub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::bmul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }


}
void funcs::bumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::bdiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }


}
void funcs::budiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::bcmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popByte()));


}
void funcs::bucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::buadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::bsub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::busub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::bmul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::bumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::bdiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::budiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::bcmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popByte()));


}
void funcs::bucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a + b);
    }


}
void funcs::buadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a + b);
    }
    ;
}
void funcs::bsub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a - b);
    }


}
void funcs::busub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a - b);
    }
    ;
}
void funcs::bmul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a * b);
    }


}
void funcs::bumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a * b);
    }
    ;
}
void funcs::bdiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a / b);
    }


}
void funcs::budiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a / b);
    }
    ;
}
void funcs::bcmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Float.
 */

    {
        int_8 b = stack.popByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Float.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popByte()));


}
void funcs::bucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a + b);
    }


}
void funcs::buadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a + b);
    }
    ;
}
void funcs::bsub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a - b);
    }


}
void funcs::busub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a - b);
    }
    ;
}
void funcs::bmul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a * b);
    }


}
void funcs::bumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a * b);
    }
    ;
}
void funcs::bdiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a / b);
    }


}
void funcs::budiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a / b);
    }
    ;
}
void funcs::bcmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Double.
 */

    {
        int_8 b = stack.popByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Double.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popByte()));


}
void funcs::bucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }


}
void funcs::buadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }
    ;
}
void funcs::bsub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }


}
void funcs::busub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }
    ;
}
void funcs::bmul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }


}
void funcs::bumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }
    ;
}
void funcs::bdiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }


}
void funcs::budiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }
    ;
}
void funcs::bcmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type DoubleFloat.
 */

    {
        int_8 b = stack.popByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type DoubleFloat.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bcast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popByte()));


}
void funcs::bucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }


}
void funcs::buadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }
    ;
}
void funcs::bsub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }


}
void funcs::busub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }
    ;
}
void funcs::bmul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }


}
void funcs::bumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }
    ;
}
void funcs::bdiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }


}
void funcs::budiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }
    ;
}
void funcs::bcmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type DoubleDouble.
 */

    {
        int_8 b = stack.popByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type DoubleDouble.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bmod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a % b);
    }


}
void funcs::bcast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popByte()));


}
void funcs::bucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a + b);
    }


}
void funcs::buadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a + b);
    }
    ;
}
void funcs::bsub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a - b);
    }


}
void funcs::busub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a - b);
    }
    ;
}
void funcs::bmul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a * b);
    }


}
void funcs::bumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a * b);
    }
    ;
}
void funcs::bdiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a / b);
    }


}
void funcs::budiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushUnsignedByte(a / b);
    }
    ;
}
void funcs::bcmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Byte.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_8 a = stack.popUnsignedByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); int_8 b = stack.popByte(); stack.pushByte(a); stack.pushByte(b); }


}
void funcs::bmod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a % b);
    }


}
void funcs::bcast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popByte()));


}
void funcs::bucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a + b);
    }


}
void funcs::buadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a + b);
    }
    ;
}
void funcs::bsub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a - b);
    }


}
void funcs::busub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a - b);
    }
    ;
}
void funcs::bmul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a * b);
    }


}
void funcs::bumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a * b);
    }
    ;
}
void funcs::bdiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a / b);
    }


}
void funcs::budiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a / b);
    }
    ;
}
void funcs::bcmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Short.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); int_8 b = stack.popByte(); stack.pushShort(a); stack.pushByte(b); }


}
void funcs::bmod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a % b);
    }


}
void funcs::bcast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popByte()));


}
void funcs::bucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }


}
void funcs::buadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }
    ;
}
void funcs::bsub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }


}
void funcs::busub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }
    ;
}
void funcs::bmul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }


}
void funcs::bumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }
    ;
}
void funcs::bdiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }


}
void funcs::budiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }
    ;
}
void funcs::bcmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Int.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); int_8 b = stack.popByte(); stack.pushInt(a); stack.pushByte(b); }


}
void funcs::bmod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::bcast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popByte()));


}
void funcs::bucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::buadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::bsub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::busub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::bmul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::bumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::bdiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::budiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::bcmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Long.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); int_8 b = stack.popByte(); stack.pushLong(a); stack.pushByte(b); }


}
void funcs::bmod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::bcast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popByte()));


}
void funcs::bucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::buadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::bsub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::busub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::bmul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::bumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::bdiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::budiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::bcmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type LongInt.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); int_8 b = stack.popByte(); stack.pushLongInt(a); stack.pushByte(b); }


}
void funcs::bmod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::bcast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popByte()));


}
void funcs::bucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedByte()));
    ;
}
void funcs::badd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::buadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::bsub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::busub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::bmul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::bumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::bdiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::budiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::bcmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::bucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::bucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::bucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::bcmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::bucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::bucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::bcmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::bucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type LongLong.
 */

    {
        uint_8 b = stack.popUnsignedByte();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::bswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); int_8 b = stack.popByte(); stack.pushLongLong(a); stack.pushByte(b); }


}
void funcs::bswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); int_8 b = stack.popByte(); stack.pushFloat(a); stack.pushByte(b); }


}
void funcs::bswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); int_8 b = stack.popByte(); stack.pushDouble(a); stack.pushByte(b); }


}
void funcs::bswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); int_8 b = stack.popByte(); stack.pushDoubleFloat(a); stack.pushByte(b); }


}
void funcs::bswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); int_8 b = stack.popByte(); stack.pushDoubleDouble(a); stack.pushByte(b); }


}
void funcs::bswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); int_8 b = stack.popByte(); stack.pushPointer(a); stack.pushByte(b); }


}
void funcs::band_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a & b);
    }


}
void funcs::bor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a | b);
    }


}
void funcs::bxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a ^ b);
    }


}
void funcs::bshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a >> b);
    }


}
void funcs::bshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Byte.
 */

    {
        int_8 b = stack.popByte();
        int_8 a = stack.popByte();
        stack.pushByte(a << b);
    }


}
void funcs::band_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a & b);
    }


}
void funcs::bor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a | b);
    }


}
void funcs::bxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a ^ b);
    }


}
void funcs::bshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a >> b);
    }


}
void funcs::bshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Short.
 */

    {
        int_8 b = stack.popByte();
        int_16 a = stack.popShort();
        stack.pushShort(a << b);
    }


}
void funcs::band_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a & b);
    }


}
void funcs::bor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a | b);
    }


}
void funcs::bxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a ^ b);
    }


}
void funcs::bshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a >> b);
    }


}
void funcs::bshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Int.
 */

    {
        int_8 b = stack.popByte();
        int_32 a = stack.popInt();
        stack.pushInt(a << b);
    }


}
void funcs::band_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a & b);
    }


}
void funcs::bor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a | b);
    }


}
void funcs::bxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a ^ b);
    }


}
void funcs::bshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a >> b);
    }


}
void funcs::bshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Long.
 */

    {
        int_8 b = stack.popByte();
        int_64 a = stack.popLong();
        stack.pushLong(a << b);
    }


}
void funcs::band_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a & b);
    }


}
void funcs::bor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a | b);
    }


}
void funcs::bxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::bshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a >> b);
    }


}
void funcs::bshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type LongInt.
 */

    {
        int_8 b = stack.popByte();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a << b);
    }


}
void funcs::band_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::bor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::bxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::bshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::bshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type LongLong.
 */

    {
        int_8 b = stack.popByte();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::bdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 on the stack.
 */

    stack.pushByte(stack.peekByte());


}
void funcs::bdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 2 times on the stack.
 */

    stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());


}
void funcs::bdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 3 times on the stack.
 */

    stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());


}
void funcs::bdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 4 times on the stack.
 */

    stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());


}
void funcs::bdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 5 times on the stack.
 */

    stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());


}
void funcs::bswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements.
 */

    { int_8 a = stack.popByte(); int_8 b = stack.popByte(); stack.pushByte(a); stack.pushByte(b); }


}
void funcs::brot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_8 elements.
 */

    { int_8 a = stack.popByte(); int_8 b = stack.popByte(); int_8 c = stack.popByte(); stack.pushByte(a); stack.pushByte(b); stack.pushByte(c); }


}
void funcs::bset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetByte(base, ops.getUnsignedInt(), stack.popByte());


}
void funcs::bget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_8 from a field on base pointer to stack.
 */

    stack.pushByte(MvM::accessMemoryAndGetByte(base, ops.getUnsignedInt()));


}
void funcs::bvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetByte(base, ops.getUnsignedInt(), ops.getByte());


}
void funcs::bsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_8 from a field on base pointer to stack using address from stack.
 */

    stack.pushByte(MvM::accessMemoryAndGetByte(base, stack.popUnsignedInt()));


}
void funcs::bsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetByte(base, stack.popUnsignedInt(), stack.popByte());


}
void funcs::bsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetByte(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Byte);


}
void funcs::binc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Byte = lvt[point].Byte + 1; }


}
void funcs::binc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Byte = lvt[point].Byte + 2; }


}
void funcs::bstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 1 on stack.
 */

    stack.pushByte(stack.popByte() + 1);


}
void funcs::bstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 2 on stack.
 */

    stack.pushByte(stack.popByte() + 2);


}
void funcs::breturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_8 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushByte(stack.popByte()); return;


}
void funcs::bmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Byte = stack_main.popByte();


}
void funcs::bmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 0.
 */

    lvt[0].Byte = stack_main.popByte();;


}
void funcs::bmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 1.
 */

    lvt[1].Byte = stack_main.popByte();;


}
void funcs::bmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 2.
 */

    lvt[2].Byte = stack_main.popByte();;


}
void funcs::bmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 3.
 */

    lvt[3].Byte = stack_main.popByte();;


}
void funcs::bprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_8 from stack.
 */

    MvM::log(std::to_string(stack.popByte()));


}
void funcs::buprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_8 from stack.
 */

    MvM::log(std::to_string(stack.popUnsignedByte()));
    ;
}
void funcs::sconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack.
 */

    stack.pushShort(ops.getShort());


}
void funcs::sconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 0).
 */

    stack.pushShort(0);


}
void funcs::sconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 1).
 */

    stack.pushShort(1);


}
void funcs::sconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 2).
 */

    stack.pushShort(2);


}
void funcs::sconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 3).
 */

    stack.pushShort(3);


}
void funcs::sconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 4).
 */

    stack.pushShort(4);


}
void funcs::sconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 5).
 */

    stack.pushShort(5);


}
void funcs::sconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 6).
 */

    stack.pushShort(6);


}
void funcs::sconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 9).
 */

    stack.pushShort(9);


}
void funcs::sconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 10).
 */

    stack.pushShort(10);


}
void funcs::sconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 11).
 */

    stack.pushShort(11);


}
void funcs::sconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 12).
 */

    stack.pushShort(12);


}
void funcs::sload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable.
 */

    stack.pushShort(lvt[ops.getUnsignedShort()].Short);


}
void funcs::sload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 0.
 */

    stack.pushShort(lvt[0].Short);


}
void funcs::sload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 1.
 */

    stack.pushShort(lvt[1].Short);


}
void funcs::sload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 2.
 */

    stack.pushShort(lvt[2].Short);


}
void funcs::sload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 3.
 */

    stack.pushShort(lvt[3].Short);


}
void funcs::sload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 4.
 */

    stack.pushShort(lvt[4].Short);


}
void funcs::sstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Short(stack.popShort());


}
void funcs::sstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Short(stack.popShort());


}
void funcs::sstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Short(stack.popShort());


}
void funcs::sstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Short(stack.popShort());


}
void funcs::sstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Short(stack.popShort());


}
void funcs::sstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Short(stack.popShort());


}
void funcs::scast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popShort()));


}
void funcs::sucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a + b);
    }


}
void funcs::suadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushShort(a + b);
    }
    ;
}
void funcs::ssub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a - b);
    }


}
void funcs::susub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushShort(a - b);
    }
    ;
}
void funcs::smul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a * b);
    }


}
void funcs::sumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushShort(a * b);
    }
    ;
}
void funcs::sdiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a / b);
    }


}
void funcs::sudiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushShort(a / b);
    }
    ;
}
void funcs::scmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popShort()));


}
void funcs::sucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a + b);
    }


}
void funcs::suadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushShort(a + b);
    }
    ;
}
void funcs::ssub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a - b);
    }


}
void funcs::susub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushShort(a - b);
    }
    ;
}
void funcs::smul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a * b);
    }


}
void funcs::sumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushShort(a * b);
    }
    ;
}
void funcs::sdiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a / b);
    }


}
void funcs::sudiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushShort(a / b);
    }
    ;
}
void funcs::scmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popShort()));


}
void funcs::sucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a + b);
    }


}
void funcs::suadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushInt(a + b);
    }
    ;
}
void funcs::ssub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a - b);
    }


}
void funcs::susub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushInt(a - b);
    }
    ;
}
void funcs::smul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a * b);
    }


}
void funcs::sumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushInt(a * b);
    }
    ;
}
void funcs::sdiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a / b);
    }


}
void funcs::sudiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushInt(a / b);
    }
    ;
}
void funcs::scmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popShort()));


}
void funcs::sucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }


}
void funcs::suadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::ssub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }


}
void funcs::susub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::smul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }


}
void funcs::sumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::sdiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }


}
void funcs::sudiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::scmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popShort()));


}
void funcs::sucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }


}
void funcs::suadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::ssub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }


}
void funcs::susub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::smul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }


}
void funcs::sumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::sdiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }


}
void funcs::sudiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::scmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popShort()));


}
void funcs::sucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::suadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::ssub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::susub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::smul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::sumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::sdiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::sudiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::scmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popShort()));


}
void funcs::sucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a + b);
    }


}
void funcs::suadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a + b);
    }
    ;
}
void funcs::ssub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a - b);
    }


}
void funcs::susub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a - b);
    }
    ;
}
void funcs::smul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a * b);
    }


}
void funcs::sumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a * b);
    }
    ;
}
void funcs::sdiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a / b);
    }


}
void funcs::sudiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushFloat(a / b);
    }
    ;
}
void funcs::scmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Float.
 */

    {
        int_16 b = stack.popShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Float.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popShort()));


}
void funcs::sucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a + b);
    }


}
void funcs::suadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a + b);
    }
    ;
}
void funcs::ssub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a - b);
    }


}
void funcs::susub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a - b);
    }
    ;
}
void funcs::smul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a * b);
    }


}
void funcs::sumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a * b);
    }
    ;
}
void funcs::sdiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a / b);
    }


}
void funcs::sudiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a / b);
    }
    ;
}
void funcs::scmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Double.
 */

    {
        int_16 b = stack.popShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Double.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popShort()));


}
void funcs::sucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }


}
void funcs::suadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }
    ;
}
void funcs::ssub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }


}
void funcs::susub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }
    ;
}
void funcs::smul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }


}
void funcs::sumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }
    ;
}
void funcs::sdiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }


}
void funcs::sudiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }
    ;
}
void funcs::scmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type DoubleFloat.
 */

    {
        int_16 b = stack.popShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type DoubleFloat.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::scast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popShort()));


}
void funcs::sucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }


}
void funcs::suadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }
    ;
}
void funcs::ssub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }


}
void funcs::susub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }
    ;
}
void funcs::smul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }


}
void funcs::sumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }
    ;
}
void funcs::sdiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }


}
void funcs::sudiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }
    ;
}
void funcs::scmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type DoubleDouble.
 */

    {
        int_16 b = stack.popShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type DoubleDouble.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::smod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a % b);
    }


}
void funcs::scast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popShort()));


}
void funcs::sucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a + b);
    }


}
void funcs::suadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a + b);
    }
    ;
}
void funcs::ssub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a - b);
    }


}
void funcs::susub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a - b);
    }
    ;
}
void funcs::smul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a * b);
    }


}
void funcs::sumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a * b);
    }
    ;
}
void funcs::sdiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a / b);
    }


}
void funcs::sudiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a / b);
    }
    ;
}
void funcs::scmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Byte.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_8 a = stack.popUnsignedShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::sswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); int_16 b = stack.popShort(); stack.pushByte(a); stack.pushShort(b); }


}
void funcs::smod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a % b);
    }


}
void funcs::scast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popShort()));


}
void funcs::sucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a + b);
    }


}
void funcs::suadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a + b);
    }
    ;
}
void funcs::ssub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a - b);
    }


}
void funcs::susub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a - b);
    }
    ;
}
void funcs::smul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a * b);
    }


}
void funcs::sumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a * b);
    }
    ;
}
void funcs::sdiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a / b);
    }


}
void funcs::sudiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushUnsignedShort(a / b);
    }
    ;
}
void funcs::scmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Short.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_16 a = stack.popUnsignedShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::sswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); int_16 b = stack.popShort(); stack.pushShort(a); stack.pushShort(b); }


}
void funcs::smod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a % b);
    }


}
void funcs::scast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popShort()));


}
void funcs::sucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }


}
void funcs::suadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }
    ;
}
void funcs::ssub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }


}
void funcs::susub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }
    ;
}
void funcs::smul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }


}
void funcs::sumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }
    ;
}
void funcs::sdiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }


}
void funcs::sudiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }
    ;
}
void funcs::scmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Int.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::sswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); int_16 b = stack.popShort(); stack.pushInt(a); stack.pushShort(b); }


}
void funcs::smod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::scast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popShort()));


}
void funcs::sucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::suadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::ssub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::susub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::smul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::sumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::sdiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::sudiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::scmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Long.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::sswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); int_16 b = stack.popShort(); stack.pushLong(a); stack.pushShort(b); }


}
void funcs::smod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::scast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popShort()));


}
void funcs::sucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::suadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::ssub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::susub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::smul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::sumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::sdiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::sudiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::scmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type LongInt.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::sswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); int_16 b = stack.popShort(); stack.pushLongInt(a); stack.pushShort(b); }


}
void funcs::smod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::scast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popShort()));


}
void funcs::sucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedShort()));
    ;
}
void funcs::sadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::suadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::ssub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::susub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::smul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::sumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::sdiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::sudiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::scmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::sucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::scmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::sucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::scmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::sucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::scmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::sucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::sucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::scmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::sucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type LongLong.
 */

    {
        uint_16 b = stack.popUnsignedShort();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::sswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); int_16 b = stack.popShort(); stack.pushLongLong(a); stack.pushShort(b); }


}
void funcs::sswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); int_16 b = stack.popShort(); stack.pushFloat(a); stack.pushShort(b); }


}
void funcs::sswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); int_16 b = stack.popShort(); stack.pushDouble(a); stack.pushShort(b); }


}
void funcs::sswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); int_16 b = stack.popShort(); stack.pushDoubleFloat(a); stack.pushShort(b); }


}
void funcs::sswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); int_16 b = stack.popShort(); stack.pushDoubleDouble(a); stack.pushShort(b); }


}
void funcs::sswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); int_16 b = stack.popShort(); stack.pushPointer(a); stack.pushShort(b); }


}
void funcs::sand_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a & b);
    }


}
void funcs::sor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a | b);
    }


}
void funcs::sxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a ^ b);
    }


}
void funcs::sshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a >> b);
    }


}
void funcs::sshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Byte.
 */

    {
        int_16 b = stack.popShort();
        int_8 a = stack.popByte();
        stack.pushShort(a << b);
    }


}
void funcs::sand_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a & b);
    }


}
void funcs::sor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a | b);
    }


}
void funcs::sxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a ^ b);
    }


}
void funcs::sshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a >> b);
    }


}
void funcs::sshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Short.
 */

    {
        int_16 b = stack.popShort();
        int_16 a = stack.popShort();
        stack.pushShort(a << b);
    }


}
void funcs::sand_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a & b);
    }


}
void funcs::sor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a | b);
    }


}
void funcs::sxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a ^ b);
    }


}
void funcs::sshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a >> b);
    }


}
void funcs::sshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Int.
 */

    {
        int_16 b = stack.popShort();
        int_32 a = stack.popInt();
        stack.pushInt(a << b);
    }


}
void funcs::sand_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a & b);
    }


}
void funcs::sor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a | b);
    }


}
void funcs::sxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a ^ b);
    }


}
void funcs::sshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a >> b);
    }


}
void funcs::sshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Long.
 */

    {
        int_16 b = stack.popShort();
        int_64 a = stack.popLong();
        stack.pushLong(a << b);
    }


}
void funcs::sand_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a & b);
    }


}
void funcs::sor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a | b);
    }


}
void funcs::sxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::sshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a >> b);
    }


}
void funcs::sshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type LongInt.
 */

    {
        int_16 b = stack.popShort();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a << b);
    }


}
void funcs::sand_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::sor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::sxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::sshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::sshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type LongLong.
 */

    {
        int_16 b = stack.popShort();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::sdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 on the stack.
 */

    stack.pushShort(stack.peekShort());


}
void funcs::sdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 2 times on the stack.
 */

    stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());


}
void funcs::sdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 3 times on the stack.
 */

    stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());


}
void funcs::sdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 4 times on the stack.
 */

    stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());


}
void funcs::sdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 5 times on the stack.
 */

    stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());


}
void funcs::sswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements.
 */

    { int_16 a = stack.popShort(); int_16 b = stack.popShort(); stack.pushShort(a); stack.pushShort(b); }


}
void funcs::srot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_16 elements.
 */

    { int_16 a = stack.popShort(); int_16 b = stack.popShort(); int_16 c = stack.popShort(); stack.pushShort(a); stack.pushShort(b); stack.pushShort(c); }


}
void funcs::sset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetShort(base, ops.getUnsignedInt(), stack.popShort());


}
void funcs::sget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_16 from a field on base pointer to stack.
 */

    stack.pushShort(MvM::accessMemoryAndGetShort(base, ops.getUnsignedInt()));


}
void funcs::svset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetShort(base, ops.getUnsignedInt(), ops.getShort());


}
void funcs::ssget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_16 from a field on base pointer to stack using address from stack.
 */

    stack.pushShort(MvM::accessMemoryAndGetShort(base, stack.popUnsignedInt()));


}
void funcs::ssset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetShort(base, stack.popUnsignedInt(), stack.popShort());


}
void funcs::ssetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetShort(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Short);


}
void funcs::sinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Short = lvt[point].Short + 1; }


}
void funcs::sinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Short = lvt[point].Short + 2; }


}
void funcs::sstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 1 on stack.
 */

    stack.pushShort(stack.popShort() + 1);


}
void funcs::sstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 2 on stack.
 */

    stack.pushShort(stack.popShort() + 2);


}
void funcs::sreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_16 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushShort(stack.popShort()); return;


}
void funcs::smainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Short = stack_main.popShort();


}
void funcs::smainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 0.
 */

    lvt[0].Short = stack_main.popShort();;


}
void funcs::smainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 1.
 */

    lvt[1].Short = stack_main.popShort();;


}
void funcs::smainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 2.
 */

    lvt[2].Short = stack_main.popShort();;


}
void funcs::smainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 3.
 */

    lvt[3].Short = stack_main.popShort();;


}
void funcs::sprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_16 from stack.
 */

    MvM::log(std::to_string(stack.popShort()));


}
void funcs::suprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_16 from stack.
 */

    MvM::log(std::to_string(stack.popUnsignedShort()));
    ;
}
void funcs::iconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack.
 */

    stack.pushInt(ops.getInt());


}
void funcs::iconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 0).
 */

    stack.pushInt(0);


}
void funcs::iconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 1).
 */

    stack.pushInt(1);


}
void funcs::iconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 2).
 */

    stack.pushInt(2);


}
void funcs::iconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 3).
 */

    stack.pushInt(3);


}
void funcs::iconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 4).
 */

    stack.pushInt(4);


}
void funcs::iconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 5).
 */

    stack.pushInt(5);


}
void funcs::iconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 6).
 */

    stack.pushInt(6);


}
void funcs::iconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 9).
 */

    stack.pushInt(9);


}
void funcs::iconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 10).
 */

    stack.pushInt(10);


}
void funcs::iconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 11).
 */

    stack.pushInt(11);


}
void funcs::iconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 12).
 */

    stack.pushInt(12);


}
void funcs::iload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable.
 */

    stack.pushInt(lvt[ops.getUnsignedShort()].Int);


}
void funcs::iload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 0.
 */

    stack.pushInt(lvt[0].Int);


}
void funcs::iload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 1.
 */

    stack.pushInt(lvt[1].Int);


}
void funcs::iload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 2.
 */

    stack.pushInt(lvt[2].Int);


}
void funcs::iload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 3.
 */

    stack.pushInt(lvt[3].Int);


}
void funcs::iload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 4.
 */

    stack.pushInt(lvt[4].Int);


}
void funcs::istore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Int(stack.popInt());


}
void funcs::istore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Int(stack.popInt());


}
void funcs::istore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Int(stack.popInt());


}
void funcs::istore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Int(stack.popInt());


}
void funcs::istore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Int(stack.popInt());


}
void funcs::istore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Int(stack.popInt());


}
void funcs::icast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popInt()));


}
void funcs::iucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a + b);
    }


}
void funcs::iuadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushInt(a + b);
    }
    ;
}
void funcs::isub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a - b);
    }


}
void funcs::iusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushInt(a - b);
    }
    ;
}
void funcs::imul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a * b);
    }


}
void funcs::iumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushInt(a * b);
    }
    ;
}
void funcs::idiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a / b);
    }


}
void funcs::iudiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushInt(a / b);
    }
    ;
}
void funcs::icmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popInt()));


}
void funcs::iucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a + b);
    }


}
void funcs::iuadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushInt(a + b);
    }
    ;
}
void funcs::isub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a - b);
    }


}
void funcs::iusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushInt(a - b);
    }
    ;
}
void funcs::imul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a * b);
    }


}
void funcs::iumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushInt(a * b);
    }
    ;
}
void funcs::idiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a / b);
    }


}
void funcs::iudiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushInt(a / b);
    }
    ;
}
void funcs::icmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popInt()));


}
void funcs::iucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a + b);
    }


}
void funcs::iuadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushInt(a + b);
    }
    ;
}
void funcs::isub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a - b);
    }


}
void funcs::iusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushInt(a - b);
    }
    ;
}
void funcs::imul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a * b);
    }


}
void funcs::iumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushInt(a * b);
    }
    ;
}
void funcs::idiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a / b);
    }


}
void funcs::iudiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushInt(a / b);
    }
    ;
}
void funcs::icmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popInt()));


}
void funcs::iucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }


}
void funcs::iuadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::isub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }


}
void funcs::iusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::imul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }


}
void funcs::iumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::idiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }


}
void funcs::iudiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::icmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popInt()));


}
void funcs::iucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }


}
void funcs::iuadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::isub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }


}
void funcs::iusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::imul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }


}
void funcs::iumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::idiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }


}
void funcs::iudiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::icmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popInt()));


}
void funcs::iucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::iuadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::isub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::iusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::imul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::iumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::idiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::iudiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::icmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popInt()));


}
void funcs::iucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a + b);
    }


}
void funcs::iuadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a + b);
    }
    ;
}
void funcs::isub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a - b);
    }


}
void funcs::iusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a - b);
    }
    ;
}
void funcs::imul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a * b);
    }


}
void funcs::iumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a * b);
    }
    ;
}
void funcs::idiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a / b);
    }


}
void funcs::iudiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushInt(a / b);
    }
    ;
}
void funcs::icmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Float.
 */

    {
        int_32 b = stack.popInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Float.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popInt()));


}
void funcs::iucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a + b);
    }


}
void funcs::iuadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a + b);
    }
    ;
}
void funcs::isub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a - b);
    }


}
void funcs::iusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a - b);
    }
    ;
}
void funcs::imul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a * b);
    }


}
void funcs::iumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a * b);
    }
    ;
}
void funcs::idiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a / b);
    }


}
void funcs::iudiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushDouble(a / b);
    }
    ;
}
void funcs::icmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Double.
 */

    {
        int_32 b = stack.popInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Double.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popInt()));


}
void funcs::iucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }


}
void funcs::iuadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }
    ;
}
void funcs::isub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }


}
void funcs::iusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }
    ;
}
void funcs::imul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }


}
void funcs::iumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }
    ;
}
void funcs::idiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }


}
void funcs::iudiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }
    ;
}
void funcs::icmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type DoubleFloat.
 */

    {
        int_32 b = stack.popInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type DoubleFloat.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::icast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popInt()));


}
void funcs::iucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }


}
void funcs::iuadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }
    ;
}
void funcs::isub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }


}
void funcs::iusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }
    ;
}
void funcs::imul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }


}
void funcs::iumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }
    ;
}
void funcs::idiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }


}
void funcs::iudiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }
    ;
}
void funcs::icmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type DoubleDouble.
 */

    {
        int_32 b = stack.popInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type DoubleDouble.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::imod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a % b);
    }


}
void funcs::icast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popInt()));


}
void funcs::iucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }


}
void funcs::iuadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }
    ;
}
void funcs::isub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }


}
void funcs::iusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }
    ;
}
void funcs::imul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }


}
void funcs::iumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }
    ;
}
void funcs::idiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }


}
void funcs::iudiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }
    ;
}
void funcs::icmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Byte.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_8 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::iswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); int_32 b = stack.popInt(); stack.pushByte(a); stack.pushInt(b); }


}
void funcs::imod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a % b);
    }


}
void funcs::icast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popInt()));


}
void funcs::iucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }


}
void funcs::iuadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }
    ;
}
void funcs::isub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }


}
void funcs::iusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }
    ;
}
void funcs::imul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }


}
void funcs::iumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }
    ;
}
void funcs::idiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }


}
void funcs::iudiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }
    ;
}
void funcs::icmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Short.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_16 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::iswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); int_32 b = stack.popInt(); stack.pushShort(a); stack.pushInt(b); }


}
void funcs::imod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a % b);
    }


}
void funcs::icast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popInt()));


}
void funcs::iucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }


}
void funcs::iuadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a + b);
    }
    ;
}
void funcs::isub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }


}
void funcs::iusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a - b);
    }
    ;
}
void funcs::imul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }


}
void funcs::iumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a * b);
    }
    ;
}
void funcs::idiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }


}
void funcs::iudiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushUnsignedInt(a / b);
    }
    ;
}
void funcs::icmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Int.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_32 a = stack.popUnsignedInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::iswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); int_32 b = stack.popInt(); stack.pushInt(a); stack.pushInt(b); }


}
void funcs::imod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::icast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popInt()));


}
void funcs::iucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::iuadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::isub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::iusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::imul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::iumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::idiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::iudiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::icmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Long.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::iswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); int_32 b = stack.popInt(); stack.pushLong(a); stack.pushInt(b); }


}
void funcs::imod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::icast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popInt()));


}
void funcs::iucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::iuadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::isub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::iusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::imul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::iumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::idiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::iudiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::icmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type LongInt.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::iswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); int_32 b = stack.popInt(); stack.pushLongInt(a); stack.pushInt(b); }


}
void funcs::imod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::icast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popInt()));


}
void funcs::iucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedInt()));
    ;
}
void funcs::iadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::iuadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::isub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::iusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::imul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::iumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::idiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::iudiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::icmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::iucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::icmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::iucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::icmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::iucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::icmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::iucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::iucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::icmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::iucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type LongLong.
 */

    {
        uint_32 b = stack.popUnsignedInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::iswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); int_32 b = stack.popInt(); stack.pushLongLong(a); stack.pushInt(b); }


}
void funcs::iswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); int_32 b = stack.popInt(); stack.pushFloat(a); stack.pushInt(b); }


}
void funcs::iswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); int_32 b = stack.popInt(); stack.pushDouble(a); stack.pushInt(b); }


}
void funcs::iswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); int_32 b = stack.popInt(); stack.pushDoubleFloat(a); stack.pushInt(b); }


}
void funcs::iswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); int_32 b = stack.popInt(); stack.pushDoubleDouble(a); stack.pushInt(b); }


}
void funcs::iswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); int_32 b = stack.popInt(); stack.pushPointer(a); stack.pushInt(b); }


}
void funcs::iand_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a & b);
    }


}
void funcs::ior_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a | b);
    }


}
void funcs::ixor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a ^ b);
    }


}
void funcs::ishftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a >> b);
    }


}
void funcs::ishftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Byte.
 */

    {
        int_32 b = stack.popInt();
        int_8 a = stack.popByte();
        stack.pushInt(a << b);
    }


}
void funcs::iand_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a & b);
    }


}
void funcs::ior_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a | b);
    }


}
void funcs::ixor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a ^ b);
    }


}
void funcs::ishftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a >> b);
    }


}
void funcs::ishftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Short.
 */

    {
        int_32 b = stack.popInt();
        int_16 a = stack.popShort();
        stack.pushInt(a << b);
    }


}
void funcs::iand_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a & b);
    }


}
void funcs::ior_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a | b);
    }


}
void funcs::ixor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a ^ b);
    }


}
void funcs::ishftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a >> b);
    }


}
void funcs::ishftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Int.
 */

    {
        int_32 b = stack.popInt();
        int_32 a = stack.popInt();
        stack.pushInt(a << b);
    }


}
void funcs::iand_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a & b);
    }


}
void funcs::ior_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a | b);
    }


}
void funcs::ixor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a ^ b);
    }


}
void funcs::ishftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a >> b);
    }


}
void funcs::ishftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Long.
 */

    {
        int_32 b = stack.popInt();
        int_64 a = stack.popLong();
        stack.pushLong(a << b);
    }


}
void funcs::iand_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a & b);
    }


}
void funcs::ior_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a | b);
    }


}
void funcs::ixor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::ishftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a >> b);
    }


}
void funcs::ishftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type LongInt.
 */

    {
        int_32 b = stack.popInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a << b);
    }


}
void funcs::iand_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::ior_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::ixor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::ishftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::ishftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type LongLong.
 */

    {
        int_32 b = stack.popInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::idup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 on the stack.
 */

    stack.pushInt(stack.peekInt());


}
void funcs::idup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 2 times on the stack.
 */

    stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());


}
void funcs::idup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 3 times on the stack.
 */

    stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());


}
void funcs::idup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 4 times on the stack.
 */

    stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());


}
void funcs::idup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 5 times on the stack.
 */

    stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());


}
void funcs::iswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements.
 */

    { int_32 a = stack.popInt(); int_32 b = stack.popInt(); stack.pushInt(a); stack.pushInt(b); }


}
void funcs::irot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_32 elements.
 */

    { int_32 a = stack.popInt(); int_32 b = stack.popInt(); int_32 c = stack.popInt(); stack.pushInt(a); stack.pushInt(b); stack.pushInt(c); }


}
void funcs::iset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetInt(base, ops.getUnsignedInt(), stack.popInt());


}
void funcs::iget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_32 from a field on base pointer to stack.
 */

    stack.pushInt(MvM::accessMemoryAndGetInt(base, ops.getUnsignedInt()));


}
void funcs::ivset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetInt(base, ops.getUnsignedInt(), ops.getInt());


}
void funcs::isget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_32 from a field on base pointer to stack using address from stack.
 */

    stack.pushInt(MvM::accessMemoryAndGetInt(base, stack.popUnsignedInt()));


}
void funcs::isset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetInt(base, stack.popUnsignedInt(), stack.popInt());


}
void funcs::isetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetInt(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Int);


}
void funcs::iinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Int = lvt[point].Int + 1; }


}
void funcs::iinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Int = lvt[point].Int + 2; }


}
void funcs::istinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 1 on stack.
 */

    stack.pushInt(stack.popInt() + 1);


}
void funcs::istinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 2 on stack.
 */

    stack.pushInt(stack.popInt() + 2);


}
void funcs::ireturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_32 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushInt(stack.popInt()); return;


}
void funcs::imainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Int = stack_main.popInt();


}
void funcs::imainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 0.
 */

    lvt[0].Int = stack_main.popInt();;


}
void funcs::imainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 1.
 */

    lvt[1].Int = stack_main.popInt();;


}
void funcs::imainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 2.
 */

    lvt[2].Int = stack_main.popInt();;


}
void funcs::imainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 3.
 */

    lvt[3].Int = stack_main.popInt();;


}
void funcs::iprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_32 from stack.
 */

    MvM::log(std::to_string(stack.popInt()));


}
void funcs::iuprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_32 from stack.
 */

    MvM::log(std::to_string(stack.popUnsignedInt()));
    ;
}
void funcs::lconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack.
 */

    stack.pushLong(ops.getLong());


}
void funcs::lconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 0).
 */

    stack.pushLong(0);


}
void funcs::lconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 1).
 */

    stack.pushLong(1);


}
void funcs::lconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 2).
 */

    stack.pushLong(2);


}
void funcs::lconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 3).
 */

    stack.pushLong(3);


}
void funcs::lconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 4).
 */

    stack.pushLong(4);


}
void funcs::lconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 5).
 */

    stack.pushLong(5);


}
void funcs::lconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 6).
 */

    stack.pushLong(6);


}
void funcs::lconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 9).
 */

    stack.pushLong(9);


}
void funcs::lconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 10).
 */

    stack.pushLong(10);


}
void funcs::lconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 11).
 */

    stack.pushLong(11);


}
void funcs::lconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 12).
 */

    stack.pushLong(12);


}
void funcs::lload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable.
 */

    stack.pushLong(lvt[ops.getUnsignedShort()].Long);


}
void funcs::lload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 0.
 */

    stack.pushLong(lvt[0].Long);


}
void funcs::lload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 1.
 */

    stack.pushLong(lvt[1].Long);


}
void funcs::lload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 2.
 */

    stack.pushLong(lvt[2].Long);


}
void funcs::lload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 3.
 */

    stack.pushLong(lvt[3].Long);


}
void funcs::lload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 4.
 */

    stack.pushLong(lvt[4].Long);


}
void funcs::lstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Long(stack.popLong());


}
void funcs::lstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Long(stack.popLong());


}
void funcs::lstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Long(stack.popLong());


}
void funcs::lstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Long(stack.popLong());


}
void funcs::lstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Long(stack.popLong());


}
void funcs::lstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Long(stack.popLong());


}
void funcs::lcast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popLong()));


}
void funcs::lucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a + b);
    }


}
void funcs::luadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::lsub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a - b);
    }


}
void funcs::lusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::lmul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a * b);
    }


}
void funcs::lumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::ldiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a / b);
    }


}
void funcs::ludiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::lcmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popLong()));


}
void funcs::lucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a + b);
    }


}
void funcs::luadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::lsub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a - b);
    }


}
void funcs::lusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::lmul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a * b);
    }


}
void funcs::lumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::ldiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a / b);
    }


}
void funcs::ludiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::lcmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popLong()));


}
void funcs::lucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a + b);
    }


}
void funcs::luadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::lsub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a - b);
    }


}
void funcs::lusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::lmul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a * b);
    }


}
void funcs::lumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::ldiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a / b);
    }


}
void funcs::ludiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::lcmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popLong()));


}
void funcs::lucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }


}
void funcs::luadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::lsub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }


}
void funcs::lusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::lmul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }


}
void funcs::lumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::ldiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }


}
void funcs::ludiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::lcmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popLong()));


}
void funcs::lucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }


}
void funcs::luadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lsub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }


}
void funcs::lusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::lmul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }


}
void funcs::lumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::ldiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }


}
void funcs::ludiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::lcmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popLong()));


}
void funcs::lucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::luadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::lsub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::lusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::lmul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::lumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::ldiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::ludiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::lcmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popLong()));


}
void funcs::lucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a + b);
    }


}
void funcs::luadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::lsub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a - b);
    }


}
void funcs::lusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::lmul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a * b);
    }


}
void funcs::lumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::ldiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a / b);
    }


}
void funcs::ludiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::lcmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Float.
 */

    {
        int_64 b = stack.popLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Float.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popLong()));


}
void funcs::lucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a + b);
    }


}
void funcs::luadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a + b);
    }
    ;
}
void funcs::lsub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a - b);
    }


}
void funcs::lusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a - b);
    }
    ;
}
void funcs::lmul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a * b);
    }


}
void funcs::lumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a * b);
    }
    ;
}
void funcs::ldiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a / b);
    }


}
void funcs::ludiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushLong(a / b);
    }
    ;
}
void funcs::lcmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Double.
 */

    {
        int_64 b = stack.popLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Double.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popLong()));


}
void funcs::lucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }


}
void funcs::luadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a + b);
    }
    ;
}
void funcs::lsub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }


}
void funcs::lusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a - b);
    }
    ;
}
void funcs::lmul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }


}
void funcs::lumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a * b);
    }
    ;
}
void funcs::ldiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }


}
void funcs::ludiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushDoubleFloat(a / b);
    }
    ;
}
void funcs::lcmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type DoubleFloat.
 */

    {
        int_64 b = stack.popLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type DoubleFloat.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lcast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popLong()));


}
void funcs::lucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }


}
void funcs::luadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }
    ;
}
void funcs::lsub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }


}
void funcs::lusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }
    ;
}
void funcs::lmul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }


}
void funcs::lumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }
    ;
}
void funcs::ldiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }


}
void funcs::ludiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }
    ;
}
void funcs::lcmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type DoubleDouble.
 */

    {
        int_64 b = stack.popLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type DoubleDouble.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lmod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::lcast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popLong()));


}
void funcs::lucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::luadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::lsub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::lusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::lmul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::lumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::ldiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::ludiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::lcmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Byte.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_8 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); int_64 b = stack.popLong(); stack.pushByte(a); stack.pushLong(b); }


}
void funcs::lmod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::lcast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popLong()));


}
void funcs::lucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::luadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::lsub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::lusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::lmul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::lumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::ldiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::ludiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::lcmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Short.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_16 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); int_64 b = stack.popLong(); stack.pushShort(a); stack.pushLong(b); }


}
void funcs::lmod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::lcast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popLong()));


}
void funcs::lucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::luadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::lsub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::lusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::lmul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::lumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::ldiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::ludiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::lcmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Int.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_32 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); int_64 b = stack.popLong(); stack.pushInt(a); stack.pushLong(b); }


}
void funcs::lmod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a % b);
    }


}
void funcs::lcast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popLong()));


}
void funcs::lucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }


}
void funcs::luadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a + b);
    }
    ;
}
void funcs::lsub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }


}
void funcs::lusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a - b);
    }
    ;
}
void funcs::lmul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }


}
void funcs::lumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a * b);
    }
    ;
}
void funcs::ldiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }


}
void funcs::ludiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushUnsignedLong(a / b);
    }
    ;
}
void funcs::lcmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Long.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_64 a = stack.popUnsignedLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); int_64 b = stack.popLong(); stack.pushLong(a); stack.pushLong(b); }


}
void funcs::lmod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::lcast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popLong()));


}
void funcs::lucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::luadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::lsub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::lusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::lmul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::lumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::ldiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::ludiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::lcmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type LongInt.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); int_64 b = stack.popLong(); stack.pushLongInt(a); stack.pushLong(b); }


}
void funcs::lmod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::lcast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popLong()));


}
void funcs::lucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedLong()));
    ;
}
void funcs::ladd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::luadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::lsub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::lusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::lmul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::lumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::ldiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::ludiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::lcmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::lucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::lucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::lucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::lcmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::lucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::lucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::lcmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::lucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type LongLong.
 */

    {
        uint_64 b = stack.popUnsignedLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::lswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); int_64 b = stack.popLong(); stack.pushLongLong(a); stack.pushLong(b); }


}
void funcs::lswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); int_64 b = stack.popLong(); stack.pushFloat(a); stack.pushLong(b); }


}
void funcs::lswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); int_64 b = stack.popLong(); stack.pushDouble(a); stack.pushLong(b); }


}
void funcs::lswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); int_64 b = stack.popLong(); stack.pushDoubleFloat(a); stack.pushLong(b); }


}
void funcs::lswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); int_64 b = stack.popLong(); stack.pushDoubleDouble(a); stack.pushLong(b); }


}
void funcs::lswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); int_64 b = stack.popLong(); stack.pushPointer(a); stack.pushLong(b); }


}
void funcs::land_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a & b);
    }


}
void funcs::lor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a | b);
    }


}
void funcs::lxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a ^ b);
    }


}
void funcs::lshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a >> b);
    }


}
void funcs::lshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Byte.
 */

    {
        int_64 b = stack.popLong();
        int_8 a = stack.popByte();
        stack.pushLong(a << b);
    }


}
void funcs::land_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a & b);
    }


}
void funcs::lor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a | b);
    }


}
void funcs::lxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a ^ b);
    }


}
void funcs::lshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a >> b);
    }


}
void funcs::lshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Short.
 */

    {
        int_64 b = stack.popLong();
        int_16 a = stack.popShort();
        stack.pushLong(a << b);
    }


}
void funcs::land_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a & b);
    }


}
void funcs::lor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a | b);
    }


}
void funcs::lxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a ^ b);
    }


}
void funcs::lshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a >> b);
    }


}
void funcs::lshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Int.
 */

    {
        int_64 b = stack.popLong();
        int_32 a = stack.popInt();
        stack.pushLong(a << b);
    }


}
void funcs::land_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a & b);
    }


}
void funcs::lor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a | b);
    }


}
void funcs::lxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a ^ b);
    }


}
void funcs::lshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a >> b);
    }


}
void funcs::lshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Long.
 */

    {
        int_64 b = stack.popLong();
        int_64 a = stack.popLong();
        stack.pushLong(a << b);
    }


}
void funcs::land_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a & b);
    }


}
void funcs::lor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a | b);
    }


}
void funcs::lxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::lshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a >> b);
    }


}
void funcs::lshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type LongInt.
 */

    {
        int_64 b = stack.popLong();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a << b);
    }


}
void funcs::land_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::lor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::lxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::lshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::lshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type LongLong.
 */

    {
        int_64 b = stack.popLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::ldup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 on the stack.
 */

    stack.pushLong(stack.peekLong());


}
void funcs::ldup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 2 times on the stack.
 */

    stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());


}
void funcs::ldup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 3 times on the stack.
 */

    stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());


}
void funcs::ldup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 4 times on the stack.
 */

    stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());


}
void funcs::ldup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 5 times on the stack.
 */

    stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());


}
void funcs::lswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements.
 */

    { int_64 a = stack.popLong(); int_64 b = stack.popLong(); stack.pushLong(a); stack.pushLong(b); }


}
void funcs::lrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_64 elements.
 */

    { int_64 a = stack.popLong(); int_64 b = stack.popLong(); int_64 c = stack.popLong(); stack.pushLong(a); stack.pushLong(b); stack.pushLong(c); }


}
void funcs::lset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetLong(base, ops.getUnsignedInt(), stack.popLong());


}
void funcs::lget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_64 from a field on base pointer to stack.
 */

    stack.pushLong(MvM::accessMemoryAndGetLong(base, ops.getUnsignedInt()));


}
void funcs::lvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetLong(base, ops.getUnsignedInt(), ops.getLong());


}
void funcs::lsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_64 from a field on base pointer to stack using address from stack.
 */

    stack.pushLong(MvM::accessMemoryAndGetLong(base, stack.popUnsignedInt()));


}
void funcs::lsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetLong(base, stack.popUnsignedInt(), stack.popLong());


}
void funcs::lsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetLong(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Long);


}
void funcs::linc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Long = lvt[point].Long + 1; }


}
void funcs::linc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Long = lvt[point].Long + 2; }


}
void funcs::lstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 1 on stack.
 */

    stack.pushLong(stack.popLong() + 1);


}
void funcs::lstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 2 on stack.
 */

    stack.pushLong(stack.popLong() + 2);


}
void funcs::lreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_64 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushLong(stack.popLong()); return;


}
void funcs::lmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Long = stack_main.popLong();


}
void funcs::lmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 0.
 */

    lvt[0].Long = stack_main.popLong();;


}
void funcs::lmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 1.
 */

    lvt[1].Long = stack_main.popLong();;


}
void funcs::lmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 2.
 */

    lvt[2].Long = stack_main.popLong();;


}
void funcs::lmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 3.
 */

    lvt[3].Long = stack_main.popLong();;


}
void funcs::lprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_64 from stack.
 */

    MvM::log(std::to_string(stack.popLong()));


}
void funcs::luprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_64 from stack.
 */

    MvM::log(std::to_string(stack.popUnsignedLong()));
    ;
}
void funcs::liconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack.
 */

    stack.pushLongInt(ops.getLongInt());


}
void funcs::liconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 0).
 */

    stack.pushLongInt(0);


}
void funcs::liconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 1).
 */

    stack.pushLongInt(1);


}
void funcs::liconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 2).
 */

    stack.pushLongInt(2);


}
void funcs::liconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 3).
 */

    stack.pushLongInt(3);


}
void funcs::liconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 4).
 */

    stack.pushLongInt(4);


}
void funcs::liconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 5).
 */

    stack.pushLongInt(5);


}
void funcs::liconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 6).
 */

    stack.pushLongInt(6);


}
void funcs::liconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 9).
 */

    stack.pushLongInt(9);


}
void funcs::liconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 10).
 */

    stack.pushLongInt(10);


}
void funcs::liconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 11).
 */

    stack.pushLongInt(11);


}
void funcs::liconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 12).
 */

    stack.pushLongInt(12);


}
void funcs::liload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable.
 */

    stack.pushLongInt(lvt[ops.getUnsignedShort()].LongInt);


}
void funcs::liload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 0.
 */

    stack.pushLongInt(lvt[0].LongInt);


}
void funcs::liload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 1.
 */

    stack.pushLongInt(lvt[1].LongInt);


}
void funcs::liload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 2.
 */

    stack.pushLongInt(lvt[2].LongInt);


}
void funcs::liload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 3.
 */

    stack.pushLongInt(lvt[3].LongInt);


}
void funcs::liload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 4.
 */

    stack.pushLongInt(lvt[4].LongInt);


}
void funcs::listore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_LongInt(stack.popLongInt());


}
void funcs::listore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_LongInt(stack.popLongInt());


}
void funcs::listore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_LongInt(stack.popLongInt());


}
void funcs::listore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_LongInt(stack.popLongInt());


}
void funcs::listore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_LongInt(stack.popLongInt());


}
void funcs::listore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_LongInt(stack.popLongInt());


}
void funcs::licast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popLongInt()));


}
void funcs::liucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popLongInt()));


}
void funcs::liucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popLongInt()));


}
void funcs::liucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popLongInt()));


}
void funcs::liucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popLongInt()));


}
void funcs::liucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popLongInt()));


}
void funcs::liucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::liuadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::lisub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::liusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::limul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::liumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lidiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::liudiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::licmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popLongInt()));


}
void funcs::liucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Float.
 */

    {
        int_128 b = stack.popLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Float.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popLongInt()));


}
void funcs::liucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Double.
 */

    {
        int_128 b = stack.popLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Double.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popLongInt()));


}
void funcs::liucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a + b);
    }


}
void funcs::liuadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a + b);
    }
    ;
}
void funcs::lisub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a - b);
    }


}
void funcs::liusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a - b);
    }
    ;
}
void funcs::limul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a * b);
    }


}
void funcs::liumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a * b);
    }
    ;
}
void funcs::lidiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a / b);
    }


}
void funcs::liudiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongInt(a / b);
    }
    ;
}
void funcs::licmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type DoubleFloat.
 */

    {
        int_128 b = stack.popLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type DoubleFloat.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::licast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popLongInt()));


}
void funcs::liucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }


}
void funcs::liuadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a + b);
    }
    ;
}
void funcs::lisub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }


}
void funcs::liusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a - b);
    }
    ;
}
void funcs::limul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }


}
void funcs::liumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a * b);
    }
    ;
}
void funcs::lidiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }


}
void funcs::liudiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushDoubleDouble(a / b);
    }
    ;
}
void funcs::licmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type DoubleDouble.
 */

    {
        int_128 b = stack.popLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type DoubleDouble.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::limod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::licast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popLongInt()));


}
void funcs::liucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::liuadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::lisub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::liusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::limul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::liumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::lidiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::liudiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::licmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Byte.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_8 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::liswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); int_128 b = stack.popLongInt(); stack.pushByte(a); stack.pushLongInt(b); }


}
void funcs::limod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::licast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popLongInt()));


}
void funcs::liucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::liuadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::lisub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::liusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::limul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::liumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::lidiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::liudiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::licmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Short.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_16 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::liswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); int_128 b = stack.popLongInt(); stack.pushShort(a); stack.pushLongInt(b); }


}
void funcs::limod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::licast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popLongInt()));


}
void funcs::liucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::liuadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::lisub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::liusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::limul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::liumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::lidiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::liudiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::licmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Int.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_32 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::liswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); int_128 b = stack.popLongInt(); stack.pushInt(a); stack.pushLongInt(b); }


}
void funcs::limod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::licast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popLongInt()));


}
void funcs::liucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::liuadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::lisub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::liusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::limul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::liumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::lidiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::liudiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::licmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Long.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_64 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::liswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); int_128 b = stack.popLongInt(); stack.pushLong(a); stack.pushLongInt(b); }


}
void funcs::limod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a % b);
    }


}
void funcs::licast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popLongInt()));


}
void funcs::liucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }


}
void funcs::liuadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a + b);
    }
    ;
}
void funcs::lisub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }


}
void funcs::liusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a - b);
    }
    ;
}
void funcs::limul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }


}
void funcs::liumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a * b);
    }
    ;
}
void funcs::lidiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }


}
void funcs::liudiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushUnsignedLongInt(a / b);
    }
    ;
}
void funcs::licmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type LongInt.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_128 a = stack.popUnsignedLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::liswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); int_128 b = stack.popLongInt(); stack.pushLongInt(a); stack.pushLongInt(b); }


}
void funcs::limod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::licast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popLongInt()));


}
void funcs::liucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedLongInt()));
    ;
}
void funcs::liadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::liuadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::lisub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::liusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::limul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::liumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lidiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::liudiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::licmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::liucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::licmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::liucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::licmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::liucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::licmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::liucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::liucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::licmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::liucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type LongLong.
 */

    {
        uint_128 b = stack.popUnsignedLongInt();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::liswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); int_128 b = stack.popLongInt(); stack.pushLongLong(a); stack.pushLongInt(b); }


}
void funcs::liswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); int_128 b = stack.popLongInt(); stack.pushFloat(a); stack.pushLongInt(b); }


}
void funcs::liswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); int_128 b = stack.popLongInt(); stack.pushDouble(a); stack.pushLongInt(b); }


}
void funcs::liswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); int_128 b = stack.popLongInt(); stack.pushDoubleFloat(a); stack.pushLongInt(b); }


}
void funcs::liswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); int_128 b = stack.popLongInt(); stack.pushDoubleDouble(a); stack.pushLongInt(b); }


}
void funcs::liswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); int_128 b = stack.popLongInt(); stack.pushPointer(a); stack.pushLongInt(b); }


}
void funcs::liand_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a & b);
    }


}
void funcs::lior_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a | b);
    }


}
void funcs::lixor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::lishftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a >> b);
    }


}
void funcs::lishftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Byte.
 */

    {
        int_128 b = stack.popLongInt();
        int_8 a = stack.popByte();
        stack.pushLongInt(a << b);
    }


}
void funcs::liand_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a & b);
    }


}
void funcs::lior_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a | b);
    }


}
void funcs::lixor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::lishftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a >> b);
    }


}
void funcs::lishftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Short.
 */

    {
        int_128 b = stack.popLongInt();
        int_16 a = stack.popShort();
        stack.pushLongInt(a << b);
    }


}
void funcs::liand_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a & b);
    }


}
void funcs::lior_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a | b);
    }


}
void funcs::lixor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::lishftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a >> b);
    }


}
void funcs::lishftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Int.
 */

    {
        int_128 b = stack.popLongInt();
        int_32 a = stack.popInt();
        stack.pushLongInt(a << b);
    }


}
void funcs::liand_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a & b);
    }


}
void funcs::lior_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a | b);
    }


}
void funcs::lixor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::lishftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a >> b);
    }


}
void funcs::lishftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Long.
 */

    {
        int_128 b = stack.popLongInt();
        int_64 a = stack.popLong();
        stack.pushLongInt(a << b);
    }


}
void funcs::liand_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a & b);
    }


}
void funcs::lior_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a | b);
    }


}
void funcs::lixor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a ^ b);
    }


}
void funcs::lishftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a >> b);
    }


}
void funcs::lishftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type LongInt.
 */

    {
        int_128 b = stack.popLongInt();
        int_128 a = stack.popLongInt();
        stack.pushLongInt(a << b);
    }


}
void funcs::liand_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::lior_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::lixor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::lishftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::lishftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type LongLong.
 */

    {
        int_128 b = stack.popLongInt();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::lidup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 on the stack.
 */

    stack.pushLongInt(stack.peekLongInt());


}
void funcs::lidup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 2 times on the stack.
 */

    stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());


}
void funcs::lidup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 3 times on the stack.
 */

    stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());


}
void funcs::lidup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 4 times on the stack.
 */

    stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());


}
void funcs::lidup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 5 times on the stack.
 */

    stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());


}
void funcs::liswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements.
 */

    { int_128 a = stack.popLongInt(); int_128 b = stack.popLongInt(); stack.pushLongInt(a); stack.pushLongInt(b); }


}
void funcs::lirot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_128 elements.
 */

    { int_128 a = stack.popLongInt(); int_128 b = stack.popLongInt(); int_128 c = stack.popLongInt(); stack.pushLongInt(a); stack.pushLongInt(b); stack.pushLongInt(c); }


}
void funcs::liset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetLongInt(base, ops.getUnsignedInt(), stack.popLongInt());


}
void funcs::liget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_128 from a field on base pointer to stack.
 */

    stack.pushLongInt(MvM::accessMemoryAndGetLongInt(base, ops.getUnsignedInt()));


}
void funcs::livset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetLongInt(base, ops.getUnsignedInt(), ops.getLongInt());


}
void funcs::lisget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_128 from a field on base pointer to stack using address from stack.
 */

    stack.pushLongInt(MvM::accessMemoryAndGetLongInt(base, stack.popUnsignedInt()));


}
void funcs::lisset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetLongInt(base, stack.popUnsignedInt(), stack.popLongInt());


}
void funcs::lisetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetLongInt(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].LongInt);


}
void funcs::liinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].LongInt = lvt[point].LongInt + 1; }


}
void funcs::liinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].LongInt = lvt[point].LongInt + 2; }


}
void funcs::listinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 1 on stack.
 */

    stack.pushLongInt(stack.popLongInt() + 1);


}
void funcs::listinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 2 on stack.
 */

    stack.pushLongInt(stack.popLongInt() + 2);


}
void funcs::lireturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_128 into the main stack.
 */
    ops.address = ops.length;;
    stack_main.pushLongInt(stack.popLongInt()); return;


}
void funcs::limainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].LongInt = stack_main.popLongInt();


}
void funcs::limainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 0.
 */

    lvt[0].LongInt = stack_main.popLongInt();;


}
void funcs::limainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 1.
 */

    lvt[1].LongInt = stack_main.popLongInt();;


}
void funcs::limainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 2.
 */

    lvt[2].LongInt = stack_main.popLongInt();;


}
void funcs::limainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 3.
 */

    lvt[3].LongInt = stack_main.popLongInt();;


}
void funcs::liprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_128 from stack.
 */

    MvM::log(std::to_string(stack.popLongInt()));


}
void funcs::liuprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_128 from stack.
 */

    MvM::log(std::to_string(stack.popUnsignedLongInt()));
    ;
}
void funcs::llconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack.
 */

    stack.pushLongLong(ops.getLongLong());


}
void funcs::llconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 0).
 */

    stack.pushLongLong(0);


}
void funcs::llconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 1).
 */

    stack.pushLongLong(1);


}
void funcs::llconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 2).
 */

    stack.pushLongLong(2);


}
void funcs::llconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 3).
 */

    stack.pushLongLong(3);


}
void funcs::llconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 4).
 */

    stack.pushLongLong(4);


}
void funcs::llconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 5).
 */

    stack.pushLongLong(5);


}
void funcs::llconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 6).
 */

    stack.pushLongLong(6);


}
void funcs::llconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 9).
 */

    stack.pushLongLong(9);


}
void funcs::llconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 10).
 */

    stack.pushLongLong(10);


}
void funcs::llconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 11).
 */

    stack.pushLongLong(11);


}
void funcs::llconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 12).
 */

    stack.pushLongLong(12);


}
void funcs::llload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable.
 */

    stack.pushLongLong(lvt[ops.getUnsignedShort()].LongLong);


}
void funcs::llload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 0.
 */

    stack.pushLongLong(lvt[0].LongLong);


}
void funcs::llload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 1.
 */

    stack.pushLongLong(lvt[1].LongLong);


}
void funcs::llload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 2.
 */

    stack.pushLongLong(lvt[2].LongLong);


}
void funcs::llload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 3.
 */

    stack.pushLongLong(lvt[3].LongLong);


}
void funcs::llload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 4.
 */

    stack.pushLongLong(lvt[4].LongLong);


}
void funcs::llstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_LongLong(stack.popLongLong());


}
void funcs::llstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_LongLong(stack.popLongLong());


}
void funcs::llstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_LongLong(stack.popLongLong());


}
void funcs::llstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_LongLong(stack.popLongLong());


}
void funcs::llstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_LongLong(stack.popLongLong());


}
void funcs::llstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_LongLong(stack.popLongLong());


}
void funcs::llcast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popLongLong()));


}
void funcs::llucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Byte.
 */

    stack.pushByte(static_cast<int_8> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popByte();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popLongLong()));


}
void funcs::llucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Short.
 */

    stack.pushShort(static_cast<int_16> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popShort();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popLongLong()));


}
void funcs::llucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Int.
 */

    stack.pushInt(static_cast<int_32> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popLongLong()));


}
void funcs::llucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Long.
 */

    stack.pushLong(static_cast<int_64> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popLongLong()));


}
void funcs::llucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type LongInt.
 */

    stack.pushLongInt(static_cast<int_128> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popLongInt();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popLongLong()));


}
void funcs::llucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type LongLong.
 */

    stack.pushLongLong(static_cast<int_256> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popLongLong()));


}
void funcs::llucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Float.
 */

    stack.pushFloat(static_cast<flt_32> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Float.
 */

    {
        int_256 b = stack.popLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Float.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_32 a = stack.popFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popLongLong()));


}
void funcs::llucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Double.
 */

    stack.pushDouble(static_cast<flt_64> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Double.
 */

    {
        int_256 b = stack.popLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Double.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_64 a = stack.popDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popLongLong()));


}
void funcs::llucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type DoubleFloat.
 */

    stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type DoubleFloat.
 */

    {
        int_256 b = stack.popLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type DoubleFloat.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_128 a = stack.popDoubleFloat();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llcast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popLongLong()));


}
void funcs::llucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type DoubleDouble.
 */

    stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a + b);
    }


}
void funcs::lluadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a + b);
    }
    ;
}
void funcs::llsub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a - b);
    }


}
void funcs::llusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a - b);
    }
    ;
}
void funcs::llmul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a * b);
    }


}
void funcs::llumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a * b);
    }
    ;
}
void funcs::lldiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a / b);
    }


}
void funcs::lludiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type DoubleDouble.
 */

    {
        int_256 b = stack.popLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type DoubleDouble.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        flt_256 a = stack.popDoubleDouble();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llmod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::llcast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popLongLong()));


}
void funcs::llucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Byte.
 */

    stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::lluadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::llsub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::llusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::llmul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::llumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lldiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::lludiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Byte.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_8 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); int_256 b = stack.popLongLong(); stack.pushByte(a); stack.pushLongLong(b); }


}
void funcs::llmod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::llcast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popLongLong()));


}
void funcs::llucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Short.
 */

    stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::lluadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::llsub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::llusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::llmul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::llumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lldiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::lludiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Short.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_16 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); int_256 b = stack.popLongLong(); stack.pushShort(a); stack.pushLongLong(b); }


}
void funcs::llmod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::llcast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popLongLong()));


}
void funcs::llucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Int.
 */

    stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::lluadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::llsub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::llusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::llmul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::llumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lldiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::lludiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Int.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_32 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); int_256 b = stack.popLongLong(); stack.pushInt(a); stack.pushLongLong(b); }


}
void funcs::llmod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::llcast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popLongLong()));


}
void funcs::llucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Long.
 */

    stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::lluadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::llsub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::llusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::llmul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::llumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lldiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::lludiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Long.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_64 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); int_256 b = stack.popLongLong(); stack.pushLong(a); stack.pushLongLong(b); }


}
void funcs::llmod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::llcast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popLongLong()));


}
void funcs::llucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type LongInt.
 */

    stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::lluadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::llsub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::llusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::llmul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::llumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lldiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::lludiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type LongInt.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_128 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); int_256 b = stack.popLongLong(); stack.pushLongInt(a); stack.pushLongLong(b); }


}
void funcs::llmod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a % b);
    }


}
void funcs::llcast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popLongLong()));


}
void funcs::llucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type LongLong.
 */

    stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedLongLong()));
    ;
}
void funcs::lladd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }


}
void funcs::lluadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a + b);
    }
    ;
}
void funcs::llsub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }


}
void funcs::llusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a - b);
    }
    ;
}
void funcs::llmul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }


}
void funcs::llumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a * b);
    }
    ;
}
void funcs::lldiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }


}
void funcs::lludiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushUnsignedLongLong(a / b);
    }
    ;
}
void funcs::llcmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }


}
void funcs::llucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a < b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }


}
void funcs::llucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a > b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }


}
void funcs::llucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a == b) ? 1 : 0);
    }
    ;
}
void funcs::llcmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }


}
void funcs::llucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a <= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }


}
void funcs::llucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a >= b) ? 1 : 0);
    }
    ;
}
void funcs::llcmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }


}
void funcs::llucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type LongLong.
 */

    {
        uint_256 b = stack.popUnsignedLongLong();
        int_256 a = stack.popUnsignedLongLong();
        stack.pushByte((a != b) ? 1 : 0);
    }
    ;
}
void funcs::llswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); int_256 b = stack.popLongLong(); stack.pushLongLong(a); stack.pushLongLong(b); }


}
void funcs::llswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); int_256 b = stack.popLongLong(); stack.pushFloat(a); stack.pushLongLong(b); }


}
void funcs::llswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); int_256 b = stack.popLongLong(); stack.pushDouble(a); stack.pushLongLong(b); }


}
void funcs::llswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); int_256 b = stack.popLongLong(); stack.pushDoubleFloat(a); stack.pushLongLong(b); }


}
void funcs::llswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); int_256 b = stack.popLongLong(); stack.pushDoubleDouble(a); stack.pushLongLong(b); }


}
void funcs::llswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); int_256 b = stack.popLongLong(); stack.pushPointer(a); stack.pushLongLong(b); }


}
void funcs::lland_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a & b);
    }


}
void funcs::llor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a | b);
    }


}
void funcs::llxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::llshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a >> b);
    }


}
void funcs::llshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Byte.
 */

    {
        int_256 b = stack.popLongLong();
        int_8 a = stack.popByte();
        stack.pushLongLong(a << b);
    }


}
void funcs::lland_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a & b);
    }


}
void funcs::llor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a | b);
    }


}
void funcs::llxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::llshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a >> b);
    }


}
void funcs::llshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Short.
 */

    {
        int_256 b = stack.popLongLong();
        int_16 a = stack.popShort();
        stack.pushLongLong(a << b);
    }


}
void funcs::lland_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a & b);
    }


}
void funcs::llor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a | b);
    }


}
void funcs::llxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::llshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a >> b);
    }


}
void funcs::llshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Int.
 */

    {
        int_256 b = stack.popLongLong();
        int_32 a = stack.popInt();
        stack.pushLongLong(a << b);
    }


}
void funcs::lland_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::llor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::llxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::llshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::llshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Long.
 */

    {
        int_256 b = stack.popLongLong();
        int_64 a = stack.popLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::lland_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a & b);
    }


}
void funcs::llor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a | b);
    }


}
void funcs::llxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::llshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a >> b);
    }


}
void funcs::llshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type LongInt.
 */

    {
        int_256 b = stack.popLongLong();
        int_128 a = stack.popLongInt();
        stack.pushLongLong(a << b);
    }


}
void funcs::lland_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a & b);
    }


}
void funcs::llor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a | b);
    }


}
void funcs::llxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a ^ b);
    }


}
void funcs::llshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a >> b);
    }


}
void funcs::llshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type LongLong.
 */

    {
        int_256 b = stack.popLongLong();
        int_256 a = stack.popLongLong();
        stack.pushLongLong(a << b);
    }


}
void funcs::lldup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 on the stack.
 */

    stack.pushLongLong(stack.peekLongLong());


}
void funcs::lldup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 2 times on the stack.
 */

    stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());


}
void funcs::lldup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 3 times on the stack.
 */

    stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());


}
void funcs::lldup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 4 times on the stack.
 */

    stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());


}
void funcs::lldup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 5 times on the stack.
 */

    stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());


}
void funcs::llswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements.
 */

    { int_256 a = stack.popLongLong(); int_256 b = stack.popLongLong(); stack.pushLongLong(a); stack.pushLongLong(b); }


}
void funcs::llrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_256 elements.
 */

    { int_256 a = stack.popLongLong(); int_256 b = stack.popLongLong(); int_256 c = stack.popLongLong(); stack.pushLongLong(a); stack.pushLongLong(b); stack.pushLongLong(c); }


}
void funcs::llset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetLongLong(base, ops.getUnsignedInt(), stack.popLongLong());


}
void funcs::llget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_256 from a field on base pointer to stack.
 */

    stack.pushLongLong(MvM::accessMemoryAndGetLongLong(base, ops.getUnsignedInt()));


}
void funcs::llvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetLongLong(base, ops.getUnsignedInt(), ops.getLongLong());


}
void funcs::llsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_256 from a field on base pointer to stack using address from stack.
 */

    stack.pushLongLong(MvM::accessMemoryAndGetLongLong(base, stack.popUnsignedInt()));


}
void funcs::llsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetLongLong(base, stack.popUnsignedInt(), stack.popLongLong());


}
void funcs::llsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetLongLong(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].LongLong);


}
void funcs::llinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].LongLong = lvt[point].LongLong + 1; }


}
void funcs::llinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].LongLong = lvt[point].LongLong + 2; }


}
void funcs::llstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 1 on stack.
 */

    stack.pushLongLong(stack.popLongLong() + 1);


}
void funcs::llstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 2 on stack.
 */

    stack.pushLongLong(stack.popLongLong() + 2);


}
void funcs::llreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_256 into the main stack.
 */
    ops.address = ops.length;;
    stack_main.pushLongLong(stack.popLongLong()); return;


}
void funcs::llmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].LongLong = stack_main.popLongLong();


}
void funcs::llmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 0.
 */

    lvt[0].LongLong = stack_main.popLongLong();;


}
void funcs::llmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 1.
 */

    lvt[1].LongLong = stack_main.popLongLong();;


}
void funcs::llmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 2.
 */

    lvt[2].LongLong = stack_main.popLongLong();;


}
void funcs::llmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 3.
 */

    lvt[3].LongLong = stack_main.popLongLong();;


}
void funcs::llprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_256 from stack.
 */

    MvM::log(std::to_string(stack.popLongLong()));


}
void funcs::lluprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_256 from stack.
 */

    MvM::log(std::to_string(stack.popUnsignedLongLong()));
    ;
}
void funcs::fconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_32 into the stack.
 */

    stack.pushFloat(ops.getFloat());


}
void funcs::fconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_32 into the stack (value = 0).
 */

    stack.pushFloat(0);


}
void funcs::fload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable.
 */

    stack.pushFloat(lvt[ops.getUnsignedShort()].Float);


}
void funcs::fload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 0.
 */

    stack.pushFloat(lvt[0].Float);


}
void funcs::fload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 1.
 */

    stack.pushFloat(lvt[1].Float);


}
void funcs::fload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 2.
 */

    stack.pushFloat(lvt[2].Float);


}
void funcs::fload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 3.
 */

    stack.pushFloat(lvt[3].Float);


}
void funcs::fload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 4.
 */

    stack.pushFloat(lvt[4].Float);


}
void funcs::fstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Float(stack.popFloat());


}
void funcs::fstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Float(stack.popFloat());


}
void funcs::fstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Float(stack.popFloat());


}
void funcs::fstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Float(stack.popFloat());


}
void funcs::fstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Float(stack.popFloat());


}
void funcs::fstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Float(stack.popFloat());


}
void funcs::fswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); flt_32 b = stack.popFloat(); stack.pushByte(a); stack.pushFloat(b); }


}
void funcs::fswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); flt_32 b = stack.popFloat(); stack.pushShort(a); stack.pushFloat(b); }


}
void funcs::fswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); flt_32 b = stack.popFloat(); stack.pushInt(a); stack.pushFloat(b); }


}
void funcs::fswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); flt_32 b = stack.popFloat(); stack.pushLong(a); stack.pushFloat(b); }


}
void funcs::fswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); flt_32 b = stack.popFloat(); stack.pushLongInt(a); stack.pushFloat(b); }


}
void funcs::fswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); flt_32 b = stack.popFloat(); stack.pushLongLong(a); stack.pushFloat(b); }


}
void funcs::fswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); flt_32 b = stack.popFloat(); stack.pushFloat(a); stack.pushFloat(b); }


}
void funcs::fswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); flt_32 b = stack.popFloat(); stack.pushDouble(a); stack.pushFloat(b); }


}
void funcs::fswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); flt_32 b = stack.popFloat(); stack.pushDoubleFloat(a); stack.pushFloat(b); }


}
void funcs::fswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); flt_32 b = stack.popFloat(); stack.pushDoubleDouble(a); stack.pushFloat(b); }


}
void funcs::fswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); flt_32 b = stack.popFloat(); stack.pushPointer(a); stack.pushFloat(b); }


}
void funcs::fdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 on the stack.
 */

    stack.pushFloat(stack.peekFloat());


}
void funcs::fdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 2 times on the stack.
 */

    stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());


}
void funcs::fdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 3 times on the stack.
 */

    stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());


}
void funcs::fdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 4 times on the stack.
 */

    stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());


}
void funcs::fdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 5 times on the stack.
 */

    stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());


}
void funcs::fswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements.
 */

    { flt_32 a = stack.popFloat(); flt_32 b = stack.popFloat(); stack.pushFloat(a); stack.pushFloat(b); }


}
void funcs::frot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_32 elements.
 */

    { flt_32 a = stack.popFloat(); flt_32 b = stack.popFloat(); flt_32 c = stack.popFloat(); stack.pushFloat(a); stack.pushFloat(b); stack.pushFloat(c); }


}
void funcs::fset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetFloat(base, ops.getUnsignedInt(), stack.popFloat());


}
void funcs::fget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_32 from a field on base pointer to stack.
 */

    stack.pushFloat(MvM::accessMemoryAndGetFloat(base, ops.getUnsignedInt()));


}
void funcs::fvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetFloat(base, ops.getUnsignedInt(), ops.getFloat());


}
void funcs::fsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_32 from a field on base pointer to stack using address from stack.
 */

    stack.pushFloat(MvM::accessMemoryAndGetFloat(base, stack.popUnsignedInt()));


}
void funcs::fsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetFloat(base, stack.popUnsignedInt(), stack.popFloat());


}
void funcs::fsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetFloat(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Float);


}
void funcs::finc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Float = lvt[point].Float + 1; }


}
void funcs::finc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Float = lvt[point].Float + 2; }


}
void funcs::fstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 1 on stack.
 */

    stack.pushFloat(stack.popFloat() + 1);


}
void funcs::fstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 2 on stack.
 */

    stack.pushFloat(stack.popFloat() + 2);


}
void funcs::freturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_32 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushFloat(stack.popFloat()); return;


}
void funcs::fmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Float = stack_main.popFloat();


}
void funcs::fmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 0.
 */

    lvt[0].Float = stack_main.popFloat();;


}
void funcs::fmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 1.
 */

    lvt[1].Float = stack_main.popFloat();;


}
void funcs::fmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 2.
 */

    lvt[2].Float = stack_main.popFloat();;


}
void funcs::fmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 3.
 */

    lvt[3].Float = stack_main.popFloat();;


}
void funcs::dconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_64 into the stack.
 */

    stack.pushDouble(ops.getDouble());


}
void funcs::dconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_64 into the stack (value = 0).
 */

    stack.pushDouble(0);


}
void funcs::dload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable.
 */

    stack.pushDouble(lvt[ops.getUnsignedShort()].Double);


}
void funcs::dload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 0.
 */

    stack.pushDouble(lvt[0].Double);


}
void funcs::dload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 1.
 */

    stack.pushDouble(lvt[1].Double);


}
void funcs::dload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 2.
 */

    stack.pushDouble(lvt[2].Double);


}
void funcs::dload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 3.
 */

    stack.pushDouble(lvt[3].Double);


}
void funcs::dload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 4.
 */

    stack.pushDouble(lvt[4].Double);


}
void funcs::dstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Double(stack.popDouble());


}
void funcs::dstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Double(stack.popDouble());


}
void funcs::dstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Double(stack.popDouble());


}
void funcs::dstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Double(stack.popDouble());


}
void funcs::dstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Double(stack.popDouble());


}
void funcs::dstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Double(stack.popDouble());


}
void funcs::dswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); flt_64 b = stack.popDouble(); stack.pushByte(a); stack.pushDouble(b); }


}
void funcs::dswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); flt_64 b = stack.popDouble(); stack.pushShort(a); stack.pushDouble(b); }


}
void funcs::dswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); flt_64 b = stack.popDouble(); stack.pushInt(a); stack.pushDouble(b); }


}
void funcs::dswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); flt_64 b = stack.popDouble(); stack.pushLong(a); stack.pushDouble(b); }


}
void funcs::dswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); flt_64 b = stack.popDouble(); stack.pushLongInt(a); stack.pushDouble(b); }


}
void funcs::dswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); flt_64 b = stack.popDouble(); stack.pushLongLong(a); stack.pushDouble(b); }


}
void funcs::dswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); flt_64 b = stack.popDouble(); stack.pushFloat(a); stack.pushDouble(b); }


}
void funcs::dswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); flt_64 b = stack.popDouble(); stack.pushDouble(a); stack.pushDouble(b); }


}
void funcs::dswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); flt_64 b = stack.popDouble(); stack.pushDoubleFloat(a); stack.pushDouble(b); }


}
void funcs::dswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); flt_64 b = stack.popDouble(); stack.pushDoubleDouble(a); stack.pushDouble(b); }


}
void funcs::dswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); flt_64 b = stack.popDouble(); stack.pushPointer(a); stack.pushDouble(b); }


}
void funcs::ddup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 on the stack.
 */

    stack.pushDouble(stack.peekDouble());


}
void funcs::ddup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 2 times on the stack.
 */

    stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());


}
void funcs::ddup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 3 times on the stack.
 */

    stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());


}
void funcs::ddup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 4 times on the stack.
 */

    stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());


}
void funcs::ddup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 5 times on the stack.
 */

    stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());


}
void funcs::dswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements.
 */

    { flt_64 a = stack.popDouble(); flt_64 b = stack.popDouble(); stack.pushDouble(a); stack.pushDouble(b); }


}
void funcs::drot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_64 elements.
 */

    { flt_64 a = stack.popDouble(); flt_64 b = stack.popDouble(); flt_64 c = stack.popDouble(); stack.pushDouble(a); stack.pushDouble(b); stack.pushDouble(c); }


}
void funcs::dset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetDouble(base, ops.getUnsignedInt(), stack.popDouble());


}
void funcs::dget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_64 from a field on base pointer to stack.
 */

    stack.pushDouble(MvM::accessMemoryAndGetDouble(base, ops.getUnsignedInt()));


}
void funcs::dvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetDouble(base, ops.getUnsignedInt(), ops.getDouble());


}
void funcs::dsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_64 from a field on base pointer to stack using address from stack.
 */

    stack.pushDouble(MvM::accessMemoryAndGetDouble(base, stack.popUnsignedInt()));


}
void funcs::dsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetDouble(base, stack.popUnsignedInt(), stack.popDouble());


}
void funcs::dsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetDouble(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Double);


}
void funcs::dinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Double = lvt[point].Double + 1; }


}
void funcs::dinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Double = lvt[point].Double + 2; }


}
void funcs::dstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 1 on stack.
 */

    stack.pushDouble(stack.popDouble() + 1);


}
void funcs::dstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 2 on stack.
 */

    stack.pushDouble(stack.popDouble() + 2);


}
void funcs::dreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_64 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushDouble(stack.popDouble()); return;


}
void funcs::dmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Double = stack_main.popDouble();


}
void funcs::dmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 0.
 */

    lvt[0].Double = stack_main.popDouble();;


}
void funcs::dmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 1.
 */

    lvt[1].Double = stack_main.popDouble();;


}
void funcs::dmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 2.
 */

    lvt[2].Double = stack_main.popDouble();;


}
void funcs::dmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 3.
 */

    lvt[3].Double = stack_main.popDouble();;


}
void funcs::dfconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_128 into the stack.
 */

    stack.pushDoubleFloat(ops.getDoubleFloat());


}
void funcs::dfconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_128 into the stack (value = 0).
 */

    stack.pushDoubleFloat(0);


}
void funcs::dfload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable.
 */

    stack.pushDoubleFloat(lvt[ops.getUnsignedShort()].DoubleFloat);


}
void funcs::dfload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 0.
 */

    stack.pushDoubleFloat(lvt[0].DoubleFloat);


}
void funcs::dfload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 1.
 */

    stack.pushDoubleFloat(lvt[1].DoubleFloat);


}
void funcs::dfload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 2.
 */

    stack.pushDoubleFloat(lvt[2].DoubleFloat);


}
void funcs::dfload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 3.
 */

    stack.pushDoubleFloat(lvt[3].DoubleFloat);


}
void funcs::dfload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 4.
 */

    stack.pushDoubleFloat(lvt[4].DoubleFloat);


}
void funcs::dfstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_DoubleFloat(stack.popDoubleFloat());


}
void funcs::dfstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_DoubleFloat(stack.popDoubleFloat());


}
void funcs::dfstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_DoubleFloat(stack.popDoubleFloat());


}
void funcs::dfstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_DoubleFloat(stack.popDoubleFloat());


}
void funcs::dfstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_DoubleFloat(stack.popDoubleFloat());


}
void funcs::dfstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_DoubleFloat(stack.popDoubleFloat());


}
void funcs::dfswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); flt_128 b = stack.popDoubleFloat(); stack.pushByte(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); flt_128 b = stack.popDoubleFloat(); stack.pushShort(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); flt_128 b = stack.popDoubleFloat(); stack.pushInt(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); flt_128 b = stack.popDoubleFloat(); stack.pushLong(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); flt_128 b = stack.popDoubleFloat(); stack.pushLongInt(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); flt_128 b = stack.popDoubleFloat(); stack.pushLongLong(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); flt_128 b = stack.popDoubleFloat(); stack.pushFloat(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); flt_128 b = stack.popDoubleFloat(); stack.pushDouble(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); flt_128 b = stack.popDoubleFloat(); stack.pushDoubleFloat(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); flt_128 b = stack.popDoubleFloat(); stack.pushDoubleDouble(a); stack.pushDoubleFloat(b); }


}
void funcs::dfswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); flt_128 b = stack.popDoubleFloat(); stack.pushPointer(a); stack.pushDoubleFloat(b); }


}
void funcs::dfdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 on the stack.
 */

    stack.pushDoubleFloat(stack.peekDoubleFloat());


}
void funcs::dfdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 2 times on the stack.
 */

    stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());


}
void funcs::dfdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 3 times on the stack.
 */

    stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());


}
void funcs::dfdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 4 times on the stack.
 */

    stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());


}
void funcs::dfdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 5 times on the stack.
 */

    stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());


}
void funcs::dfswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements.
 */

    { flt_128 a = stack.popDoubleFloat(); flt_128 b = stack.popDoubleFloat(); stack.pushDoubleFloat(a); stack.pushDoubleFloat(b); }


}
void funcs::dfrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_128 elements.
 */

    { flt_128 a = stack.popDoubleFloat(); flt_128 b = stack.popDoubleFloat(); flt_128 c = stack.popDoubleFloat(); stack.pushDoubleFloat(a); stack.pushDoubleFloat(b); stack.pushDoubleFloat(c); }


}
void funcs::dfset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetDoubleFloat(base, ops.getUnsignedInt(), stack.popDoubleFloat());


}
void funcs::dfget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_128 from a field on base pointer to stack.
 */

    stack.pushDoubleFloat(MvM::accessMemoryAndGetDoubleFloat(base, ops.getUnsignedInt()));


}
void funcs::dfvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetDoubleFloat(base, ops.getUnsignedInt(), ops.getDoubleFloat());


}
void funcs::dfsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_128 from a field on base pointer to stack using address from stack.
 */

    stack.pushDoubleFloat(MvM::accessMemoryAndGetDoubleFloat(base, stack.popUnsignedInt()));


}
void funcs::dfsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetDoubleFloat(base, stack.popUnsignedInt(), stack.popDoubleFloat());


}
void funcs::dfsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetDoubleFloat(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].DoubleFloat);


}
void funcs::dfinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleFloat = lvt[point].DoubleFloat + 1; }


}
void funcs::dfinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleFloat = lvt[point].DoubleFloat + 2; }


}
void funcs::dfstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 1 on stack.
 */

    stack.pushDoubleFloat(stack.popDoubleFloat() + 1);


}
void funcs::dfstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 2 on stack.
 */

    stack.pushDoubleFloat(stack.popDoubleFloat() + 2);


}
void funcs::dfreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_128 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushDoubleFloat(stack.popDoubleFloat()); return;


}
void funcs::dfmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].DoubleFloat = stack_main.popDoubleFloat();


}
void funcs::dfmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 0.
 */

    lvt[0].DoubleFloat = stack_main.popDoubleFloat();;


}
void funcs::dfmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 1.
 */

    lvt[1].DoubleFloat = stack_main.popDoubleFloat();;


}
void funcs::dfmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 2.
 */

    lvt[2].DoubleFloat = stack_main.popDoubleFloat();;


}
void funcs::dfmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 3.
 */

    lvt[3].DoubleFloat = stack_main.popDoubleFloat();;


}
void funcs::ddconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_256 into the stack.
 */

    stack.pushDoubleDouble(ops.getDoubleDouble());


}
void funcs::ddconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_256 into the stack (value = 0).
 */

    stack.pushDoubleDouble(0);


}
void funcs::ddload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable.
 */

    stack.pushDoubleDouble(lvt[ops.getUnsignedShort()].DoubleDouble);


}
void funcs::ddload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 0.
 */

    stack.pushDoubleDouble(lvt[0].DoubleDouble);


}
void funcs::ddload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 1.
 */

    stack.pushDoubleDouble(lvt[1].DoubleDouble);


}
void funcs::ddload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 2.
 */

    stack.pushDoubleDouble(lvt[2].DoubleDouble);


}
void funcs::ddload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 3.
 */

    stack.pushDoubleDouble(lvt[3].DoubleDouble);


}
void funcs::ddload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 4.
 */

    stack.pushDoubleDouble(lvt[4].DoubleDouble);


}
void funcs::ddstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_DoubleDouble(stack.popDoubleDouble());


}
void funcs::ddstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 0.
 */

    lvt[0] = MvM::lve_DoubleDouble(stack.popDoubleDouble());


}
void funcs::ddstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 1.
 */

    lvt[1] = MvM::lve_DoubleDouble(stack.popDoubleDouble());


}
void funcs::ddstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 2.
 */

    lvt[2] = MvM::lve_DoubleDouble(stack.popDoubleDouble());


}
void funcs::ddstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 3.
 */

    lvt[3] = MvM::lve_DoubleDouble(stack.popDoubleDouble());


}
void funcs::ddstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 4.
 */

    lvt[4] = MvM::lve_DoubleDouble(stack.popDoubleDouble());


}
void funcs::ddswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); flt_256 b = stack.popDoubleDouble(); stack.pushByte(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); flt_256 b = stack.popDoubleDouble(); stack.pushShort(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); flt_256 b = stack.popDoubleDouble(); stack.pushInt(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); flt_256 b = stack.popDoubleDouble(); stack.pushLong(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); flt_256 b = stack.popDoubleDouble(); stack.pushLongInt(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); flt_256 b = stack.popDoubleDouble(); stack.pushLongLong(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); flt_256 b = stack.popDoubleDouble(); stack.pushFloat(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); flt_256 b = stack.popDoubleDouble(); stack.pushDouble(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); flt_256 b = stack.popDoubleDouble(); stack.pushDoubleFloat(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); flt_256 b = stack.popDoubleDouble(); stack.pushDoubleDouble(a); stack.pushDoubleDouble(b); }


}
void funcs::ddswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); flt_256 b = stack.popDoubleDouble(); stack.pushPointer(a); stack.pushDoubleDouble(b); }


}
void funcs::dddup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 on the stack.
 */

    stack.pushDoubleDouble(stack.peekDoubleDouble());


}
void funcs::dddup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 2 times on the stack.
 */

    stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());


}
void funcs::dddup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 3 times on the stack.
 */

    stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());


}
void funcs::dddup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 4 times on the stack.
 */

    stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());


}
void funcs::dddup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 5 times on the stack.
 */

    stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());


}
void funcs::ddswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements.
 */

    { flt_256 a = stack.popDoubleDouble(); flt_256 b = stack.popDoubleDouble(); stack.pushDoubleDouble(a); stack.pushDoubleDouble(b); }


}
void funcs::ddrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_256 elements.
 */

    { flt_256 a = stack.popDoubleDouble(); flt_256 b = stack.popDoubleDouble(); flt_256 c = stack.popDoubleDouble(); stack.pushDoubleDouble(a); stack.pushDoubleDouble(b); stack.pushDoubleDouble(c); }


}
void funcs::ddset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetDoubleDouble(base, ops.getUnsignedInt(), stack.popDoubleDouble());


}
void funcs::ddget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_256 from a field on base pointer to stack.
 */

    stack.pushDoubleDouble(MvM::accessMemoryAndGetDoubleDouble(base, ops.getUnsignedInt()));


}
void funcs::ddvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetDoubleDouble(base, ops.getUnsignedInt(), ops.getDoubleDouble());


}
void funcs::ddsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_256 from a field on base pointer to stack using address from stack.
 */

    stack.pushDoubleDouble(MvM::accessMemoryAndGetDoubleDouble(base, stack.popUnsignedInt()));


}
void funcs::ddsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetDoubleDouble(base, stack.popUnsignedInt(), stack.popDoubleDouble());


}
void funcs::ddsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetDoubleDouble(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].DoubleDouble);


}
void funcs::ddinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleDouble = lvt[point].DoubleDouble + 1; }


}
void funcs::ddinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleDouble = lvt[point].DoubleDouble + 2; }


}
void funcs::ddstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 1 on stack.
 */

    stack.pushDoubleDouble(stack.popDoubleDouble() + 1);


}
void funcs::ddstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 2 on stack.
 */

    stack.pushDoubleDouble(stack.popDoubleDouble() + 2);


}
void funcs::ddreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_256 into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushDoubleDouble(stack.popDoubleDouble()); return;


}
void funcs::ddmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].DoubleDouble = stack_main.popDoubleDouble();


}
void funcs::ddmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 0.
 */

    lvt[0].DoubleDouble = stack_main.popDoubleDouble();;


}
void funcs::ddmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 1.
 */

    lvt[1].DoubleDouble = stack_main.popDoubleDouble();;


}
void funcs::ddmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 2.
 */

    lvt[2].DoubleDouble = stack_main.popDoubleDouble();;


}
void funcs::ddmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 3.
 */

    lvt[3].DoubleDouble = stack_main.popDoubleDouble();;


}
void funcs::aconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer into the stack.
 */

    stack.pushPointer(ops.getPointer());


}
void funcs::aconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer into the stack (value = 0).
 */

    stack.pushPointer(0);


}
void funcs::aload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable.
 */

    stack.pushPointer(lvt[ops.getUnsignedShort()].Pointer);


}
void funcs::aload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 0.
 */

    stack.pushPointer(lvt[0].Pointer);


}
void funcs::aload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 1.
 */

    stack.pushPointer(lvt[1].Pointer);


}
void funcs::aload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 2.
 */

    stack.pushPointer(lvt[2].Pointer);


}
void funcs::aload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 3.
 */

    stack.pushPointer(lvt[3].Pointer);


}
void funcs::aload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 4.
 */

    stack.pushPointer(lvt[4].Pointer);


}
void funcs::astore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable.
 */

    lvt[ops.getUnsignedShort()] = MvM::lve_Pointer(stack.popPointer());


}
void funcs::astore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 0.
 */

    lvt[0] = MvM::lve_Pointer(stack.popPointer());


}
void funcs::astore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 1.
 */

    lvt[1] = MvM::lve_Pointer(stack.popPointer());


}
void funcs::astore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 2.
 */

    lvt[2] = MvM::lve_Pointer(stack.popPointer());


}
void funcs::astore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 3.
 */

    lvt[3] = MvM::lve_Pointer(stack.popPointer());


}
void funcs::astore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 4.
 */

    lvt[4] = MvM::lve_Pointer(stack.popPointer());


}
void funcs::aswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Byte.
 */

    { int_8 a = stack.popByte(); pointer b = stack.popPointer(); stack.pushByte(a); stack.pushPointer(b); }


}
void funcs::aswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Short.
 */

    { int_16 a = stack.popShort(); pointer b = stack.popPointer(); stack.pushShort(a); stack.pushPointer(b); }


}
void funcs::aswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Int.
 */

    { int_32 a = stack.popInt(); pointer b = stack.popPointer(); stack.pushInt(a); stack.pushPointer(b); }


}
void funcs::aswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Long.
 */

    { int_64 a = stack.popLong(); pointer b = stack.popPointer(); stack.pushLong(a); stack.pushPointer(b); }


}
void funcs::aswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a LongInt.
 */

    { int_128 a = stack.popLongInt(); pointer b = stack.popPointer(); stack.pushLongInt(a); stack.pushPointer(b); }


}
void funcs::aswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a LongLong.
 */

    { int_256 a = stack.popLongLong(); pointer b = stack.popPointer(); stack.pushLongLong(a); stack.pushPointer(b); }


}
void funcs::aswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Float.
 */

    { flt_32 a = stack.popFloat(); pointer b = stack.popPointer(); stack.pushFloat(a); stack.pushPointer(b); }


}
void funcs::aswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Double.
 */

    { flt_64 a = stack.popDouble(); pointer b = stack.popPointer(); stack.pushDouble(a); stack.pushPointer(b); }


}
void funcs::aswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a DoubleFloat.
 */

    { flt_128 a = stack.popDoubleFloat(); pointer b = stack.popPointer(); stack.pushDoubleFloat(a); stack.pushPointer(b); }


}
void funcs::aswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a DoubleDouble.
 */

    { flt_256 a = stack.popDoubleDouble(); pointer b = stack.popPointer(); stack.pushDoubleDouble(a); stack.pushPointer(b); }


}
void funcs::aswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Pointer.
 */

    { pointer a = stack.popPointer(); pointer b = stack.popPointer(); stack.pushPointer(a); stack.pushPointer(b); }


}
void funcs::adup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer on the stack.
 */

    stack.pushPointer(stack.peekPointer());


}
void funcs::adup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 2 times on the stack.
 */

    stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());


}
void funcs::adup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 3 times on the stack.
 */

    stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());


}
void funcs::adup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 4 times on the stack.
 */

    stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());


}
void funcs::adup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 5 times on the stack.
 */

    stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());


}
void funcs::aswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements.
 */

    { pointer a = stack.popPointer(); pointer b = stack.popPointer(); stack.pushPointer(a); stack.pushPointer(b); }


}
void funcs::arot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost pointer elements.
 */

    { pointer a = stack.popPointer(); pointer b = stack.popPointer(); pointer c = stack.popPointer(); stack.pushPointer(a); stack.pushPointer(b); stack.pushPointer(c); }


}
void funcs::aset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from stack into a field on base pointer.
 */

    MvM::accessMemoryAndSetPointer(base, ops.getUnsignedInt(), stack.popPointer());


}
void funcs::aget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a pointer from a field on base pointer to stack.
 */

    stack.pushPointer(MvM::accessMemoryAndGetPointer(base, ops.getUnsignedInt()));


}
void funcs::avset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from value into a field on base pointer.
 */

    MvM::accessMemoryAndSetPointer(base, ops.getUnsignedInt(), ops.getPointer());


}
void funcs::asget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a pointer from a field on base pointer to stack using address from stack.
 */

    stack.pushPointer(MvM::accessMemoryAndGetPointer(base, stack.popUnsignedInt()));


}
void funcs::asset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from stack into a field on base pointer using address from stack.
 */

    MvM::accessMemoryAndSetPointer(base, stack.popUnsignedInt(), stack.popPointer());


}
void funcs::asetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from local variable into a field on base pointer.
 */

    MvM::accessMemoryAndSetPointer(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Pointer);


}
void funcs::ainc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 1 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Pointer = lvt[point].Pointer + 1; }


}
void funcs::ainc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 2 on stack.
 */

    { uint_16 point = ops.getUnsignedShort(); lvt[point].Pointer = lvt[point].Pointer + 2; }


}
void funcs::astinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 1 on stack.
 */

    stack.pushPointer(stack.popPointer() + 1);


}
void funcs::astinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 2 on stack.
 */

    stack.pushPointer(stack.popPointer() + 2);


}
void funcs::areturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a pointer into the main stack.
 */

    ops.address = ops.length;;
    stack_main.pushPointer(stack.popPointer()); return;


}
void funcs::amainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in a local variable..
 */

    lvt[ops.getUnsignedShort()].Pointer = stack_main.popPointer();


}
void funcs::amainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 0.
 */

    lvt[0].Pointer = stack_main.popPointer();;


}
void funcs::amainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 1.
 */

    lvt[1].Pointer = stack_main.popPointer();;


}
void funcs::amainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 2.
 */

    lvt[2].Pointer = stack_main.popPointer();;


}
void funcs::amainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 3.
 */

    lvt[3].Pointer = stack_main.popPointer();;


}




void funcs::getAllImplementations(uint_64& _opfuncindex_)
{
    #define impl_funcs impl::impl_funcs
    
    impl_funcs[0] = &func_impl;
    impl_funcs[1] = &hash_impl;
    impl_funcs[2] = &timens_impl;
    impl_funcs[3] = &timems_impl;
    impl_funcs[4] = &strconst_impl;
    impl_funcs[5] = &strload_impl;
    impl_funcs[6] = &strstore_impl;
    impl_funcs[7] = &strsizeof_impl;
    impl_funcs[8] = &strcast_a_impl;
    impl_funcs[9] = &strcast_ba_impl;
    impl_funcs[10] = &strprint_impl;
    impl_funcs[11] = &strreturn_impl;
    impl_funcs[12] = &mark_impl;
    impl_funcs[13] = &jump_impl;
    impl_funcs[14] = &jumptomark_impl;
    impl_funcs[15] = &newline_impl;
    impl_funcs[16] = &ret_impl;
    impl_funcs[17] = &invoke_impl;
    impl_funcs[18] = &invokedynamic_impl;
    impl_funcs[19] = &invokespecial_impl;
    impl_funcs[20] = &if_t_impl;
    impl_funcs[21] = &if_f_impl;
    impl_funcs[22] = &amemcpy_impl;
    impl_funcs[23] = &bspmemcpy_impl;
    impl_funcs[24] = &amemcpybsp_impl;
    impl_funcs[25] = &amalloc_impl;
    impl_funcs[26] = &acalloc_impl;
    impl_funcs[27] = &amallocs_impl;
    impl_funcs[28] = &acallocs_impl;
    impl_funcs[29] = &abload_impl;
    impl_funcs[30] = &asload_impl;
    impl_funcs[31] = &aiload_impl;
    impl_funcs[32] = &alload_impl;
    impl_funcs[33] = &aliload_impl;
    impl_funcs[34] = &allload_impl;
    impl_funcs[35] = &afload_impl;
    impl_funcs[36] = &adload_impl;
    impl_funcs[37] = &adfload_impl;
    impl_funcs[38] = &addload_impl;
    impl_funcs[39] = &aaload_impl;
    impl_funcs[40] = &abstore_impl;
    impl_funcs[41] = &asstore_impl;
    impl_funcs[42] = &aistore_impl;
    impl_funcs[43] = &alstore_impl;
    impl_funcs[44] = &alistore_impl;
    impl_funcs[45] = &allstore_impl;
    impl_funcs[46] = &afstore_impl;
    impl_funcs[47] = &adstore_impl;
    impl_funcs[48] = &adfstore_impl;
    impl_funcs[49] = &addstore_impl;
    impl_funcs[50] = &aastore_impl;
    impl_funcs[51] = &baconst_impl;
    impl_funcs[52] = &baconsts_impl;
    impl_funcs[53] = &baconsti_impl;
    impl_funcs[54] = &bacast_a_impl;
    impl_funcs[55] = &basizeof_impl;
    impl_funcs[56] = &printba_impl;
    impl_funcs[57] = &bconst_impl;
    impl_funcs[58] = &bconst_0_impl;
    impl_funcs[59] = &bconst_1_impl;
    impl_funcs[60] = &bconst_2_impl;
    impl_funcs[61] = &bconst_3_impl;
    impl_funcs[62] = &bconst_4_impl;
    impl_funcs[63] = &bconst_5_impl;
    impl_funcs[64] = &bconst_6_impl;
    impl_funcs[65] = &bconst_9_impl;
    impl_funcs[66] = &bconst_10_impl;
    impl_funcs[67] = &bconst_11_impl;
    impl_funcs[68] = &bconst_12_impl;
    impl_funcs[69] = &bload_impl;
    impl_funcs[70] = &bload_0_impl;
    impl_funcs[71] = &bload_1_impl;
    impl_funcs[72] = &bload_2_impl;
    impl_funcs[73] = &bload_3_impl;
    impl_funcs[74] = &bload_4_impl;
    impl_funcs[75] = &bstore_impl;
    impl_funcs[76] = &bstore_0_impl;
    impl_funcs[77] = &bstore_1_impl;
    impl_funcs[78] = &bstore_2_impl;
    impl_funcs[79] = &bstore_3_impl;
    impl_funcs[80] = &bstore_4_impl;
    impl_funcs[81] = &bcast_b_impl;
    impl_funcs[82] = &bucast_b_impl;
    impl_funcs[83] = &badd_b_impl;
    impl_funcs[84] = &buadd_b_impl;
    impl_funcs[85] = &bsub_b_impl;
    impl_funcs[86] = &busub_b_impl;
    impl_funcs[87] = &bmul_b_impl;
    impl_funcs[88] = &bumul_b_impl;
    impl_funcs[89] = &bdiv_b_impl;
    impl_funcs[90] = &budiv_b_impl;
    impl_funcs[91] = &bcmpl_b_impl;
    impl_funcs[92] = &bucmpl_b_impl;
    impl_funcs[93] = &bcmpg_b_impl;
    impl_funcs[94] = &bucmpg_b_impl;
    impl_funcs[95] = &bcmpe_b_impl;
    impl_funcs[96] = &bucmpe_b_impl;
    impl_funcs[97] = &bcmple_b_impl;
    impl_funcs[98] = &bucmple_b_impl;
    impl_funcs[99] = &bcmpge_b_impl;
    impl_funcs[100] = &bucmpge_b_impl;
    impl_funcs[101] = &bcmpne_b_impl;
    impl_funcs[102] = &bucmpne_b_impl;
    impl_funcs[103] = &bcast_s_impl;
    impl_funcs[104] = &bucast_s_impl;
    impl_funcs[105] = &badd_s_impl;
    impl_funcs[106] = &buadd_s_impl;
    impl_funcs[107] = &bsub_s_impl;
    impl_funcs[108] = &busub_s_impl;
    impl_funcs[109] = &bmul_s_impl;
    impl_funcs[110] = &bumul_s_impl;
    impl_funcs[111] = &bdiv_s_impl;
    impl_funcs[112] = &budiv_s_impl;
    impl_funcs[113] = &bcmpl_s_impl;
    impl_funcs[114] = &bucmpl_s_impl;
    impl_funcs[115] = &bcmpg_s_impl;
    impl_funcs[116] = &bucmpg_s_impl;
    impl_funcs[117] = &bcmpe_s_impl;
    impl_funcs[118] = &bucmpe_s_impl;
    impl_funcs[119] = &bcmple_s_impl;
    impl_funcs[120] = &bucmple_s_impl;
    impl_funcs[121] = &bcmpge_s_impl;
    impl_funcs[122] = &bucmpge_s_impl;
    impl_funcs[123] = &bcmpne_s_impl;
    impl_funcs[124] = &bucmpne_s_impl;
    impl_funcs[125] = &bcast_i_impl;
    impl_funcs[126] = &bucast_i_impl;
    impl_funcs[127] = &badd_i_impl;
    impl_funcs[128] = &buadd_i_impl;
    impl_funcs[129] = &bsub_i_impl;
    impl_funcs[130] = &busub_i_impl;
    impl_funcs[131] = &bmul_i_impl;
    impl_funcs[132] = &bumul_i_impl;
    impl_funcs[133] = &bdiv_i_impl;
    impl_funcs[134] = &budiv_i_impl;
    impl_funcs[135] = &bcmpl_i_impl;
    impl_funcs[136] = &bucmpl_i_impl;
    impl_funcs[137] = &bcmpg_i_impl;
    impl_funcs[138] = &bucmpg_i_impl;
    impl_funcs[139] = &bcmpe_i_impl;
    impl_funcs[140] = &bucmpe_i_impl;
    impl_funcs[141] = &bcmple_i_impl;
    impl_funcs[142] = &bucmple_i_impl;
    impl_funcs[143] = &bcmpge_i_impl;
    impl_funcs[144] = &bucmpge_i_impl;
    impl_funcs[145] = &bcmpne_i_impl;
    impl_funcs[146] = &bucmpne_i_impl;
    impl_funcs[147] = &bcast_l_impl;
    impl_funcs[148] = &bucast_l_impl;
    impl_funcs[149] = &badd_l_impl;
    impl_funcs[150] = &buadd_l_impl;
    impl_funcs[151] = &bsub_l_impl;
    impl_funcs[152] = &busub_l_impl;
    impl_funcs[153] = &bmul_l_impl;
    impl_funcs[154] = &bumul_l_impl;
    impl_funcs[155] = &bdiv_l_impl;
    impl_funcs[156] = &budiv_l_impl;
    impl_funcs[157] = &bcmpl_l_impl;
    impl_funcs[158] = &bucmpl_l_impl;
    impl_funcs[159] = &bcmpg_l_impl;
    impl_funcs[160] = &bucmpg_l_impl;
    impl_funcs[161] = &bcmpe_l_impl;
    impl_funcs[162] = &bucmpe_l_impl;
    impl_funcs[163] = &bcmple_l_impl;
    impl_funcs[164] = &bucmple_l_impl;
    impl_funcs[165] = &bcmpge_l_impl;
    impl_funcs[166] = &bucmpge_l_impl;
    impl_funcs[167] = &bcmpne_l_impl;
    impl_funcs[168] = &bucmpne_l_impl;
    impl_funcs[169] = &bcast_li_impl;
    impl_funcs[170] = &bucast_li_impl;
    impl_funcs[171] = &badd_li_impl;
    impl_funcs[172] = &buadd_li_impl;
    impl_funcs[173] = &bsub_li_impl;
    impl_funcs[174] = &busub_li_impl;
    impl_funcs[175] = &bmul_li_impl;
    impl_funcs[176] = &bumul_li_impl;
    impl_funcs[177] = &bdiv_li_impl;
    impl_funcs[178] = &budiv_li_impl;
    impl_funcs[179] = &bcmpl_li_impl;
    impl_funcs[180] = &bucmpl_li_impl;
    impl_funcs[181] = &bcmpg_li_impl;
    impl_funcs[182] = &bucmpg_li_impl;
    impl_funcs[183] = &bcmpe_li_impl;
    impl_funcs[184] = &bucmpe_li_impl;
    impl_funcs[185] = &bcmple_li_impl;
    impl_funcs[186] = &bucmple_li_impl;
    impl_funcs[187] = &bcmpge_li_impl;
    impl_funcs[188] = &bucmpge_li_impl;
    impl_funcs[189] = &bcmpne_li_impl;
    impl_funcs[190] = &bucmpne_li_impl;
    impl_funcs[191] = &bcast_ll_impl;
    impl_funcs[192] = &bucast_ll_impl;
    impl_funcs[193] = &badd_ll_impl;
    impl_funcs[194] = &buadd_ll_impl;
    impl_funcs[195] = &bsub_ll_impl;
    impl_funcs[196] = &busub_ll_impl;
    impl_funcs[197] = &bmul_ll_impl;
    impl_funcs[198] = &bumul_ll_impl;
    impl_funcs[199] = &bdiv_ll_impl;
    impl_funcs[200] = &budiv_ll_impl;
    impl_funcs[201] = &bcmpl_ll_impl;
    impl_funcs[202] = &bucmpl_ll_impl;
    impl_funcs[203] = &bcmpg_ll_impl;
    impl_funcs[204] = &bucmpg_ll_impl;
    impl_funcs[205] = &bcmpe_ll_impl;
    impl_funcs[206] = &bucmpe_ll_impl;
    impl_funcs[207] = &bcmple_ll_impl;
    impl_funcs[208] = &bucmple_ll_impl;
    impl_funcs[209] = &bcmpge_ll_impl;
    impl_funcs[210] = &bucmpge_ll_impl;
    impl_funcs[211] = &bcmpne_ll_impl;
    impl_funcs[212] = &bucmpne_ll_impl;
    impl_funcs[213] = &bcast_f_impl;
    impl_funcs[214] = &bucast_f_impl;
    impl_funcs[215] = &badd_f_impl;
    impl_funcs[216] = &buadd_f_impl;
    impl_funcs[217] = &bsub_f_impl;
    impl_funcs[218] = &busub_f_impl;
    impl_funcs[219] = &bmul_f_impl;
    impl_funcs[220] = &bumul_f_impl;
    impl_funcs[221] = &bdiv_f_impl;
    impl_funcs[222] = &budiv_f_impl;
    impl_funcs[223] = &bcmpl_f_impl;
    impl_funcs[224] = &bucmpl_f_impl;
    impl_funcs[225] = &bcmpg_f_impl;
    impl_funcs[226] = &bucmpg_f_impl;
    impl_funcs[227] = &bcmpe_f_impl;
    impl_funcs[228] = &bucmpe_f_impl;
    impl_funcs[229] = &bcmple_f_impl;
    impl_funcs[230] = &bucmple_f_impl;
    impl_funcs[231] = &bcmpge_f_impl;
    impl_funcs[232] = &bucmpge_f_impl;
    impl_funcs[233] = &bcmpne_f_impl;
    impl_funcs[234] = &bucmpne_f_impl;
    impl_funcs[235] = &bcast_d_impl;
    impl_funcs[236] = &bucast_d_impl;
    impl_funcs[237] = &badd_d_impl;
    impl_funcs[238] = &buadd_d_impl;
    impl_funcs[239] = &bsub_d_impl;
    impl_funcs[240] = &busub_d_impl;
    impl_funcs[241] = &bmul_d_impl;
    impl_funcs[242] = &bumul_d_impl;
    impl_funcs[243] = &bdiv_d_impl;
    impl_funcs[244] = &budiv_d_impl;
    impl_funcs[245] = &bcmpl_d_impl;
    impl_funcs[246] = &bucmpl_d_impl;
    impl_funcs[247] = &bcmpg_d_impl;
    impl_funcs[248] = &bucmpg_d_impl;
    impl_funcs[249] = &bcmpe_d_impl;
    impl_funcs[250] = &bucmpe_d_impl;
    impl_funcs[251] = &bcmple_d_impl;
    impl_funcs[252] = &bucmple_d_impl;
    impl_funcs[253] = &bcmpge_d_impl;
    impl_funcs[254] = &bucmpge_d_impl;
    impl_funcs[255] = &bcmpne_d_impl;
    impl_funcs[256] = &bucmpne_d_impl;
    impl_funcs[257] = &bcast_df_impl;
    impl_funcs[258] = &bucast_df_impl;
    impl_funcs[259] = &badd_df_impl;
    impl_funcs[260] = &buadd_df_impl;
    impl_funcs[261] = &bsub_df_impl;
    impl_funcs[262] = &busub_df_impl;
    impl_funcs[263] = &bmul_df_impl;
    impl_funcs[264] = &bumul_df_impl;
    impl_funcs[265] = &bdiv_df_impl;
    impl_funcs[266] = &budiv_df_impl;
    impl_funcs[267] = &bcmpl_df_impl;
    impl_funcs[268] = &bucmpl_df_impl;
    impl_funcs[269] = &bcmpg_df_impl;
    impl_funcs[270] = &bucmpg_df_impl;
    impl_funcs[271] = &bcmpe_df_impl;
    impl_funcs[272] = &bucmpe_df_impl;
    impl_funcs[273] = &bcmple_df_impl;
    impl_funcs[274] = &bucmple_df_impl;
    impl_funcs[275] = &bcmpge_df_impl;
    impl_funcs[276] = &bucmpge_df_impl;
    impl_funcs[277] = &bcmpne_df_impl;
    impl_funcs[278] = &bucmpne_df_impl;
    impl_funcs[279] = &bcast_dd_impl;
    impl_funcs[280] = &bucast_dd_impl;
    impl_funcs[281] = &badd_dd_impl;
    impl_funcs[282] = &buadd_dd_impl;
    impl_funcs[283] = &bsub_dd_impl;
    impl_funcs[284] = &busub_dd_impl;
    impl_funcs[285] = &bmul_dd_impl;
    impl_funcs[286] = &bumul_dd_impl;
    impl_funcs[287] = &bdiv_dd_impl;
    impl_funcs[288] = &budiv_dd_impl;
    impl_funcs[289] = &bcmpl_dd_impl;
    impl_funcs[290] = &bucmpl_dd_impl;
    impl_funcs[291] = &bcmpg_dd_impl;
    impl_funcs[292] = &bucmpg_dd_impl;
    impl_funcs[293] = &bcmpe_dd_impl;
    impl_funcs[294] = &bucmpe_dd_impl;
    impl_funcs[295] = &bcmple_dd_impl;
    impl_funcs[296] = &bucmple_dd_impl;
    impl_funcs[297] = &bcmpge_dd_impl;
    impl_funcs[298] = &bucmpge_dd_impl;
    impl_funcs[299] = &bcmpne_dd_impl;
    impl_funcs[300] = &bucmpne_dd_impl;
    impl_funcs[301] = &bmod_b_impl;
    impl_funcs[302] = &bcast_ub_impl;
    impl_funcs[303] = &bucast_ub_impl;
    impl_funcs[304] = &badd_ub_impl;
    impl_funcs[305] = &buadd_ub_impl;
    impl_funcs[306] = &bsub_ub_impl;
    impl_funcs[307] = &busub_ub_impl;
    impl_funcs[308] = &bmul_ub_impl;
    impl_funcs[309] = &bumul_ub_impl;
    impl_funcs[310] = &bdiv_ub_impl;
    impl_funcs[311] = &budiv_ub_impl;
    impl_funcs[312] = &bcmpl_ub_impl;
    impl_funcs[313] = &bucmpl_ub_impl;
    impl_funcs[314] = &bcmpg_ub_impl;
    impl_funcs[315] = &bucmpg_ub_impl;
    impl_funcs[316] = &bcmpe_ub_impl;
    impl_funcs[317] = &bucmpe_ub_impl;
    impl_funcs[318] = &bcmple_ub_impl;
    impl_funcs[319] = &bucmple_ub_impl;
    impl_funcs[320] = &bcmpge_ub_impl;
    impl_funcs[321] = &bucmpge_ub_impl;
    impl_funcs[322] = &bcmpne_ub_impl;
    impl_funcs[323] = &bucmpne_ub_impl;
    impl_funcs[324] = &bswapb_impl;
    impl_funcs[325] = &bmod_s_impl;
    impl_funcs[326] = &bcast_us_impl;
    impl_funcs[327] = &bucast_us_impl;
    impl_funcs[328] = &badd_us_impl;
    impl_funcs[329] = &buadd_us_impl;
    impl_funcs[330] = &bsub_us_impl;
    impl_funcs[331] = &busub_us_impl;
    impl_funcs[332] = &bmul_us_impl;
    impl_funcs[333] = &bumul_us_impl;
    impl_funcs[334] = &bdiv_us_impl;
    impl_funcs[335] = &budiv_us_impl;
    impl_funcs[336] = &bcmpl_us_impl;
    impl_funcs[337] = &bucmpl_us_impl;
    impl_funcs[338] = &bcmpg_us_impl;
    impl_funcs[339] = &bucmpg_us_impl;
    impl_funcs[340] = &bcmpe_us_impl;
    impl_funcs[341] = &bucmpe_us_impl;
    impl_funcs[342] = &bcmple_us_impl;
    impl_funcs[343] = &bucmple_us_impl;
    impl_funcs[344] = &bcmpge_us_impl;
    impl_funcs[345] = &bucmpge_us_impl;
    impl_funcs[346] = &bcmpne_us_impl;
    impl_funcs[347] = &bucmpne_us_impl;
    impl_funcs[348] = &bswaps_impl;
    impl_funcs[349] = &bmod_i_impl;
    impl_funcs[350] = &bcast_ui_impl;
    impl_funcs[351] = &bucast_ui_impl;
    impl_funcs[352] = &badd_ui_impl;
    impl_funcs[353] = &buadd_ui_impl;
    impl_funcs[354] = &bsub_ui_impl;
    impl_funcs[355] = &busub_ui_impl;
    impl_funcs[356] = &bmul_ui_impl;
    impl_funcs[357] = &bumul_ui_impl;
    impl_funcs[358] = &bdiv_ui_impl;
    impl_funcs[359] = &budiv_ui_impl;
    impl_funcs[360] = &bcmpl_ui_impl;
    impl_funcs[361] = &bucmpl_ui_impl;
    impl_funcs[362] = &bcmpg_ui_impl;
    impl_funcs[363] = &bucmpg_ui_impl;
    impl_funcs[364] = &bcmpe_ui_impl;
    impl_funcs[365] = &bucmpe_ui_impl;
    impl_funcs[366] = &bcmple_ui_impl;
    impl_funcs[367] = &bucmple_ui_impl;
    impl_funcs[368] = &bcmpge_ui_impl;
    impl_funcs[369] = &bucmpge_ui_impl;
    impl_funcs[370] = &bcmpne_ui_impl;
    impl_funcs[371] = &bucmpne_ui_impl;
    impl_funcs[372] = &bswapi_impl;
    impl_funcs[373] = &bmod_l_impl;
    impl_funcs[374] = &bcast_ul_impl;
    impl_funcs[375] = &bucast_ul_impl;
    impl_funcs[376] = &badd_ul_impl;
    impl_funcs[377] = &buadd_ul_impl;
    impl_funcs[378] = &bsub_ul_impl;
    impl_funcs[379] = &busub_ul_impl;
    impl_funcs[380] = &bmul_ul_impl;
    impl_funcs[381] = &bumul_ul_impl;
    impl_funcs[382] = &bdiv_ul_impl;
    impl_funcs[383] = &budiv_ul_impl;
    impl_funcs[384] = &bcmpl_ul_impl;
    impl_funcs[385] = &bucmpl_ul_impl;
    impl_funcs[386] = &bcmpg_ul_impl;
    impl_funcs[387] = &bucmpg_ul_impl;
    impl_funcs[388] = &bcmpe_ul_impl;
    impl_funcs[389] = &bucmpe_ul_impl;
    impl_funcs[390] = &bcmple_ul_impl;
    impl_funcs[391] = &bucmple_ul_impl;
    impl_funcs[392] = &bcmpge_ul_impl;
    impl_funcs[393] = &bucmpge_ul_impl;
    impl_funcs[394] = &bcmpne_ul_impl;
    impl_funcs[395] = &bucmpne_ul_impl;
    impl_funcs[396] = &bswapl_impl;
    impl_funcs[397] = &bmod_li_impl;
    impl_funcs[398] = &bcast_uli_impl;
    impl_funcs[399] = &bucast_uli_impl;
    impl_funcs[400] = &badd_uli_impl;
    impl_funcs[401] = &buadd_uli_impl;
    impl_funcs[402] = &bsub_uli_impl;
    impl_funcs[403] = &busub_uli_impl;
    impl_funcs[404] = &bmul_uli_impl;
    impl_funcs[405] = &bumul_uli_impl;
    impl_funcs[406] = &bdiv_uli_impl;
    impl_funcs[407] = &budiv_uli_impl;
    impl_funcs[408] = &bcmpl_uli_impl;
    impl_funcs[409] = &bucmpl_uli_impl;
    impl_funcs[410] = &bcmpg_uli_impl;
    impl_funcs[411] = &bucmpg_uli_impl;
    impl_funcs[412] = &bcmpe_uli_impl;
    impl_funcs[413] = &bucmpe_uli_impl;
    impl_funcs[414] = &bcmple_uli_impl;
    impl_funcs[415] = &bucmple_uli_impl;
    impl_funcs[416] = &bcmpge_uli_impl;
    impl_funcs[417] = &bucmpge_uli_impl;
    impl_funcs[418] = &bcmpne_uli_impl;
    impl_funcs[419] = &bucmpne_uli_impl;
    impl_funcs[420] = &bswapli_impl;
    impl_funcs[421] = &bmod_ll_impl;
    impl_funcs[422] = &bcast_ull_impl;
    impl_funcs[423] = &bucast_ull_impl;
    impl_funcs[424] = &badd_ull_impl;
    impl_funcs[425] = &buadd_ull_impl;
    impl_funcs[426] = &bsub_ull_impl;
    impl_funcs[427] = &busub_ull_impl;
    impl_funcs[428] = &bmul_ull_impl;
    impl_funcs[429] = &bumul_ull_impl;
    impl_funcs[430] = &bdiv_ull_impl;
    impl_funcs[431] = &budiv_ull_impl;
    impl_funcs[432] = &bcmpl_ull_impl;
    impl_funcs[433] = &bucmpl_ull_impl;
    impl_funcs[434] = &bcmpg_ull_impl;
    impl_funcs[435] = &bucmpg_ull_impl;
    impl_funcs[436] = &bcmpe_ull_impl;
    impl_funcs[437] = &bucmpe_ull_impl;
    impl_funcs[438] = &bcmple_ull_impl;
    impl_funcs[439] = &bucmple_ull_impl;
    impl_funcs[440] = &bcmpge_ull_impl;
    impl_funcs[441] = &bucmpge_ull_impl;
    impl_funcs[442] = &bcmpne_ull_impl;
    impl_funcs[443] = &bucmpne_ull_impl;
    impl_funcs[444] = &bswapll_impl;
    impl_funcs[445] = &bswapf_impl;
    impl_funcs[446] = &bswapd_impl;
    impl_funcs[447] = &bswapdf_impl;
    impl_funcs[448] = &bswapdd_impl;
    impl_funcs[449] = &bswapa_impl;
    impl_funcs[450] = &band_b_impl;
    impl_funcs[451] = &bor_b_impl;
    impl_funcs[452] = &bxor_b_impl;
    impl_funcs[453] = &bshftr_b_impl;
    impl_funcs[454] = &bshftl_b_impl;
    impl_funcs[455] = &band_s_impl;
    impl_funcs[456] = &bor_s_impl;
    impl_funcs[457] = &bxor_s_impl;
    impl_funcs[458] = &bshftr_s_impl;
    impl_funcs[459] = &bshftl_s_impl;
    impl_funcs[460] = &band_i_impl;
    impl_funcs[461] = &bor_i_impl;
    impl_funcs[462] = &bxor_i_impl;
    impl_funcs[463] = &bshftr_i_impl;
    impl_funcs[464] = &bshftl_i_impl;
    impl_funcs[465] = &band_l_impl;
    impl_funcs[466] = &bor_l_impl;
    impl_funcs[467] = &bxor_l_impl;
    impl_funcs[468] = &bshftr_l_impl;
    impl_funcs[469] = &bshftl_l_impl;
    impl_funcs[470] = &band_li_impl;
    impl_funcs[471] = &bor_li_impl;
    impl_funcs[472] = &bxor_li_impl;
    impl_funcs[473] = &bshftr_li_impl;
    impl_funcs[474] = &bshftl_li_impl;
    impl_funcs[475] = &band_ll_impl;
    impl_funcs[476] = &bor_ll_impl;
    impl_funcs[477] = &bxor_ll_impl;
    impl_funcs[478] = &bshftr_ll_impl;
    impl_funcs[479] = &bshftl_ll_impl;
    impl_funcs[480] = &bdup_impl;
    impl_funcs[481] = &bdup2_impl;
    impl_funcs[482] = &bdup3_impl;
    impl_funcs[483] = &bdup4_impl;
    impl_funcs[484] = &bdup5_impl;
    impl_funcs[485] = &bswap_impl;
    impl_funcs[486] = &brot_impl;
    impl_funcs[487] = &bset_impl;
    impl_funcs[488] = &bget_impl;
    impl_funcs[489] = &bvset_impl;
    impl_funcs[490] = &bsget_impl;
    impl_funcs[491] = &bsset_impl;
    impl_funcs[492] = &bsetl_impl;
    impl_funcs[493] = &binc_1_impl;
    impl_funcs[494] = &binc_2_impl;
    impl_funcs[495] = &bstinc_1_impl;
    impl_funcs[496] = &bstinc_2_impl;
    impl_funcs[497] = &breturn_impl;
    impl_funcs[498] = &bmainst_impl;
    impl_funcs[499] = &bmainst_0_impl;
    impl_funcs[500] = &bmainst_1_impl;
    impl_funcs[501] = &bmainst_2_impl;
    impl_funcs[502] = &bmainst_3_impl;
    impl_funcs[503] = &bprint_impl;
    impl_funcs[504] = &buprint_impl;
    impl_funcs[505] = &sconst_impl;
    impl_funcs[506] = &sconst_0_impl;
    impl_funcs[507] = &sconst_1_impl;
    impl_funcs[508] = &sconst_2_impl;
    impl_funcs[509] = &sconst_3_impl;
    impl_funcs[510] = &sconst_4_impl;
    impl_funcs[511] = &sconst_5_impl;
    impl_funcs[512] = &sconst_6_impl;
    impl_funcs[513] = &sconst_9_impl;
    impl_funcs[514] = &sconst_10_impl;
    impl_funcs[515] = &sconst_11_impl;
    impl_funcs[516] = &sconst_12_impl;
    impl_funcs[517] = &sload_impl;
    impl_funcs[518] = &sload_0_impl;
    impl_funcs[519] = &sload_1_impl;
    impl_funcs[520] = &sload_2_impl;
    impl_funcs[521] = &sload_3_impl;
    impl_funcs[522] = &sload_4_impl;
    impl_funcs[523] = &sstore_impl;
    impl_funcs[524] = &sstore_0_impl;
    impl_funcs[525] = &sstore_1_impl;
    impl_funcs[526] = &sstore_2_impl;
    impl_funcs[527] = &sstore_3_impl;
    impl_funcs[528] = &sstore_4_impl;
    impl_funcs[529] = &scast_b_impl;
    impl_funcs[530] = &sucast_b_impl;
    impl_funcs[531] = &sadd_b_impl;
    impl_funcs[532] = &suadd_b_impl;
    impl_funcs[533] = &ssub_b_impl;
    impl_funcs[534] = &susub_b_impl;
    impl_funcs[535] = &smul_b_impl;
    impl_funcs[536] = &sumul_b_impl;
    impl_funcs[537] = &sdiv_b_impl;
    impl_funcs[538] = &sudiv_b_impl;
    impl_funcs[539] = &scmpl_b_impl;
    impl_funcs[540] = &sucmpl_b_impl;
    impl_funcs[541] = &scmpg_b_impl;
    impl_funcs[542] = &sucmpg_b_impl;
    impl_funcs[543] = &scmpe_b_impl;
    impl_funcs[544] = &sucmpe_b_impl;
    impl_funcs[545] = &scmple_b_impl;
    impl_funcs[546] = &sucmple_b_impl;
    impl_funcs[547] = &scmpge_b_impl;
    impl_funcs[548] = &sucmpge_b_impl;
    impl_funcs[549] = &scmpne_b_impl;
    impl_funcs[550] = &sucmpne_b_impl;
    impl_funcs[551] = &scast_s_impl;
    impl_funcs[552] = &sucast_s_impl;
    impl_funcs[553] = &sadd_s_impl;
    impl_funcs[554] = &suadd_s_impl;
    impl_funcs[555] = &ssub_s_impl;
    impl_funcs[556] = &susub_s_impl;
    impl_funcs[557] = &smul_s_impl;
    impl_funcs[558] = &sumul_s_impl;
    impl_funcs[559] = &sdiv_s_impl;
    impl_funcs[560] = &sudiv_s_impl;
    impl_funcs[561] = &scmpl_s_impl;
    impl_funcs[562] = &sucmpl_s_impl;
    impl_funcs[563] = &scmpg_s_impl;
    impl_funcs[564] = &sucmpg_s_impl;
    impl_funcs[565] = &scmpe_s_impl;
    impl_funcs[566] = &sucmpe_s_impl;
    impl_funcs[567] = &scmple_s_impl;
    impl_funcs[568] = &sucmple_s_impl;
    impl_funcs[569] = &scmpge_s_impl;
    impl_funcs[570] = &sucmpge_s_impl;
    impl_funcs[571] = &scmpne_s_impl;
    impl_funcs[572] = &sucmpne_s_impl;
    impl_funcs[573] = &scast_i_impl;
    impl_funcs[574] = &sucast_i_impl;
    impl_funcs[575] = &sadd_i_impl;
    impl_funcs[576] = &suadd_i_impl;
    impl_funcs[577] = &ssub_i_impl;
    impl_funcs[578] = &susub_i_impl;
    impl_funcs[579] = &smul_i_impl;
    impl_funcs[580] = &sumul_i_impl;
    impl_funcs[581] = &sdiv_i_impl;
    impl_funcs[582] = &sudiv_i_impl;
    impl_funcs[583] = &scmpl_i_impl;
    impl_funcs[584] = &sucmpl_i_impl;
    impl_funcs[585] = &scmpg_i_impl;
    impl_funcs[586] = &sucmpg_i_impl;
    impl_funcs[587] = &scmpe_i_impl;
    impl_funcs[588] = &sucmpe_i_impl;
    impl_funcs[589] = &scmple_i_impl;
    impl_funcs[590] = &sucmple_i_impl;
    impl_funcs[591] = &scmpge_i_impl;
    impl_funcs[592] = &sucmpge_i_impl;
    impl_funcs[593] = &scmpne_i_impl;
    impl_funcs[594] = &sucmpne_i_impl;
    impl_funcs[595] = &scast_l_impl;
    impl_funcs[596] = &sucast_l_impl;
    impl_funcs[597] = &sadd_l_impl;
    impl_funcs[598] = &suadd_l_impl;
    impl_funcs[599] = &ssub_l_impl;
    impl_funcs[600] = &susub_l_impl;
    impl_funcs[601] = &smul_l_impl;
    impl_funcs[602] = &sumul_l_impl;
    impl_funcs[603] = &sdiv_l_impl;
    impl_funcs[604] = &sudiv_l_impl;
    impl_funcs[605] = &scmpl_l_impl;
    impl_funcs[606] = &sucmpl_l_impl;
    impl_funcs[607] = &scmpg_l_impl;
    impl_funcs[608] = &sucmpg_l_impl;
    impl_funcs[609] = &scmpe_l_impl;
    impl_funcs[610] = &sucmpe_l_impl;
    impl_funcs[611] = &scmple_l_impl;
    impl_funcs[612] = &sucmple_l_impl;
    impl_funcs[613] = &scmpge_l_impl;
    impl_funcs[614] = &sucmpge_l_impl;
    impl_funcs[615] = &scmpne_l_impl;
    impl_funcs[616] = &sucmpne_l_impl;
    impl_funcs[617] = &scast_li_impl;
    impl_funcs[618] = &sucast_li_impl;
    impl_funcs[619] = &sadd_li_impl;
    impl_funcs[620] = &suadd_li_impl;
    impl_funcs[621] = &ssub_li_impl;
    impl_funcs[622] = &susub_li_impl;
    impl_funcs[623] = &smul_li_impl;
    impl_funcs[624] = &sumul_li_impl;
    impl_funcs[625] = &sdiv_li_impl;
    impl_funcs[626] = &sudiv_li_impl;
    impl_funcs[627] = &scmpl_li_impl;
    impl_funcs[628] = &sucmpl_li_impl;
    impl_funcs[629] = &scmpg_li_impl;
    impl_funcs[630] = &sucmpg_li_impl;
    impl_funcs[631] = &scmpe_li_impl;
    impl_funcs[632] = &sucmpe_li_impl;
    impl_funcs[633] = &scmple_li_impl;
    impl_funcs[634] = &sucmple_li_impl;
    impl_funcs[635] = &scmpge_li_impl;
    impl_funcs[636] = &sucmpge_li_impl;
    impl_funcs[637] = &scmpne_li_impl;
    impl_funcs[638] = &sucmpne_li_impl;
    impl_funcs[639] = &scast_ll_impl;
    impl_funcs[640] = &sucast_ll_impl;
    impl_funcs[641] = &sadd_ll_impl;
    impl_funcs[642] = &suadd_ll_impl;
    impl_funcs[643] = &ssub_ll_impl;
    impl_funcs[644] = &susub_ll_impl;
    impl_funcs[645] = &smul_ll_impl;
    impl_funcs[646] = &sumul_ll_impl;
    impl_funcs[647] = &sdiv_ll_impl;
    impl_funcs[648] = &sudiv_ll_impl;
    impl_funcs[649] = &scmpl_ll_impl;
    impl_funcs[650] = &sucmpl_ll_impl;
    impl_funcs[651] = &scmpg_ll_impl;
    impl_funcs[652] = &sucmpg_ll_impl;
    impl_funcs[653] = &scmpe_ll_impl;
    impl_funcs[654] = &sucmpe_ll_impl;
    impl_funcs[655] = &scmple_ll_impl;
    impl_funcs[656] = &sucmple_ll_impl;
    impl_funcs[657] = &scmpge_ll_impl;
    impl_funcs[658] = &sucmpge_ll_impl;
    impl_funcs[659] = &scmpne_ll_impl;
    impl_funcs[660] = &sucmpne_ll_impl;
    impl_funcs[661] = &scast_f_impl;
    impl_funcs[662] = &sucast_f_impl;
    impl_funcs[663] = &sadd_f_impl;
    impl_funcs[664] = &suadd_f_impl;
    impl_funcs[665] = &ssub_f_impl;
    impl_funcs[666] = &susub_f_impl;
    impl_funcs[667] = &smul_f_impl;
    impl_funcs[668] = &sumul_f_impl;
    impl_funcs[669] = &sdiv_f_impl;
    impl_funcs[670] = &sudiv_f_impl;
    impl_funcs[671] = &scmpl_f_impl;
    impl_funcs[672] = &sucmpl_f_impl;
    impl_funcs[673] = &scmpg_f_impl;
    impl_funcs[674] = &sucmpg_f_impl;
    impl_funcs[675] = &scmpe_f_impl;
    impl_funcs[676] = &sucmpe_f_impl;
    impl_funcs[677] = &scmple_f_impl;
    impl_funcs[678] = &sucmple_f_impl;
    impl_funcs[679] = &scmpge_f_impl;
    impl_funcs[680] = &sucmpge_f_impl;
    impl_funcs[681] = &scmpne_f_impl;
    impl_funcs[682] = &sucmpne_f_impl;
    impl_funcs[683] = &scast_d_impl;
    impl_funcs[684] = &sucast_d_impl;
    impl_funcs[685] = &sadd_d_impl;
    impl_funcs[686] = &suadd_d_impl;
    impl_funcs[687] = &ssub_d_impl;
    impl_funcs[688] = &susub_d_impl;
    impl_funcs[689] = &smul_d_impl;
    impl_funcs[690] = &sumul_d_impl;
    impl_funcs[691] = &sdiv_d_impl;
    impl_funcs[692] = &sudiv_d_impl;
    impl_funcs[693] = &scmpl_d_impl;
    impl_funcs[694] = &sucmpl_d_impl;
    impl_funcs[695] = &scmpg_d_impl;
    impl_funcs[696] = &sucmpg_d_impl;
    impl_funcs[697] = &scmpe_d_impl;
    impl_funcs[698] = &sucmpe_d_impl;
    impl_funcs[699] = &scmple_d_impl;
    impl_funcs[700] = &sucmple_d_impl;
    impl_funcs[701] = &scmpge_d_impl;
    impl_funcs[702] = &sucmpge_d_impl;
    impl_funcs[703] = &scmpne_d_impl;
    impl_funcs[704] = &sucmpne_d_impl;
    impl_funcs[705] = &scast_df_impl;
    impl_funcs[706] = &sucast_df_impl;
    impl_funcs[707] = &sadd_df_impl;
    impl_funcs[708] = &suadd_df_impl;
    impl_funcs[709] = &ssub_df_impl;
    impl_funcs[710] = &susub_df_impl;
    impl_funcs[711] = &smul_df_impl;
    impl_funcs[712] = &sumul_df_impl;
    impl_funcs[713] = &sdiv_df_impl;
    impl_funcs[714] = &sudiv_df_impl;
    impl_funcs[715] = &scmpl_df_impl;
    impl_funcs[716] = &sucmpl_df_impl;
    impl_funcs[717] = &scmpg_df_impl;
    impl_funcs[718] = &sucmpg_df_impl;
    impl_funcs[719] = &scmpe_df_impl;
    impl_funcs[720] = &sucmpe_df_impl;
    impl_funcs[721] = &scmple_df_impl;
    impl_funcs[722] = &sucmple_df_impl;
    impl_funcs[723] = &scmpge_df_impl;
    impl_funcs[724] = &sucmpge_df_impl;
    impl_funcs[725] = &scmpne_df_impl;
    impl_funcs[726] = &sucmpne_df_impl;
    impl_funcs[727] = &scast_dd_impl;
    impl_funcs[728] = &sucast_dd_impl;
    impl_funcs[729] = &sadd_dd_impl;
    impl_funcs[730] = &suadd_dd_impl;
    impl_funcs[731] = &ssub_dd_impl;
    impl_funcs[732] = &susub_dd_impl;
    impl_funcs[733] = &smul_dd_impl;
    impl_funcs[734] = &sumul_dd_impl;
    impl_funcs[735] = &sdiv_dd_impl;
    impl_funcs[736] = &sudiv_dd_impl;
    impl_funcs[737] = &scmpl_dd_impl;
    impl_funcs[738] = &sucmpl_dd_impl;
    impl_funcs[739] = &scmpg_dd_impl;
    impl_funcs[740] = &sucmpg_dd_impl;
    impl_funcs[741] = &scmpe_dd_impl;
    impl_funcs[742] = &sucmpe_dd_impl;
    impl_funcs[743] = &scmple_dd_impl;
    impl_funcs[744] = &sucmple_dd_impl;
    impl_funcs[745] = &scmpge_dd_impl;
    impl_funcs[746] = &sucmpge_dd_impl;
    impl_funcs[747] = &scmpne_dd_impl;
    impl_funcs[748] = &sucmpne_dd_impl;
    impl_funcs[749] = &smod_b_impl;
    impl_funcs[750] = &scast_ub_impl;
    impl_funcs[751] = &sucast_ub_impl;
    impl_funcs[752] = &sadd_ub_impl;
    impl_funcs[753] = &suadd_ub_impl;
    impl_funcs[754] = &ssub_ub_impl;
    impl_funcs[755] = &susub_ub_impl;
    impl_funcs[756] = &smul_ub_impl;
    impl_funcs[757] = &sumul_ub_impl;
    impl_funcs[758] = &sdiv_ub_impl;
    impl_funcs[759] = &sudiv_ub_impl;
    impl_funcs[760] = &scmpl_ub_impl;
    impl_funcs[761] = &sucmpl_ub_impl;
    impl_funcs[762] = &scmpg_ub_impl;
    impl_funcs[763] = &sucmpg_ub_impl;
    impl_funcs[764] = &scmpe_ub_impl;
    impl_funcs[765] = &sucmpe_ub_impl;
    impl_funcs[766] = &scmple_ub_impl;
    impl_funcs[767] = &sucmple_ub_impl;
    impl_funcs[768] = &scmpge_ub_impl;
    impl_funcs[769] = &sucmpge_ub_impl;
    impl_funcs[770] = &scmpne_ub_impl;
    impl_funcs[771] = &sucmpne_ub_impl;
    impl_funcs[772] = &sswapb_impl;
    impl_funcs[773] = &smod_s_impl;
    impl_funcs[774] = &scast_us_impl;
    impl_funcs[775] = &sucast_us_impl;
    impl_funcs[776] = &sadd_us_impl;
    impl_funcs[777] = &suadd_us_impl;
    impl_funcs[778] = &ssub_us_impl;
    impl_funcs[779] = &susub_us_impl;
    impl_funcs[780] = &smul_us_impl;
    impl_funcs[781] = &sumul_us_impl;
    impl_funcs[782] = &sdiv_us_impl;
    impl_funcs[783] = &sudiv_us_impl;
    impl_funcs[784] = &scmpl_us_impl;
    impl_funcs[785] = &sucmpl_us_impl;
    impl_funcs[786] = &scmpg_us_impl;
    impl_funcs[787] = &sucmpg_us_impl;
    impl_funcs[788] = &scmpe_us_impl;
    impl_funcs[789] = &sucmpe_us_impl;
    impl_funcs[790] = &scmple_us_impl;
    impl_funcs[791] = &sucmple_us_impl;
    impl_funcs[792] = &scmpge_us_impl;
    impl_funcs[793] = &sucmpge_us_impl;
    impl_funcs[794] = &scmpne_us_impl;
    impl_funcs[795] = &sucmpne_us_impl;
    impl_funcs[796] = &sswaps_impl;
    impl_funcs[797] = &smod_i_impl;
    impl_funcs[798] = &scast_ui_impl;
    impl_funcs[799] = &sucast_ui_impl;
    impl_funcs[800] = &sadd_ui_impl;
    impl_funcs[801] = &suadd_ui_impl;
    impl_funcs[802] = &ssub_ui_impl;
    impl_funcs[803] = &susub_ui_impl;
    impl_funcs[804] = &smul_ui_impl;
    impl_funcs[805] = &sumul_ui_impl;
    impl_funcs[806] = &sdiv_ui_impl;
    impl_funcs[807] = &sudiv_ui_impl;
    impl_funcs[808] = &scmpl_ui_impl;
    impl_funcs[809] = &sucmpl_ui_impl;
    impl_funcs[810] = &scmpg_ui_impl;
    impl_funcs[811] = &sucmpg_ui_impl;
    impl_funcs[812] = &scmpe_ui_impl;
    impl_funcs[813] = &sucmpe_ui_impl;
    impl_funcs[814] = &scmple_ui_impl;
    impl_funcs[815] = &sucmple_ui_impl;
    impl_funcs[816] = &scmpge_ui_impl;
    impl_funcs[817] = &sucmpge_ui_impl;
    impl_funcs[818] = &scmpne_ui_impl;
    impl_funcs[819] = &sucmpne_ui_impl;
    impl_funcs[820] = &sswapi_impl;
    impl_funcs[821] = &smod_l_impl;
    impl_funcs[822] = &scast_ul_impl;
    impl_funcs[823] = &sucast_ul_impl;
    impl_funcs[824] = &sadd_ul_impl;
    impl_funcs[825] = &suadd_ul_impl;
    impl_funcs[826] = &ssub_ul_impl;
    impl_funcs[827] = &susub_ul_impl;
    impl_funcs[828] = &smul_ul_impl;
    impl_funcs[829] = &sumul_ul_impl;
    impl_funcs[830] = &sdiv_ul_impl;
    impl_funcs[831] = &sudiv_ul_impl;
    impl_funcs[832] = &scmpl_ul_impl;
    impl_funcs[833] = &sucmpl_ul_impl;
    impl_funcs[834] = &scmpg_ul_impl;
    impl_funcs[835] = &sucmpg_ul_impl;
    impl_funcs[836] = &scmpe_ul_impl;
    impl_funcs[837] = &sucmpe_ul_impl;
    impl_funcs[838] = &scmple_ul_impl;
    impl_funcs[839] = &sucmple_ul_impl;
    impl_funcs[840] = &scmpge_ul_impl;
    impl_funcs[841] = &sucmpge_ul_impl;
    impl_funcs[842] = &scmpne_ul_impl;
    impl_funcs[843] = &sucmpne_ul_impl;
    impl_funcs[844] = &sswapl_impl;
    impl_funcs[845] = &smod_li_impl;
    impl_funcs[846] = &scast_uli_impl;
    impl_funcs[847] = &sucast_uli_impl;
    impl_funcs[848] = &sadd_uli_impl;
    impl_funcs[849] = &suadd_uli_impl;
    impl_funcs[850] = &ssub_uli_impl;
    impl_funcs[851] = &susub_uli_impl;
    impl_funcs[852] = &smul_uli_impl;
    impl_funcs[853] = &sumul_uli_impl;
    impl_funcs[854] = &sdiv_uli_impl;
    impl_funcs[855] = &sudiv_uli_impl;
    impl_funcs[856] = &scmpl_uli_impl;
    impl_funcs[857] = &sucmpl_uli_impl;
    impl_funcs[858] = &scmpg_uli_impl;
    impl_funcs[859] = &sucmpg_uli_impl;
    impl_funcs[860] = &scmpe_uli_impl;
    impl_funcs[861] = &sucmpe_uli_impl;
    impl_funcs[862] = &scmple_uli_impl;
    impl_funcs[863] = &sucmple_uli_impl;
    impl_funcs[864] = &scmpge_uli_impl;
    impl_funcs[865] = &sucmpge_uli_impl;
    impl_funcs[866] = &scmpne_uli_impl;
    impl_funcs[867] = &sucmpne_uli_impl;
    impl_funcs[868] = &sswapli_impl;
    impl_funcs[869] = &smod_ll_impl;
    impl_funcs[870] = &scast_ull_impl;
    impl_funcs[871] = &sucast_ull_impl;
    impl_funcs[872] = &sadd_ull_impl;
    impl_funcs[873] = &suadd_ull_impl;
    impl_funcs[874] = &ssub_ull_impl;
    impl_funcs[875] = &susub_ull_impl;
    impl_funcs[876] = &smul_ull_impl;
    impl_funcs[877] = &sumul_ull_impl;
    impl_funcs[878] = &sdiv_ull_impl;
    impl_funcs[879] = &sudiv_ull_impl;
    impl_funcs[880] = &scmpl_ull_impl;
    impl_funcs[881] = &sucmpl_ull_impl;
    impl_funcs[882] = &scmpg_ull_impl;
    impl_funcs[883] = &sucmpg_ull_impl;
    impl_funcs[884] = &scmpe_ull_impl;
    impl_funcs[885] = &sucmpe_ull_impl;
    impl_funcs[886] = &scmple_ull_impl;
    impl_funcs[887] = &sucmple_ull_impl;
    impl_funcs[888] = &scmpge_ull_impl;
    impl_funcs[889] = &sucmpge_ull_impl;
    impl_funcs[890] = &scmpne_ull_impl;
    impl_funcs[891] = &sucmpne_ull_impl;
    impl_funcs[892] = &sswapll_impl;
    impl_funcs[893] = &sswapf_impl;
    impl_funcs[894] = &sswapd_impl;
    impl_funcs[895] = &sswapdf_impl;
    impl_funcs[896] = &sswapdd_impl;
    impl_funcs[897] = &sswapa_impl;
    impl_funcs[898] = &sand_b_impl;
    impl_funcs[899] = &sor_b_impl;
    impl_funcs[900] = &sxor_b_impl;
    impl_funcs[901] = &sshftr_b_impl;
    impl_funcs[902] = &sshftl_b_impl;
    impl_funcs[903] = &sand_s_impl;
    impl_funcs[904] = &sor_s_impl;
    impl_funcs[905] = &sxor_s_impl;
    impl_funcs[906] = &sshftr_s_impl;
    impl_funcs[907] = &sshftl_s_impl;
    impl_funcs[908] = &sand_i_impl;
    impl_funcs[909] = &sor_i_impl;
    impl_funcs[910] = &sxor_i_impl;
    impl_funcs[911] = &sshftr_i_impl;
    impl_funcs[912] = &sshftl_i_impl;
    impl_funcs[913] = &sand_l_impl;
    impl_funcs[914] = &sor_l_impl;
    impl_funcs[915] = &sxor_l_impl;
    impl_funcs[916] = &sshftr_l_impl;
    impl_funcs[917] = &sshftl_l_impl;
    impl_funcs[918] = &sand_li_impl;
    impl_funcs[919] = &sor_li_impl;
    impl_funcs[920] = &sxor_li_impl;
    impl_funcs[921] = &sshftr_li_impl;
    impl_funcs[922] = &sshftl_li_impl;
    impl_funcs[923] = &sand_ll_impl;
    impl_funcs[924] = &sor_ll_impl;
    impl_funcs[925] = &sxor_ll_impl;
    impl_funcs[926] = &sshftr_ll_impl;
    impl_funcs[927] = &sshftl_ll_impl;
    impl_funcs[928] = &sdup_impl;
    impl_funcs[929] = &sdup2_impl;
    impl_funcs[930] = &sdup3_impl;
    impl_funcs[931] = &sdup4_impl;
    impl_funcs[932] = &sdup5_impl;
    impl_funcs[933] = &sswap_impl;
    impl_funcs[934] = &srot_impl;
    impl_funcs[935] = &sset_impl;
    impl_funcs[936] = &sget_impl;
    impl_funcs[937] = &svset_impl;
    impl_funcs[938] = &ssget_impl;
    impl_funcs[939] = &ssset_impl;
    impl_funcs[940] = &ssetl_impl;
    impl_funcs[941] = &sinc_1_impl;
    impl_funcs[942] = &sinc_2_impl;
    impl_funcs[943] = &sstinc_1_impl;
    impl_funcs[944] = &sstinc_2_impl;
    impl_funcs[945] = &sreturn_impl;
    impl_funcs[946] = &smainst_impl;
    impl_funcs[947] = &smainst_0_impl;
    impl_funcs[948] = &smainst_1_impl;
    impl_funcs[949] = &smainst_2_impl;
    impl_funcs[950] = &smainst_3_impl;
    impl_funcs[951] = &sprint_impl;
    impl_funcs[952] = &suprint_impl;
    impl_funcs[953] = &iconst_impl;
    impl_funcs[954] = &iconst_0_impl;
    impl_funcs[955] = &iconst_1_impl;
    impl_funcs[956] = &iconst_2_impl;
    impl_funcs[957] = &iconst_3_impl;
    impl_funcs[958] = &iconst_4_impl;
    impl_funcs[959] = &iconst_5_impl;
    impl_funcs[960] = &iconst_6_impl;
    impl_funcs[961] = &iconst_9_impl;
    impl_funcs[962] = &iconst_10_impl;
    impl_funcs[963] = &iconst_11_impl;
    impl_funcs[964] = &iconst_12_impl;
    impl_funcs[965] = &iload_impl;
    impl_funcs[966] = &iload_0_impl;
    impl_funcs[967] = &iload_1_impl;
    impl_funcs[968] = &iload_2_impl;
    impl_funcs[969] = &iload_3_impl;
    impl_funcs[970] = &iload_4_impl;
    impl_funcs[971] = &istore_impl;
    impl_funcs[972] = &istore_0_impl;
    impl_funcs[973] = &istore_1_impl;
    impl_funcs[974] = &istore_2_impl;
    impl_funcs[975] = &istore_3_impl;
    impl_funcs[976] = &istore_4_impl;
    impl_funcs[977] = &icast_b_impl;
    impl_funcs[978] = &iucast_b_impl;
    impl_funcs[979] = &iadd_b_impl;
    impl_funcs[980] = &iuadd_b_impl;
    impl_funcs[981] = &isub_b_impl;
    impl_funcs[982] = &iusub_b_impl;
    impl_funcs[983] = &imul_b_impl;
    impl_funcs[984] = &iumul_b_impl;
    impl_funcs[985] = &idiv_b_impl;
    impl_funcs[986] = &iudiv_b_impl;
    impl_funcs[987] = &icmpl_b_impl;
    impl_funcs[988] = &iucmpl_b_impl;
    impl_funcs[989] = &icmpg_b_impl;
    impl_funcs[990] = &iucmpg_b_impl;
    impl_funcs[991] = &icmpe_b_impl;
    impl_funcs[992] = &iucmpe_b_impl;
    impl_funcs[993] = &icmple_b_impl;
    impl_funcs[994] = &iucmple_b_impl;
    impl_funcs[995] = &icmpge_b_impl;
    impl_funcs[996] = &iucmpge_b_impl;
    impl_funcs[997] = &icmpne_b_impl;
    impl_funcs[998] = &iucmpne_b_impl;
    impl_funcs[999] = &icast_s_impl;
    impl_funcs[1000] = &iucast_s_impl;
    impl_funcs[1001] = &iadd_s_impl;
    impl_funcs[1002] = &iuadd_s_impl;
    impl_funcs[1003] = &isub_s_impl;
    impl_funcs[1004] = &iusub_s_impl;
    impl_funcs[1005] = &imul_s_impl;
    impl_funcs[1006] = &iumul_s_impl;
    impl_funcs[1007] = &idiv_s_impl;
    impl_funcs[1008] = &iudiv_s_impl;
    impl_funcs[1009] = &icmpl_s_impl;
    impl_funcs[1010] = &iucmpl_s_impl;
    impl_funcs[1011] = &icmpg_s_impl;
    impl_funcs[1012] = &iucmpg_s_impl;
    impl_funcs[1013] = &icmpe_s_impl;
    impl_funcs[1014] = &iucmpe_s_impl;
    impl_funcs[1015] = &icmple_s_impl;
    impl_funcs[1016] = &iucmple_s_impl;
    impl_funcs[1017] = &icmpge_s_impl;
    impl_funcs[1018] = &iucmpge_s_impl;
    impl_funcs[1019] = &icmpne_s_impl;
    impl_funcs[1020] = &iucmpne_s_impl;
    impl_funcs[1021] = &icast_i_impl;
    impl_funcs[1022] = &iucast_i_impl;
    impl_funcs[1023] = &iadd_i_impl;
    impl_funcs[1024] = &iuadd_i_impl;
    impl_funcs[1025] = &isub_i_impl;
    impl_funcs[1026] = &iusub_i_impl;
    impl_funcs[1027] = &imul_i_impl;
    impl_funcs[1028] = &iumul_i_impl;
    impl_funcs[1029] = &idiv_i_impl;
    impl_funcs[1030] = &iudiv_i_impl;
    impl_funcs[1031] = &icmpl_i_impl;
    impl_funcs[1032] = &iucmpl_i_impl;
    impl_funcs[1033] = &icmpg_i_impl;
    impl_funcs[1034] = &iucmpg_i_impl;
    impl_funcs[1035] = &icmpe_i_impl;
    impl_funcs[1036] = &iucmpe_i_impl;
    impl_funcs[1037] = &icmple_i_impl;
    impl_funcs[1038] = &iucmple_i_impl;
    impl_funcs[1039] = &icmpge_i_impl;
    impl_funcs[1040] = &iucmpge_i_impl;
    impl_funcs[1041] = &icmpne_i_impl;
    impl_funcs[1042] = &iucmpne_i_impl;
    impl_funcs[1043] = &icast_l_impl;
    impl_funcs[1044] = &iucast_l_impl;
    impl_funcs[1045] = &iadd_l_impl;
    impl_funcs[1046] = &iuadd_l_impl;
    impl_funcs[1047] = &isub_l_impl;
    impl_funcs[1048] = &iusub_l_impl;
    impl_funcs[1049] = &imul_l_impl;
    impl_funcs[1050] = &iumul_l_impl;
    impl_funcs[1051] = &idiv_l_impl;
    impl_funcs[1052] = &iudiv_l_impl;
    impl_funcs[1053] = &icmpl_l_impl;
    impl_funcs[1054] = &iucmpl_l_impl;
    impl_funcs[1055] = &icmpg_l_impl;
    impl_funcs[1056] = &iucmpg_l_impl;
    impl_funcs[1057] = &icmpe_l_impl;
    impl_funcs[1058] = &iucmpe_l_impl;
    impl_funcs[1059] = &icmple_l_impl;
    impl_funcs[1060] = &iucmple_l_impl;
    impl_funcs[1061] = &icmpge_l_impl;
    impl_funcs[1062] = &iucmpge_l_impl;
    impl_funcs[1063] = &icmpne_l_impl;
    impl_funcs[1064] = &iucmpne_l_impl;
    impl_funcs[1065] = &icast_li_impl;
    impl_funcs[1066] = &iucast_li_impl;
    impl_funcs[1067] = &iadd_li_impl;
    impl_funcs[1068] = &iuadd_li_impl;
    impl_funcs[1069] = &isub_li_impl;
    impl_funcs[1070] = &iusub_li_impl;
    impl_funcs[1071] = &imul_li_impl;
    impl_funcs[1072] = &iumul_li_impl;
    impl_funcs[1073] = &idiv_li_impl;
    impl_funcs[1074] = &iudiv_li_impl;
    impl_funcs[1075] = &icmpl_li_impl;
    impl_funcs[1076] = &iucmpl_li_impl;
    impl_funcs[1077] = &icmpg_li_impl;
    impl_funcs[1078] = &iucmpg_li_impl;
    impl_funcs[1079] = &icmpe_li_impl;
    impl_funcs[1080] = &iucmpe_li_impl;
    impl_funcs[1081] = &icmple_li_impl;
    impl_funcs[1082] = &iucmple_li_impl;
    impl_funcs[1083] = &icmpge_li_impl;
    impl_funcs[1084] = &iucmpge_li_impl;
    impl_funcs[1085] = &icmpne_li_impl;
    impl_funcs[1086] = &iucmpne_li_impl;
    impl_funcs[1087] = &icast_ll_impl;
    impl_funcs[1088] = &iucast_ll_impl;
    impl_funcs[1089] = &iadd_ll_impl;
    impl_funcs[1090] = &iuadd_ll_impl;
    impl_funcs[1091] = &isub_ll_impl;
    impl_funcs[1092] = &iusub_ll_impl;
    impl_funcs[1093] = &imul_ll_impl;
    impl_funcs[1094] = &iumul_ll_impl;
    impl_funcs[1095] = &idiv_ll_impl;
    impl_funcs[1096] = &iudiv_ll_impl;
    impl_funcs[1097] = &icmpl_ll_impl;
    impl_funcs[1098] = &iucmpl_ll_impl;
    impl_funcs[1099] = &icmpg_ll_impl;
    impl_funcs[1100] = &iucmpg_ll_impl;
    impl_funcs[1101] = &icmpe_ll_impl;
    impl_funcs[1102] = &iucmpe_ll_impl;
    impl_funcs[1103] = &icmple_ll_impl;
    impl_funcs[1104] = &iucmple_ll_impl;
    impl_funcs[1105] = &icmpge_ll_impl;
    impl_funcs[1106] = &iucmpge_ll_impl;
    impl_funcs[1107] = &icmpne_ll_impl;
    impl_funcs[1108] = &iucmpne_ll_impl;
    impl_funcs[1109] = &icast_f_impl;
    impl_funcs[1110] = &iucast_f_impl;
    impl_funcs[1111] = &iadd_f_impl;
    impl_funcs[1112] = &iuadd_f_impl;
    impl_funcs[1113] = &isub_f_impl;
    impl_funcs[1114] = &iusub_f_impl;
    impl_funcs[1115] = &imul_f_impl;
    impl_funcs[1116] = &iumul_f_impl;
    impl_funcs[1117] = &idiv_f_impl;
    impl_funcs[1118] = &iudiv_f_impl;
    impl_funcs[1119] = &icmpl_f_impl;
    impl_funcs[1120] = &iucmpl_f_impl;
    impl_funcs[1121] = &icmpg_f_impl;
    impl_funcs[1122] = &iucmpg_f_impl;
    impl_funcs[1123] = &icmpe_f_impl;
    impl_funcs[1124] = &iucmpe_f_impl;
    impl_funcs[1125] = &icmple_f_impl;
    impl_funcs[1126] = &iucmple_f_impl;
    impl_funcs[1127] = &icmpge_f_impl;
    impl_funcs[1128] = &iucmpge_f_impl;
    impl_funcs[1129] = &icmpne_f_impl;
    impl_funcs[1130] = &iucmpne_f_impl;
    impl_funcs[1131] = &icast_d_impl;
    impl_funcs[1132] = &iucast_d_impl;
    impl_funcs[1133] = &iadd_d_impl;
    impl_funcs[1134] = &iuadd_d_impl;
    impl_funcs[1135] = &isub_d_impl;
    impl_funcs[1136] = &iusub_d_impl;
    impl_funcs[1137] = &imul_d_impl;
    impl_funcs[1138] = &iumul_d_impl;
    impl_funcs[1139] = &idiv_d_impl;
    impl_funcs[1140] = &iudiv_d_impl;
    impl_funcs[1141] = &icmpl_d_impl;
    impl_funcs[1142] = &iucmpl_d_impl;
    impl_funcs[1143] = &icmpg_d_impl;
    impl_funcs[1144] = &iucmpg_d_impl;
    impl_funcs[1145] = &icmpe_d_impl;
    impl_funcs[1146] = &iucmpe_d_impl;
    impl_funcs[1147] = &icmple_d_impl;
    impl_funcs[1148] = &iucmple_d_impl;
    impl_funcs[1149] = &icmpge_d_impl;
    impl_funcs[1150] = &iucmpge_d_impl;
    impl_funcs[1151] = &icmpne_d_impl;
    impl_funcs[1152] = &iucmpne_d_impl;
    impl_funcs[1153] = &icast_df_impl;
    impl_funcs[1154] = &iucast_df_impl;
    impl_funcs[1155] = &iadd_df_impl;
    impl_funcs[1156] = &iuadd_df_impl;
    impl_funcs[1157] = &isub_df_impl;
    impl_funcs[1158] = &iusub_df_impl;
    impl_funcs[1159] = &imul_df_impl;
    impl_funcs[1160] = &iumul_df_impl;
    impl_funcs[1161] = &idiv_df_impl;
    impl_funcs[1162] = &iudiv_df_impl;
    impl_funcs[1163] = &icmpl_df_impl;
    impl_funcs[1164] = &iucmpl_df_impl;
    impl_funcs[1165] = &icmpg_df_impl;
    impl_funcs[1166] = &iucmpg_df_impl;
    impl_funcs[1167] = &icmpe_df_impl;
    impl_funcs[1168] = &iucmpe_df_impl;
    impl_funcs[1169] = &icmple_df_impl;
    impl_funcs[1170] = &iucmple_df_impl;
    impl_funcs[1171] = &icmpge_df_impl;
    impl_funcs[1172] = &iucmpge_df_impl;
    impl_funcs[1173] = &icmpne_df_impl;
    impl_funcs[1174] = &iucmpne_df_impl;
    impl_funcs[1175] = &icast_dd_impl;
    impl_funcs[1176] = &iucast_dd_impl;
    impl_funcs[1177] = &iadd_dd_impl;
    impl_funcs[1178] = &iuadd_dd_impl;
    impl_funcs[1179] = &isub_dd_impl;
    impl_funcs[1180] = &iusub_dd_impl;
    impl_funcs[1181] = &imul_dd_impl;
    impl_funcs[1182] = &iumul_dd_impl;
    impl_funcs[1183] = &idiv_dd_impl;
    impl_funcs[1184] = &iudiv_dd_impl;
    impl_funcs[1185] = &icmpl_dd_impl;
    impl_funcs[1186] = &iucmpl_dd_impl;
    impl_funcs[1187] = &icmpg_dd_impl;
    impl_funcs[1188] = &iucmpg_dd_impl;
    impl_funcs[1189] = &icmpe_dd_impl;
    impl_funcs[1190] = &iucmpe_dd_impl;
    impl_funcs[1191] = &icmple_dd_impl;
    impl_funcs[1192] = &iucmple_dd_impl;
    impl_funcs[1193] = &icmpge_dd_impl;
    impl_funcs[1194] = &iucmpge_dd_impl;
    impl_funcs[1195] = &icmpne_dd_impl;
    impl_funcs[1196] = &iucmpne_dd_impl;
    impl_funcs[1197] = &imod_b_impl;
    impl_funcs[1198] = &icast_ub_impl;
    impl_funcs[1199] = &iucast_ub_impl;
    impl_funcs[1200] = &iadd_ub_impl;
    impl_funcs[1201] = &iuadd_ub_impl;
    impl_funcs[1202] = &isub_ub_impl;
    impl_funcs[1203] = &iusub_ub_impl;
    impl_funcs[1204] = &imul_ub_impl;
    impl_funcs[1205] = &iumul_ub_impl;
    impl_funcs[1206] = &idiv_ub_impl;
    impl_funcs[1207] = &iudiv_ub_impl;
    impl_funcs[1208] = &icmpl_ub_impl;
    impl_funcs[1209] = &iucmpl_ub_impl;
    impl_funcs[1210] = &icmpg_ub_impl;
    impl_funcs[1211] = &iucmpg_ub_impl;
    impl_funcs[1212] = &icmpe_ub_impl;
    impl_funcs[1213] = &iucmpe_ub_impl;
    impl_funcs[1214] = &icmple_ub_impl;
    impl_funcs[1215] = &iucmple_ub_impl;
    impl_funcs[1216] = &icmpge_ub_impl;
    impl_funcs[1217] = &iucmpge_ub_impl;
    impl_funcs[1218] = &icmpne_ub_impl;
    impl_funcs[1219] = &iucmpne_ub_impl;
    impl_funcs[1220] = &iswapb_impl;
    impl_funcs[1221] = &imod_s_impl;
    impl_funcs[1222] = &icast_us_impl;
    impl_funcs[1223] = &iucast_us_impl;
    impl_funcs[1224] = &iadd_us_impl;
    impl_funcs[1225] = &iuadd_us_impl;
    impl_funcs[1226] = &isub_us_impl;
    impl_funcs[1227] = &iusub_us_impl;
    impl_funcs[1228] = &imul_us_impl;
    impl_funcs[1229] = &iumul_us_impl;
    impl_funcs[1230] = &idiv_us_impl;
    impl_funcs[1231] = &iudiv_us_impl;
    impl_funcs[1232] = &icmpl_us_impl;
    impl_funcs[1233] = &iucmpl_us_impl;
    impl_funcs[1234] = &icmpg_us_impl;
    impl_funcs[1235] = &iucmpg_us_impl;
    impl_funcs[1236] = &icmpe_us_impl;
    impl_funcs[1237] = &iucmpe_us_impl;
    impl_funcs[1238] = &icmple_us_impl;
    impl_funcs[1239] = &iucmple_us_impl;
    impl_funcs[1240] = &icmpge_us_impl;
    impl_funcs[1241] = &iucmpge_us_impl;
    impl_funcs[1242] = &icmpne_us_impl;
    impl_funcs[1243] = &iucmpne_us_impl;
    impl_funcs[1244] = &iswaps_impl;
    impl_funcs[1245] = &imod_i_impl;
    impl_funcs[1246] = &icast_ui_impl;
    impl_funcs[1247] = &iucast_ui_impl;
    impl_funcs[1248] = &iadd_ui_impl;
    impl_funcs[1249] = &iuadd_ui_impl;
    impl_funcs[1250] = &isub_ui_impl;
    impl_funcs[1251] = &iusub_ui_impl;
    impl_funcs[1252] = &imul_ui_impl;
    impl_funcs[1253] = &iumul_ui_impl;
    impl_funcs[1254] = &idiv_ui_impl;
    impl_funcs[1255] = &iudiv_ui_impl;
    impl_funcs[1256] = &icmpl_ui_impl;
    impl_funcs[1257] = &iucmpl_ui_impl;
    impl_funcs[1258] = &icmpg_ui_impl;
    impl_funcs[1259] = &iucmpg_ui_impl;
    impl_funcs[1260] = &icmpe_ui_impl;
    impl_funcs[1261] = &iucmpe_ui_impl;
    impl_funcs[1262] = &icmple_ui_impl;
    impl_funcs[1263] = &iucmple_ui_impl;
    impl_funcs[1264] = &icmpge_ui_impl;
    impl_funcs[1265] = &iucmpge_ui_impl;
    impl_funcs[1266] = &icmpne_ui_impl;
    impl_funcs[1267] = &iucmpne_ui_impl;
    impl_funcs[1268] = &iswapi_impl;
    impl_funcs[1269] = &imod_l_impl;
    impl_funcs[1270] = &icast_ul_impl;
    impl_funcs[1271] = &iucast_ul_impl;
    impl_funcs[1272] = &iadd_ul_impl;
    impl_funcs[1273] = &iuadd_ul_impl;
    impl_funcs[1274] = &isub_ul_impl;
    impl_funcs[1275] = &iusub_ul_impl;
    impl_funcs[1276] = &imul_ul_impl;
    impl_funcs[1277] = &iumul_ul_impl;
    impl_funcs[1278] = &idiv_ul_impl;
    impl_funcs[1279] = &iudiv_ul_impl;
    impl_funcs[1280] = &icmpl_ul_impl;
    impl_funcs[1281] = &iucmpl_ul_impl;
    impl_funcs[1282] = &icmpg_ul_impl;
    impl_funcs[1283] = &iucmpg_ul_impl;
    impl_funcs[1284] = &icmpe_ul_impl;
    impl_funcs[1285] = &iucmpe_ul_impl;
    impl_funcs[1286] = &icmple_ul_impl;
    impl_funcs[1287] = &iucmple_ul_impl;
    impl_funcs[1288] = &icmpge_ul_impl;
    impl_funcs[1289] = &iucmpge_ul_impl;
    impl_funcs[1290] = &icmpne_ul_impl;
    impl_funcs[1291] = &iucmpne_ul_impl;
    impl_funcs[1292] = &iswapl_impl;
    impl_funcs[1293] = &imod_li_impl;
    impl_funcs[1294] = &icast_uli_impl;
    impl_funcs[1295] = &iucast_uli_impl;
    impl_funcs[1296] = &iadd_uli_impl;
    impl_funcs[1297] = &iuadd_uli_impl;
    impl_funcs[1298] = &isub_uli_impl;
    impl_funcs[1299] = &iusub_uli_impl;
    impl_funcs[1300] = &imul_uli_impl;
    impl_funcs[1301] = &iumul_uli_impl;
    impl_funcs[1302] = &idiv_uli_impl;
    impl_funcs[1303] = &iudiv_uli_impl;
    impl_funcs[1304] = &icmpl_uli_impl;
    impl_funcs[1305] = &iucmpl_uli_impl;
    impl_funcs[1306] = &icmpg_uli_impl;
    impl_funcs[1307] = &iucmpg_uli_impl;
    impl_funcs[1308] = &icmpe_uli_impl;
    impl_funcs[1309] = &iucmpe_uli_impl;
    impl_funcs[1310] = &icmple_uli_impl;
    impl_funcs[1311] = &iucmple_uli_impl;
    impl_funcs[1312] = &icmpge_uli_impl;
    impl_funcs[1313] = &iucmpge_uli_impl;
    impl_funcs[1314] = &icmpne_uli_impl;
    impl_funcs[1315] = &iucmpne_uli_impl;
    impl_funcs[1316] = &iswapli_impl;
    impl_funcs[1317] = &imod_ll_impl;
    impl_funcs[1318] = &icast_ull_impl;
    impl_funcs[1319] = &iucast_ull_impl;
    impl_funcs[1320] = &iadd_ull_impl;
    impl_funcs[1321] = &iuadd_ull_impl;
    impl_funcs[1322] = &isub_ull_impl;
    impl_funcs[1323] = &iusub_ull_impl;
    impl_funcs[1324] = &imul_ull_impl;
    impl_funcs[1325] = &iumul_ull_impl;
    impl_funcs[1326] = &idiv_ull_impl;
    impl_funcs[1327] = &iudiv_ull_impl;
    impl_funcs[1328] = &icmpl_ull_impl;
    impl_funcs[1329] = &iucmpl_ull_impl;
    impl_funcs[1330] = &icmpg_ull_impl;
    impl_funcs[1331] = &iucmpg_ull_impl;
    impl_funcs[1332] = &icmpe_ull_impl;
    impl_funcs[1333] = &iucmpe_ull_impl;
    impl_funcs[1334] = &icmple_ull_impl;
    impl_funcs[1335] = &iucmple_ull_impl;
    impl_funcs[1336] = &icmpge_ull_impl;
    impl_funcs[1337] = &iucmpge_ull_impl;
    impl_funcs[1338] = &icmpne_ull_impl;
    impl_funcs[1339] = &iucmpne_ull_impl;
    impl_funcs[1340] = &iswapll_impl;
    impl_funcs[1341] = &iswapf_impl;
    impl_funcs[1342] = &iswapd_impl;
    impl_funcs[1343] = &iswapdf_impl;
    impl_funcs[1344] = &iswapdd_impl;
    impl_funcs[1345] = &iswapa_impl;
    impl_funcs[1346] = &iand_b_impl;
    impl_funcs[1347] = &ior_b_impl;
    impl_funcs[1348] = &ixor_b_impl;
    impl_funcs[1349] = &ishftr_b_impl;
    impl_funcs[1350] = &ishftl_b_impl;
    impl_funcs[1351] = &iand_s_impl;
    impl_funcs[1352] = &ior_s_impl;
    impl_funcs[1353] = &ixor_s_impl;
    impl_funcs[1354] = &ishftr_s_impl;
    impl_funcs[1355] = &ishftl_s_impl;
    impl_funcs[1356] = &iand_i_impl;
    impl_funcs[1357] = &ior_i_impl;
    impl_funcs[1358] = &ixor_i_impl;
    impl_funcs[1359] = &ishftr_i_impl;
    impl_funcs[1360] = &ishftl_i_impl;
    impl_funcs[1361] = &iand_l_impl;
    impl_funcs[1362] = &ior_l_impl;
    impl_funcs[1363] = &ixor_l_impl;
    impl_funcs[1364] = &ishftr_l_impl;
    impl_funcs[1365] = &ishftl_l_impl;
    impl_funcs[1366] = &iand_li_impl;
    impl_funcs[1367] = &ior_li_impl;
    impl_funcs[1368] = &ixor_li_impl;
    impl_funcs[1369] = &ishftr_li_impl;
    impl_funcs[1370] = &ishftl_li_impl;
    impl_funcs[1371] = &iand_ll_impl;
    impl_funcs[1372] = &ior_ll_impl;
    impl_funcs[1373] = &ixor_ll_impl;
    impl_funcs[1374] = &ishftr_ll_impl;
    impl_funcs[1375] = &ishftl_ll_impl;
    impl_funcs[1376] = &idup_impl;
    impl_funcs[1377] = &idup2_impl;
    impl_funcs[1378] = &idup3_impl;
    impl_funcs[1379] = &idup4_impl;
    impl_funcs[1380] = &idup5_impl;
    impl_funcs[1381] = &iswap_impl;
    impl_funcs[1382] = &irot_impl;
    impl_funcs[1383] = &iset_impl;
    impl_funcs[1384] = &iget_impl;
    impl_funcs[1385] = &ivset_impl;
    impl_funcs[1386] = &isget_impl;
    impl_funcs[1387] = &isset_impl;
    impl_funcs[1388] = &isetl_impl;
    impl_funcs[1389] = &iinc_1_impl;
    impl_funcs[1390] = &iinc_2_impl;
    impl_funcs[1391] = &istinc_1_impl;
    impl_funcs[1392] = &istinc_2_impl;
    impl_funcs[1393] = &ireturn_impl;
    impl_funcs[1394] = &imainst_impl;
    impl_funcs[1395] = &imainst_0_impl;
    impl_funcs[1396] = &imainst_1_impl;
    impl_funcs[1397] = &imainst_2_impl;
    impl_funcs[1398] = &imainst_3_impl;
    impl_funcs[1399] = &iprint_impl;
    impl_funcs[1400] = &iuprint_impl;
    impl_funcs[1401] = &lconst_impl;
    impl_funcs[1402] = &lconst_0_impl;
    impl_funcs[1403] = &lconst_1_impl;
    impl_funcs[1404] = &lconst_2_impl;
    impl_funcs[1405] = &lconst_3_impl;
    impl_funcs[1406] = &lconst_4_impl;
    impl_funcs[1407] = &lconst_5_impl;
    impl_funcs[1408] = &lconst_6_impl;
    impl_funcs[1409] = &lconst_9_impl;
    impl_funcs[1410] = &lconst_10_impl;
    impl_funcs[1411] = &lconst_11_impl;
    impl_funcs[1412] = &lconst_12_impl;
    impl_funcs[1413] = &lload_impl;
    impl_funcs[1414] = &lload_0_impl;
    impl_funcs[1415] = &lload_1_impl;
    impl_funcs[1416] = &lload_2_impl;
    impl_funcs[1417] = &lload_3_impl;
    impl_funcs[1418] = &lload_4_impl;
    impl_funcs[1419] = &lstore_impl;
    impl_funcs[1420] = &lstore_0_impl;
    impl_funcs[1421] = &lstore_1_impl;
    impl_funcs[1422] = &lstore_2_impl;
    impl_funcs[1423] = &lstore_3_impl;
    impl_funcs[1424] = &lstore_4_impl;
    impl_funcs[1425] = &lcast_b_impl;
    impl_funcs[1426] = &lucast_b_impl;
    impl_funcs[1427] = &ladd_b_impl;
    impl_funcs[1428] = &luadd_b_impl;
    impl_funcs[1429] = &lsub_b_impl;
    impl_funcs[1430] = &lusub_b_impl;
    impl_funcs[1431] = &lmul_b_impl;
    impl_funcs[1432] = &lumul_b_impl;
    impl_funcs[1433] = &ldiv_b_impl;
    impl_funcs[1434] = &ludiv_b_impl;
    impl_funcs[1435] = &lcmpl_b_impl;
    impl_funcs[1436] = &lucmpl_b_impl;
    impl_funcs[1437] = &lcmpg_b_impl;
    impl_funcs[1438] = &lucmpg_b_impl;
    impl_funcs[1439] = &lcmpe_b_impl;
    impl_funcs[1440] = &lucmpe_b_impl;
    impl_funcs[1441] = &lcmple_b_impl;
    impl_funcs[1442] = &lucmple_b_impl;
    impl_funcs[1443] = &lcmpge_b_impl;
    impl_funcs[1444] = &lucmpge_b_impl;
    impl_funcs[1445] = &lcmpne_b_impl;
    impl_funcs[1446] = &lucmpne_b_impl;
    impl_funcs[1447] = &lcast_s_impl;
    impl_funcs[1448] = &lucast_s_impl;
    impl_funcs[1449] = &ladd_s_impl;
    impl_funcs[1450] = &luadd_s_impl;
    impl_funcs[1451] = &lsub_s_impl;
    impl_funcs[1452] = &lusub_s_impl;
    impl_funcs[1453] = &lmul_s_impl;
    impl_funcs[1454] = &lumul_s_impl;
    impl_funcs[1455] = &ldiv_s_impl;
    impl_funcs[1456] = &ludiv_s_impl;
    impl_funcs[1457] = &lcmpl_s_impl;
    impl_funcs[1458] = &lucmpl_s_impl;
    impl_funcs[1459] = &lcmpg_s_impl;
    impl_funcs[1460] = &lucmpg_s_impl;
    impl_funcs[1461] = &lcmpe_s_impl;
    impl_funcs[1462] = &lucmpe_s_impl;
    impl_funcs[1463] = &lcmple_s_impl;
    impl_funcs[1464] = &lucmple_s_impl;
    impl_funcs[1465] = &lcmpge_s_impl;
    impl_funcs[1466] = &lucmpge_s_impl;
    impl_funcs[1467] = &lcmpne_s_impl;
    impl_funcs[1468] = &lucmpne_s_impl;
    impl_funcs[1469] = &lcast_i_impl;
    impl_funcs[1470] = &lucast_i_impl;
    impl_funcs[1471] = &ladd_i_impl;
    impl_funcs[1472] = &luadd_i_impl;
    impl_funcs[1473] = &lsub_i_impl;
    impl_funcs[1474] = &lusub_i_impl;
    impl_funcs[1475] = &lmul_i_impl;
    impl_funcs[1476] = &lumul_i_impl;
    impl_funcs[1477] = &ldiv_i_impl;
    impl_funcs[1478] = &ludiv_i_impl;
    impl_funcs[1479] = &lcmpl_i_impl;
    impl_funcs[1480] = &lucmpl_i_impl;
    impl_funcs[1481] = &lcmpg_i_impl;
    impl_funcs[1482] = &lucmpg_i_impl;
    impl_funcs[1483] = &lcmpe_i_impl;
    impl_funcs[1484] = &lucmpe_i_impl;
    impl_funcs[1485] = &lcmple_i_impl;
    impl_funcs[1486] = &lucmple_i_impl;
    impl_funcs[1487] = &lcmpge_i_impl;
    impl_funcs[1488] = &lucmpge_i_impl;
    impl_funcs[1489] = &lcmpne_i_impl;
    impl_funcs[1490] = &lucmpne_i_impl;
    impl_funcs[1491] = &lcast_l_impl;
    impl_funcs[1492] = &lucast_l_impl;
    impl_funcs[1493] = &ladd_l_impl;
    impl_funcs[1494] = &luadd_l_impl;
    impl_funcs[1495] = &lsub_l_impl;
    impl_funcs[1496] = &lusub_l_impl;
    impl_funcs[1497] = &lmul_l_impl;
    impl_funcs[1498] = &lumul_l_impl;
    impl_funcs[1499] = &ldiv_l_impl;
    impl_funcs[1500] = &ludiv_l_impl;
    impl_funcs[1501] = &lcmpl_l_impl;
    impl_funcs[1502] = &lucmpl_l_impl;
    impl_funcs[1503] = &lcmpg_l_impl;
    impl_funcs[1504] = &lucmpg_l_impl;
    impl_funcs[1505] = &lcmpe_l_impl;
    impl_funcs[1506] = &lucmpe_l_impl;
    impl_funcs[1507] = &lcmple_l_impl;
    impl_funcs[1508] = &lucmple_l_impl;
    impl_funcs[1509] = &lcmpge_l_impl;
    impl_funcs[1510] = &lucmpge_l_impl;
    impl_funcs[1511] = &lcmpne_l_impl;
    impl_funcs[1512] = &lucmpne_l_impl;
    impl_funcs[1513] = &lcast_li_impl;
    impl_funcs[1514] = &lucast_li_impl;
    impl_funcs[1515] = &ladd_li_impl;
    impl_funcs[1516] = &luadd_li_impl;
    impl_funcs[1517] = &lsub_li_impl;
    impl_funcs[1518] = &lusub_li_impl;
    impl_funcs[1519] = &lmul_li_impl;
    impl_funcs[1520] = &lumul_li_impl;
    impl_funcs[1521] = &ldiv_li_impl;
    impl_funcs[1522] = &ludiv_li_impl;
    impl_funcs[1523] = &lcmpl_li_impl;
    impl_funcs[1524] = &lucmpl_li_impl;
    impl_funcs[1525] = &lcmpg_li_impl;
    impl_funcs[1526] = &lucmpg_li_impl;
    impl_funcs[1527] = &lcmpe_li_impl;
    impl_funcs[1528] = &lucmpe_li_impl;
    impl_funcs[1529] = &lcmple_li_impl;
    impl_funcs[1530] = &lucmple_li_impl;
    impl_funcs[1531] = &lcmpge_li_impl;
    impl_funcs[1532] = &lucmpge_li_impl;
    impl_funcs[1533] = &lcmpne_li_impl;
    impl_funcs[1534] = &lucmpne_li_impl;
    impl_funcs[1535] = &lcast_ll_impl;
    impl_funcs[1536] = &lucast_ll_impl;
    impl_funcs[1537] = &ladd_ll_impl;
    impl_funcs[1538] = &luadd_ll_impl;
    impl_funcs[1539] = &lsub_ll_impl;
    impl_funcs[1540] = &lusub_ll_impl;
    impl_funcs[1541] = &lmul_ll_impl;
    impl_funcs[1542] = &lumul_ll_impl;
    impl_funcs[1543] = &ldiv_ll_impl;
    impl_funcs[1544] = &ludiv_ll_impl;
    impl_funcs[1545] = &lcmpl_ll_impl;
    impl_funcs[1546] = &lucmpl_ll_impl;
    impl_funcs[1547] = &lcmpg_ll_impl;
    impl_funcs[1548] = &lucmpg_ll_impl;
    impl_funcs[1549] = &lcmpe_ll_impl;
    impl_funcs[1550] = &lucmpe_ll_impl;
    impl_funcs[1551] = &lcmple_ll_impl;
    impl_funcs[1552] = &lucmple_ll_impl;
    impl_funcs[1553] = &lcmpge_ll_impl;
    impl_funcs[1554] = &lucmpge_ll_impl;
    impl_funcs[1555] = &lcmpne_ll_impl;
    impl_funcs[1556] = &lucmpne_ll_impl;
    impl_funcs[1557] = &lcast_f_impl;
    impl_funcs[1558] = &lucast_f_impl;
    impl_funcs[1559] = &ladd_f_impl;
    impl_funcs[1560] = &luadd_f_impl;
    impl_funcs[1561] = &lsub_f_impl;
    impl_funcs[1562] = &lusub_f_impl;
    impl_funcs[1563] = &lmul_f_impl;
    impl_funcs[1564] = &lumul_f_impl;
    impl_funcs[1565] = &ldiv_f_impl;
    impl_funcs[1566] = &ludiv_f_impl;
    impl_funcs[1567] = &lcmpl_f_impl;
    impl_funcs[1568] = &lucmpl_f_impl;
    impl_funcs[1569] = &lcmpg_f_impl;
    impl_funcs[1570] = &lucmpg_f_impl;
    impl_funcs[1571] = &lcmpe_f_impl;
    impl_funcs[1572] = &lucmpe_f_impl;
    impl_funcs[1573] = &lcmple_f_impl;
    impl_funcs[1574] = &lucmple_f_impl;
    impl_funcs[1575] = &lcmpge_f_impl;
    impl_funcs[1576] = &lucmpge_f_impl;
    impl_funcs[1577] = &lcmpne_f_impl;
    impl_funcs[1578] = &lucmpne_f_impl;
    impl_funcs[1579] = &lcast_d_impl;
    impl_funcs[1580] = &lucast_d_impl;
    impl_funcs[1581] = &ladd_d_impl;
    impl_funcs[1582] = &luadd_d_impl;
    impl_funcs[1583] = &lsub_d_impl;
    impl_funcs[1584] = &lusub_d_impl;
    impl_funcs[1585] = &lmul_d_impl;
    impl_funcs[1586] = &lumul_d_impl;
    impl_funcs[1587] = &ldiv_d_impl;
    impl_funcs[1588] = &ludiv_d_impl;
    impl_funcs[1589] = &lcmpl_d_impl;
    impl_funcs[1590] = &lucmpl_d_impl;
    impl_funcs[1591] = &lcmpg_d_impl;
    impl_funcs[1592] = &lucmpg_d_impl;
    impl_funcs[1593] = &lcmpe_d_impl;
    impl_funcs[1594] = &lucmpe_d_impl;
    impl_funcs[1595] = &lcmple_d_impl;
    impl_funcs[1596] = &lucmple_d_impl;
    impl_funcs[1597] = &lcmpge_d_impl;
    impl_funcs[1598] = &lucmpge_d_impl;
    impl_funcs[1599] = &lcmpne_d_impl;
    impl_funcs[1600] = &lucmpne_d_impl;
    impl_funcs[1601] = &lcast_df_impl;
    impl_funcs[1602] = &lucast_df_impl;
    impl_funcs[1603] = &ladd_df_impl;
    impl_funcs[1604] = &luadd_df_impl;
    impl_funcs[1605] = &lsub_df_impl;
    impl_funcs[1606] = &lusub_df_impl;
    impl_funcs[1607] = &lmul_df_impl;
    impl_funcs[1608] = &lumul_df_impl;
    impl_funcs[1609] = &ldiv_df_impl;
    impl_funcs[1610] = &ludiv_df_impl;
    impl_funcs[1611] = &lcmpl_df_impl;
    impl_funcs[1612] = &lucmpl_df_impl;
    impl_funcs[1613] = &lcmpg_df_impl;
    impl_funcs[1614] = &lucmpg_df_impl;
    impl_funcs[1615] = &lcmpe_df_impl;
    impl_funcs[1616] = &lucmpe_df_impl;
    impl_funcs[1617] = &lcmple_df_impl;
    impl_funcs[1618] = &lucmple_df_impl;
    impl_funcs[1619] = &lcmpge_df_impl;
    impl_funcs[1620] = &lucmpge_df_impl;
    impl_funcs[1621] = &lcmpne_df_impl;
    impl_funcs[1622] = &lucmpne_df_impl;
    impl_funcs[1623] = &lcast_dd_impl;
    impl_funcs[1624] = &lucast_dd_impl;
    impl_funcs[1625] = &ladd_dd_impl;
    impl_funcs[1626] = &luadd_dd_impl;
    impl_funcs[1627] = &lsub_dd_impl;
    impl_funcs[1628] = &lusub_dd_impl;
    impl_funcs[1629] = &lmul_dd_impl;
    impl_funcs[1630] = &lumul_dd_impl;
    impl_funcs[1631] = &ldiv_dd_impl;
    impl_funcs[1632] = &ludiv_dd_impl;
    impl_funcs[1633] = &lcmpl_dd_impl;
    impl_funcs[1634] = &lucmpl_dd_impl;
    impl_funcs[1635] = &lcmpg_dd_impl;
    impl_funcs[1636] = &lucmpg_dd_impl;
    impl_funcs[1637] = &lcmpe_dd_impl;
    impl_funcs[1638] = &lucmpe_dd_impl;
    impl_funcs[1639] = &lcmple_dd_impl;
    impl_funcs[1640] = &lucmple_dd_impl;
    impl_funcs[1641] = &lcmpge_dd_impl;
    impl_funcs[1642] = &lucmpge_dd_impl;
    impl_funcs[1643] = &lcmpne_dd_impl;
    impl_funcs[1644] = &lucmpne_dd_impl;
    impl_funcs[1645] = &lmod_b_impl;
    impl_funcs[1646] = &lcast_ub_impl;
    impl_funcs[1647] = &lucast_ub_impl;
    impl_funcs[1648] = &ladd_ub_impl;
    impl_funcs[1649] = &luadd_ub_impl;
    impl_funcs[1650] = &lsub_ub_impl;
    impl_funcs[1651] = &lusub_ub_impl;
    impl_funcs[1652] = &lmul_ub_impl;
    impl_funcs[1653] = &lumul_ub_impl;
    impl_funcs[1654] = &ldiv_ub_impl;
    impl_funcs[1655] = &ludiv_ub_impl;
    impl_funcs[1656] = &lcmpl_ub_impl;
    impl_funcs[1657] = &lucmpl_ub_impl;
    impl_funcs[1658] = &lcmpg_ub_impl;
    impl_funcs[1659] = &lucmpg_ub_impl;
    impl_funcs[1660] = &lcmpe_ub_impl;
    impl_funcs[1661] = &lucmpe_ub_impl;
    impl_funcs[1662] = &lcmple_ub_impl;
    impl_funcs[1663] = &lucmple_ub_impl;
    impl_funcs[1664] = &lcmpge_ub_impl;
    impl_funcs[1665] = &lucmpge_ub_impl;
    impl_funcs[1666] = &lcmpne_ub_impl;
    impl_funcs[1667] = &lucmpne_ub_impl;
    impl_funcs[1668] = &lswapb_impl;
    impl_funcs[1669] = &lmod_s_impl;
    impl_funcs[1670] = &lcast_us_impl;
    impl_funcs[1671] = &lucast_us_impl;
    impl_funcs[1672] = &ladd_us_impl;
    impl_funcs[1673] = &luadd_us_impl;
    impl_funcs[1674] = &lsub_us_impl;
    impl_funcs[1675] = &lusub_us_impl;
    impl_funcs[1676] = &lmul_us_impl;
    impl_funcs[1677] = &lumul_us_impl;
    impl_funcs[1678] = &ldiv_us_impl;
    impl_funcs[1679] = &ludiv_us_impl;
    impl_funcs[1680] = &lcmpl_us_impl;
    impl_funcs[1681] = &lucmpl_us_impl;
    impl_funcs[1682] = &lcmpg_us_impl;
    impl_funcs[1683] = &lucmpg_us_impl;
    impl_funcs[1684] = &lcmpe_us_impl;
    impl_funcs[1685] = &lucmpe_us_impl;
    impl_funcs[1686] = &lcmple_us_impl;
    impl_funcs[1687] = &lucmple_us_impl;
    impl_funcs[1688] = &lcmpge_us_impl;
    impl_funcs[1689] = &lucmpge_us_impl;
    impl_funcs[1690] = &lcmpne_us_impl;
    impl_funcs[1691] = &lucmpne_us_impl;
    impl_funcs[1692] = &lswaps_impl;
    impl_funcs[1693] = &lmod_i_impl;
    impl_funcs[1694] = &lcast_ui_impl;
    impl_funcs[1695] = &lucast_ui_impl;
    impl_funcs[1696] = &ladd_ui_impl;
    impl_funcs[1697] = &luadd_ui_impl;
    impl_funcs[1698] = &lsub_ui_impl;
    impl_funcs[1699] = &lusub_ui_impl;
    impl_funcs[1700] = &lmul_ui_impl;
    impl_funcs[1701] = &lumul_ui_impl;
    impl_funcs[1702] = &ldiv_ui_impl;
    impl_funcs[1703] = &ludiv_ui_impl;
    impl_funcs[1704] = &lcmpl_ui_impl;
    impl_funcs[1705] = &lucmpl_ui_impl;
    impl_funcs[1706] = &lcmpg_ui_impl;
    impl_funcs[1707] = &lucmpg_ui_impl;
    impl_funcs[1708] = &lcmpe_ui_impl;
    impl_funcs[1709] = &lucmpe_ui_impl;
    impl_funcs[1710] = &lcmple_ui_impl;
    impl_funcs[1711] = &lucmple_ui_impl;
    impl_funcs[1712] = &lcmpge_ui_impl;
    impl_funcs[1713] = &lucmpge_ui_impl;
    impl_funcs[1714] = &lcmpne_ui_impl;
    impl_funcs[1715] = &lucmpne_ui_impl;
    impl_funcs[1716] = &lswapi_impl;
    impl_funcs[1717] = &lmod_l_impl;
    impl_funcs[1718] = &lcast_ul_impl;
    impl_funcs[1719] = &lucast_ul_impl;
    impl_funcs[1720] = &ladd_ul_impl;
    impl_funcs[1721] = &luadd_ul_impl;
    impl_funcs[1722] = &lsub_ul_impl;
    impl_funcs[1723] = &lusub_ul_impl;
    impl_funcs[1724] = &lmul_ul_impl;
    impl_funcs[1725] = &lumul_ul_impl;
    impl_funcs[1726] = &ldiv_ul_impl;
    impl_funcs[1727] = &ludiv_ul_impl;
    impl_funcs[1728] = &lcmpl_ul_impl;
    impl_funcs[1729] = &lucmpl_ul_impl;
    impl_funcs[1730] = &lcmpg_ul_impl;
    impl_funcs[1731] = &lucmpg_ul_impl;
    impl_funcs[1732] = &lcmpe_ul_impl;
    impl_funcs[1733] = &lucmpe_ul_impl;
    impl_funcs[1734] = &lcmple_ul_impl;
    impl_funcs[1735] = &lucmple_ul_impl;
    impl_funcs[1736] = &lcmpge_ul_impl;
    impl_funcs[1737] = &lucmpge_ul_impl;
    impl_funcs[1738] = &lcmpne_ul_impl;
    impl_funcs[1739] = &lucmpne_ul_impl;
    impl_funcs[1740] = &lswapl_impl;
    impl_funcs[1741] = &lmod_li_impl;
    impl_funcs[1742] = &lcast_uli_impl;
    impl_funcs[1743] = &lucast_uli_impl;
    impl_funcs[1744] = &ladd_uli_impl;
    impl_funcs[1745] = &luadd_uli_impl;
    impl_funcs[1746] = &lsub_uli_impl;
    impl_funcs[1747] = &lusub_uli_impl;
    impl_funcs[1748] = &lmul_uli_impl;
    impl_funcs[1749] = &lumul_uli_impl;
    impl_funcs[1750] = &ldiv_uli_impl;
    impl_funcs[1751] = &ludiv_uli_impl;
    impl_funcs[1752] = &lcmpl_uli_impl;
    impl_funcs[1753] = &lucmpl_uli_impl;
    impl_funcs[1754] = &lcmpg_uli_impl;
    impl_funcs[1755] = &lucmpg_uli_impl;
    impl_funcs[1756] = &lcmpe_uli_impl;
    impl_funcs[1757] = &lucmpe_uli_impl;
    impl_funcs[1758] = &lcmple_uli_impl;
    impl_funcs[1759] = &lucmple_uli_impl;
    impl_funcs[1760] = &lcmpge_uli_impl;
    impl_funcs[1761] = &lucmpge_uli_impl;
    impl_funcs[1762] = &lcmpne_uli_impl;
    impl_funcs[1763] = &lucmpne_uli_impl;
    impl_funcs[1764] = &lswapli_impl;
    impl_funcs[1765] = &lmod_ll_impl;
    impl_funcs[1766] = &lcast_ull_impl;
    impl_funcs[1767] = &lucast_ull_impl;
    impl_funcs[1768] = &ladd_ull_impl;
    impl_funcs[1769] = &luadd_ull_impl;
    impl_funcs[1770] = &lsub_ull_impl;
    impl_funcs[1771] = &lusub_ull_impl;
    impl_funcs[1772] = &lmul_ull_impl;
    impl_funcs[1773] = &lumul_ull_impl;
    impl_funcs[1774] = &ldiv_ull_impl;
    impl_funcs[1775] = &ludiv_ull_impl;
    impl_funcs[1776] = &lcmpl_ull_impl;
    impl_funcs[1777] = &lucmpl_ull_impl;
    impl_funcs[1778] = &lcmpg_ull_impl;
    impl_funcs[1779] = &lucmpg_ull_impl;
    impl_funcs[1780] = &lcmpe_ull_impl;
    impl_funcs[1781] = &lucmpe_ull_impl;
    impl_funcs[1782] = &lcmple_ull_impl;
    impl_funcs[1783] = &lucmple_ull_impl;
    impl_funcs[1784] = &lcmpge_ull_impl;
    impl_funcs[1785] = &lucmpge_ull_impl;
    impl_funcs[1786] = &lcmpne_ull_impl;
    impl_funcs[1787] = &lucmpne_ull_impl;
    impl_funcs[1788] = &lswapll_impl;
    impl_funcs[1789] = &lswapf_impl;
    impl_funcs[1790] = &lswapd_impl;
    impl_funcs[1791] = &lswapdf_impl;
    impl_funcs[1792] = &lswapdd_impl;
    impl_funcs[1793] = &lswapa_impl;
    impl_funcs[1794] = &land_b_impl;
    impl_funcs[1795] = &lor_b_impl;
    impl_funcs[1796] = &lxor_b_impl;
    impl_funcs[1797] = &lshftr_b_impl;
    impl_funcs[1798] = &lshftl_b_impl;
    impl_funcs[1799] = &land_s_impl;
    impl_funcs[1800] = &lor_s_impl;
    impl_funcs[1801] = &lxor_s_impl;
    impl_funcs[1802] = &lshftr_s_impl;
    impl_funcs[1803] = &lshftl_s_impl;
    impl_funcs[1804] = &land_i_impl;
    impl_funcs[1805] = &lor_i_impl;
    impl_funcs[1806] = &lxor_i_impl;
    impl_funcs[1807] = &lshftr_i_impl;
    impl_funcs[1808] = &lshftl_i_impl;
    impl_funcs[1809] = &land_l_impl;
    impl_funcs[1810] = &lor_l_impl;
    impl_funcs[1811] = &lxor_l_impl;
    impl_funcs[1812] = &lshftr_l_impl;
    impl_funcs[1813] = &lshftl_l_impl;
    impl_funcs[1814] = &land_li_impl;
    impl_funcs[1815] = &lor_li_impl;
    impl_funcs[1816] = &lxor_li_impl;
    impl_funcs[1817] = &lshftr_li_impl;
    impl_funcs[1818] = &lshftl_li_impl;
    impl_funcs[1819] = &land_ll_impl;
    impl_funcs[1820] = &lor_ll_impl;
    impl_funcs[1821] = &lxor_ll_impl;
    impl_funcs[1822] = &lshftr_ll_impl;
    impl_funcs[1823] = &lshftl_ll_impl;
    impl_funcs[1824] = &ldup_impl;
    impl_funcs[1825] = &ldup2_impl;
    impl_funcs[1826] = &ldup3_impl;
    impl_funcs[1827] = &ldup4_impl;
    impl_funcs[1828] = &ldup5_impl;
    impl_funcs[1829] = &lswap_impl;
    impl_funcs[1830] = &lrot_impl;
    impl_funcs[1831] = &lset_impl;
    impl_funcs[1832] = &lget_impl;
    impl_funcs[1833] = &lvset_impl;
    impl_funcs[1834] = &lsget_impl;
    impl_funcs[1835] = &lsset_impl;
    impl_funcs[1836] = &lsetl_impl;
    impl_funcs[1837] = &linc_1_impl;
    impl_funcs[1838] = &linc_2_impl;
    impl_funcs[1839] = &lstinc_1_impl;
    impl_funcs[1840] = &lstinc_2_impl;
    impl_funcs[1841] = &lreturn_impl;
    impl_funcs[1842] = &lmainst_impl;
    impl_funcs[1843] = &lmainst_0_impl;
    impl_funcs[1844] = &lmainst_1_impl;
    impl_funcs[1845] = &lmainst_2_impl;
    impl_funcs[1846] = &lmainst_3_impl;
    impl_funcs[1847] = &lprint_impl;
    impl_funcs[1848] = &luprint_impl;
    impl_funcs[1849] = &liconst_impl;
    impl_funcs[1850] = &liconst_0_impl;
    impl_funcs[1851] = &liconst_1_impl;
    impl_funcs[1852] = &liconst_2_impl;
    impl_funcs[1853] = &liconst_3_impl;
    impl_funcs[1854] = &liconst_4_impl;
    impl_funcs[1855] = &liconst_5_impl;
    impl_funcs[1856] = &liconst_6_impl;
    impl_funcs[1857] = &liconst_9_impl;
    impl_funcs[1858] = &liconst_10_impl;
    impl_funcs[1859] = &liconst_11_impl;
    impl_funcs[1860] = &liconst_12_impl;
    impl_funcs[1861] = &liload_impl;
    impl_funcs[1862] = &liload_0_impl;
    impl_funcs[1863] = &liload_1_impl;
    impl_funcs[1864] = &liload_2_impl;
    impl_funcs[1865] = &liload_3_impl;
    impl_funcs[1866] = &liload_4_impl;
    impl_funcs[1867] = &listore_impl;
    impl_funcs[1868] = &listore_0_impl;
    impl_funcs[1869] = &listore_1_impl;
    impl_funcs[1870] = &listore_2_impl;
    impl_funcs[1871] = &listore_3_impl;
    impl_funcs[1872] = &listore_4_impl;
    impl_funcs[1873] = &licast_b_impl;
    impl_funcs[1874] = &liucast_b_impl;
    impl_funcs[1875] = &liadd_b_impl;
    impl_funcs[1876] = &liuadd_b_impl;
    impl_funcs[1877] = &lisub_b_impl;
    impl_funcs[1878] = &liusub_b_impl;
    impl_funcs[1879] = &limul_b_impl;
    impl_funcs[1880] = &liumul_b_impl;
    impl_funcs[1881] = &lidiv_b_impl;
    impl_funcs[1882] = &liudiv_b_impl;
    impl_funcs[1883] = &licmpl_b_impl;
    impl_funcs[1884] = &liucmpl_b_impl;
    impl_funcs[1885] = &licmpg_b_impl;
    impl_funcs[1886] = &liucmpg_b_impl;
    impl_funcs[1887] = &licmpe_b_impl;
    impl_funcs[1888] = &liucmpe_b_impl;
    impl_funcs[1889] = &licmple_b_impl;
    impl_funcs[1890] = &liucmple_b_impl;
    impl_funcs[1891] = &licmpge_b_impl;
    impl_funcs[1892] = &liucmpge_b_impl;
    impl_funcs[1893] = &licmpne_b_impl;
    impl_funcs[1894] = &liucmpne_b_impl;
    impl_funcs[1895] = &licast_s_impl;
    impl_funcs[1896] = &liucast_s_impl;
    impl_funcs[1897] = &liadd_s_impl;
    impl_funcs[1898] = &liuadd_s_impl;
    impl_funcs[1899] = &lisub_s_impl;
    impl_funcs[1900] = &liusub_s_impl;
    impl_funcs[1901] = &limul_s_impl;
    impl_funcs[1902] = &liumul_s_impl;
    impl_funcs[1903] = &lidiv_s_impl;
    impl_funcs[1904] = &liudiv_s_impl;
    impl_funcs[1905] = &licmpl_s_impl;
    impl_funcs[1906] = &liucmpl_s_impl;
    impl_funcs[1907] = &licmpg_s_impl;
    impl_funcs[1908] = &liucmpg_s_impl;
    impl_funcs[1909] = &licmpe_s_impl;
    impl_funcs[1910] = &liucmpe_s_impl;
    impl_funcs[1911] = &licmple_s_impl;
    impl_funcs[1912] = &liucmple_s_impl;
    impl_funcs[1913] = &licmpge_s_impl;
    impl_funcs[1914] = &liucmpge_s_impl;
    impl_funcs[1915] = &licmpne_s_impl;
    impl_funcs[1916] = &liucmpne_s_impl;
    impl_funcs[1917] = &licast_i_impl;
    impl_funcs[1918] = &liucast_i_impl;
    impl_funcs[1919] = &liadd_i_impl;
    impl_funcs[1920] = &liuadd_i_impl;
    impl_funcs[1921] = &lisub_i_impl;
    impl_funcs[1922] = &liusub_i_impl;
    impl_funcs[1923] = &limul_i_impl;
    impl_funcs[1924] = &liumul_i_impl;
    impl_funcs[1925] = &lidiv_i_impl;
    impl_funcs[1926] = &liudiv_i_impl;
    impl_funcs[1927] = &licmpl_i_impl;
    impl_funcs[1928] = &liucmpl_i_impl;
    impl_funcs[1929] = &licmpg_i_impl;
    impl_funcs[1930] = &liucmpg_i_impl;
    impl_funcs[1931] = &licmpe_i_impl;
    impl_funcs[1932] = &liucmpe_i_impl;
    impl_funcs[1933] = &licmple_i_impl;
    impl_funcs[1934] = &liucmple_i_impl;
    impl_funcs[1935] = &licmpge_i_impl;
    impl_funcs[1936] = &liucmpge_i_impl;
    impl_funcs[1937] = &licmpne_i_impl;
    impl_funcs[1938] = &liucmpne_i_impl;
    impl_funcs[1939] = &licast_l_impl;
    impl_funcs[1940] = &liucast_l_impl;
    impl_funcs[1941] = &liadd_l_impl;
    impl_funcs[1942] = &liuadd_l_impl;
    impl_funcs[1943] = &lisub_l_impl;
    impl_funcs[1944] = &liusub_l_impl;
    impl_funcs[1945] = &limul_l_impl;
    impl_funcs[1946] = &liumul_l_impl;
    impl_funcs[1947] = &lidiv_l_impl;
    impl_funcs[1948] = &liudiv_l_impl;
    impl_funcs[1949] = &licmpl_l_impl;
    impl_funcs[1950] = &liucmpl_l_impl;
    impl_funcs[1951] = &licmpg_l_impl;
    impl_funcs[1952] = &liucmpg_l_impl;
    impl_funcs[1953] = &licmpe_l_impl;
    impl_funcs[1954] = &liucmpe_l_impl;
    impl_funcs[1955] = &licmple_l_impl;
    impl_funcs[1956] = &liucmple_l_impl;
    impl_funcs[1957] = &licmpge_l_impl;
    impl_funcs[1958] = &liucmpge_l_impl;
    impl_funcs[1959] = &licmpne_l_impl;
    impl_funcs[1960] = &liucmpne_l_impl;
    impl_funcs[1961] = &licast_li_impl;
    impl_funcs[1962] = &liucast_li_impl;
    impl_funcs[1963] = &liadd_li_impl;
    impl_funcs[1964] = &liuadd_li_impl;
    impl_funcs[1965] = &lisub_li_impl;
    impl_funcs[1966] = &liusub_li_impl;
    impl_funcs[1967] = &limul_li_impl;
    impl_funcs[1968] = &liumul_li_impl;
    impl_funcs[1969] = &lidiv_li_impl;
    impl_funcs[1970] = &liudiv_li_impl;
    impl_funcs[1971] = &licmpl_li_impl;
    impl_funcs[1972] = &liucmpl_li_impl;
    impl_funcs[1973] = &licmpg_li_impl;
    impl_funcs[1974] = &liucmpg_li_impl;
    impl_funcs[1975] = &licmpe_li_impl;
    impl_funcs[1976] = &liucmpe_li_impl;
    impl_funcs[1977] = &licmple_li_impl;
    impl_funcs[1978] = &liucmple_li_impl;
    impl_funcs[1979] = &licmpge_li_impl;
    impl_funcs[1980] = &liucmpge_li_impl;
    impl_funcs[1981] = &licmpne_li_impl;
    impl_funcs[1982] = &liucmpne_li_impl;
    impl_funcs[1983] = &licast_ll_impl;
    impl_funcs[1984] = &liucast_ll_impl;
    impl_funcs[1985] = &liadd_ll_impl;
    impl_funcs[1986] = &liuadd_ll_impl;
    impl_funcs[1987] = &lisub_ll_impl;
    impl_funcs[1988] = &liusub_ll_impl;
    impl_funcs[1989] = &limul_ll_impl;
    impl_funcs[1990] = &liumul_ll_impl;
    impl_funcs[1991] = &lidiv_ll_impl;
    impl_funcs[1992] = &liudiv_ll_impl;
    impl_funcs[1993] = &licmpl_ll_impl;
    impl_funcs[1994] = &liucmpl_ll_impl;
    impl_funcs[1995] = &licmpg_ll_impl;
    impl_funcs[1996] = &liucmpg_ll_impl;
    impl_funcs[1997] = &licmpe_ll_impl;
    impl_funcs[1998] = &liucmpe_ll_impl;
    impl_funcs[1999] = &licmple_ll_impl;
    impl_funcs[2000] = &liucmple_ll_impl;
    impl_funcs[2001] = &licmpge_ll_impl;
    impl_funcs[2002] = &liucmpge_ll_impl;
    impl_funcs[2003] = &licmpne_ll_impl;
    impl_funcs[2004] = &liucmpne_ll_impl;
    impl_funcs[2005] = &licast_f_impl;
    impl_funcs[2006] = &liucast_f_impl;
    impl_funcs[2007] = &liadd_f_impl;
    impl_funcs[2008] = &liuadd_f_impl;
    impl_funcs[2009] = &lisub_f_impl;
    impl_funcs[2010] = &liusub_f_impl;
    impl_funcs[2011] = &limul_f_impl;
    impl_funcs[2012] = &liumul_f_impl;
    impl_funcs[2013] = &lidiv_f_impl;
    impl_funcs[2014] = &liudiv_f_impl;
    impl_funcs[2015] = &licmpl_f_impl;
    impl_funcs[2016] = &liucmpl_f_impl;
    impl_funcs[2017] = &licmpg_f_impl;
    impl_funcs[2018] = &liucmpg_f_impl;
    impl_funcs[2019] = &licmpe_f_impl;
    impl_funcs[2020] = &liucmpe_f_impl;
    impl_funcs[2021] = &licmple_f_impl;
    impl_funcs[2022] = &liucmple_f_impl;
    impl_funcs[2023] = &licmpge_f_impl;
    impl_funcs[2024] = &liucmpge_f_impl;
    impl_funcs[2025] = &licmpne_f_impl;
    impl_funcs[2026] = &liucmpne_f_impl;
    impl_funcs[2027] = &licast_d_impl;
    impl_funcs[2028] = &liucast_d_impl;
    impl_funcs[2029] = &liadd_d_impl;
    impl_funcs[2030] = &liuadd_d_impl;
    impl_funcs[2031] = &lisub_d_impl;
    impl_funcs[2032] = &liusub_d_impl;
    impl_funcs[2033] = &limul_d_impl;
    impl_funcs[2034] = &liumul_d_impl;
    impl_funcs[2035] = &lidiv_d_impl;
    impl_funcs[2036] = &liudiv_d_impl;
    impl_funcs[2037] = &licmpl_d_impl;
    impl_funcs[2038] = &liucmpl_d_impl;
    impl_funcs[2039] = &licmpg_d_impl;
    impl_funcs[2040] = &liucmpg_d_impl;
    impl_funcs[2041] = &licmpe_d_impl;
    impl_funcs[2042] = &liucmpe_d_impl;
    impl_funcs[2043] = &licmple_d_impl;
    impl_funcs[2044] = &liucmple_d_impl;
    impl_funcs[2045] = &licmpge_d_impl;
    impl_funcs[2046] = &liucmpge_d_impl;
    impl_funcs[2047] = &licmpne_d_impl;
    impl_funcs[2048] = &liucmpne_d_impl;
    impl_funcs[2049] = &licast_df_impl;
    impl_funcs[2050] = &liucast_df_impl;
    impl_funcs[2051] = &liadd_df_impl;
    impl_funcs[2052] = &liuadd_df_impl;
    impl_funcs[2053] = &lisub_df_impl;
    impl_funcs[2054] = &liusub_df_impl;
    impl_funcs[2055] = &limul_df_impl;
    impl_funcs[2056] = &liumul_df_impl;
    impl_funcs[2057] = &lidiv_df_impl;
    impl_funcs[2058] = &liudiv_df_impl;
    impl_funcs[2059] = &licmpl_df_impl;
    impl_funcs[2060] = &liucmpl_df_impl;
    impl_funcs[2061] = &licmpg_df_impl;
    impl_funcs[2062] = &liucmpg_df_impl;
    impl_funcs[2063] = &licmpe_df_impl;
    impl_funcs[2064] = &liucmpe_df_impl;
    impl_funcs[2065] = &licmple_df_impl;
    impl_funcs[2066] = &liucmple_df_impl;
    impl_funcs[2067] = &licmpge_df_impl;
    impl_funcs[2068] = &liucmpge_df_impl;
    impl_funcs[2069] = &licmpne_df_impl;
    impl_funcs[2070] = &liucmpne_df_impl;
    impl_funcs[2071] = &licast_dd_impl;
    impl_funcs[2072] = &liucast_dd_impl;
    impl_funcs[2073] = &liadd_dd_impl;
    impl_funcs[2074] = &liuadd_dd_impl;
    impl_funcs[2075] = &lisub_dd_impl;
    impl_funcs[2076] = &liusub_dd_impl;
    impl_funcs[2077] = &limul_dd_impl;
    impl_funcs[2078] = &liumul_dd_impl;
    impl_funcs[2079] = &lidiv_dd_impl;
    impl_funcs[2080] = &liudiv_dd_impl;
    impl_funcs[2081] = &licmpl_dd_impl;
    impl_funcs[2082] = &liucmpl_dd_impl;
    impl_funcs[2083] = &licmpg_dd_impl;
    impl_funcs[2084] = &liucmpg_dd_impl;
    impl_funcs[2085] = &licmpe_dd_impl;
    impl_funcs[2086] = &liucmpe_dd_impl;
    impl_funcs[2087] = &licmple_dd_impl;
    impl_funcs[2088] = &liucmple_dd_impl;
    impl_funcs[2089] = &licmpge_dd_impl;
    impl_funcs[2090] = &liucmpge_dd_impl;
    impl_funcs[2091] = &licmpne_dd_impl;
    impl_funcs[2092] = &liucmpne_dd_impl;
    impl_funcs[2093] = &limod_b_impl;
    impl_funcs[2094] = &licast_ub_impl;
    impl_funcs[2095] = &liucast_ub_impl;
    impl_funcs[2096] = &liadd_ub_impl;
    impl_funcs[2097] = &liuadd_ub_impl;
    impl_funcs[2098] = &lisub_ub_impl;
    impl_funcs[2099] = &liusub_ub_impl;
    impl_funcs[2100] = &limul_ub_impl;
    impl_funcs[2101] = &liumul_ub_impl;
    impl_funcs[2102] = &lidiv_ub_impl;
    impl_funcs[2103] = &liudiv_ub_impl;
    impl_funcs[2104] = &licmpl_ub_impl;
    impl_funcs[2105] = &liucmpl_ub_impl;
    impl_funcs[2106] = &licmpg_ub_impl;
    impl_funcs[2107] = &liucmpg_ub_impl;
    impl_funcs[2108] = &licmpe_ub_impl;
    impl_funcs[2109] = &liucmpe_ub_impl;
    impl_funcs[2110] = &licmple_ub_impl;
    impl_funcs[2111] = &liucmple_ub_impl;
    impl_funcs[2112] = &licmpge_ub_impl;
    impl_funcs[2113] = &liucmpge_ub_impl;
    impl_funcs[2114] = &licmpne_ub_impl;
    impl_funcs[2115] = &liucmpne_ub_impl;
    impl_funcs[2116] = &liswapb_impl;
    impl_funcs[2117] = &limod_s_impl;
    impl_funcs[2118] = &licast_us_impl;
    impl_funcs[2119] = &liucast_us_impl;
    impl_funcs[2120] = &liadd_us_impl;
    impl_funcs[2121] = &liuadd_us_impl;
    impl_funcs[2122] = &lisub_us_impl;
    impl_funcs[2123] = &liusub_us_impl;
    impl_funcs[2124] = &limul_us_impl;
    impl_funcs[2125] = &liumul_us_impl;
    impl_funcs[2126] = &lidiv_us_impl;
    impl_funcs[2127] = &liudiv_us_impl;
    impl_funcs[2128] = &licmpl_us_impl;
    impl_funcs[2129] = &liucmpl_us_impl;
    impl_funcs[2130] = &licmpg_us_impl;
    impl_funcs[2131] = &liucmpg_us_impl;
    impl_funcs[2132] = &licmpe_us_impl;
    impl_funcs[2133] = &liucmpe_us_impl;
    impl_funcs[2134] = &licmple_us_impl;
    impl_funcs[2135] = &liucmple_us_impl;
    impl_funcs[2136] = &licmpge_us_impl;
    impl_funcs[2137] = &liucmpge_us_impl;
    impl_funcs[2138] = &licmpne_us_impl;
    impl_funcs[2139] = &liucmpne_us_impl;
    impl_funcs[2140] = &liswaps_impl;
    impl_funcs[2141] = &limod_i_impl;
    impl_funcs[2142] = &licast_ui_impl;
    impl_funcs[2143] = &liucast_ui_impl;
    impl_funcs[2144] = &liadd_ui_impl;
    impl_funcs[2145] = &liuadd_ui_impl;
    impl_funcs[2146] = &lisub_ui_impl;
    impl_funcs[2147] = &liusub_ui_impl;
    impl_funcs[2148] = &limul_ui_impl;
    impl_funcs[2149] = &liumul_ui_impl;
    impl_funcs[2150] = &lidiv_ui_impl;
    impl_funcs[2151] = &liudiv_ui_impl;
    impl_funcs[2152] = &licmpl_ui_impl;
    impl_funcs[2153] = &liucmpl_ui_impl;
    impl_funcs[2154] = &licmpg_ui_impl;
    impl_funcs[2155] = &liucmpg_ui_impl;
    impl_funcs[2156] = &licmpe_ui_impl;
    impl_funcs[2157] = &liucmpe_ui_impl;
    impl_funcs[2158] = &licmple_ui_impl;
    impl_funcs[2159] = &liucmple_ui_impl;
    impl_funcs[2160] = &licmpge_ui_impl;
    impl_funcs[2161] = &liucmpge_ui_impl;
    impl_funcs[2162] = &licmpne_ui_impl;
    impl_funcs[2163] = &liucmpne_ui_impl;
    impl_funcs[2164] = &liswapi_impl;
    impl_funcs[2165] = &limod_l_impl;
    impl_funcs[2166] = &licast_ul_impl;
    impl_funcs[2167] = &liucast_ul_impl;
    impl_funcs[2168] = &liadd_ul_impl;
    impl_funcs[2169] = &liuadd_ul_impl;
    impl_funcs[2170] = &lisub_ul_impl;
    impl_funcs[2171] = &liusub_ul_impl;
    impl_funcs[2172] = &limul_ul_impl;
    impl_funcs[2173] = &liumul_ul_impl;
    impl_funcs[2174] = &lidiv_ul_impl;
    impl_funcs[2175] = &liudiv_ul_impl;
    impl_funcs[2176] = &licmpl_ul_impl;
    impl_funcs[2177] = &liucmpl_ul_impl;
    impl_funcs[2178] = &licmpg_ul_impl;
    impl_funcs[2179] = &liucmpg_ul_impl;
    impl_funcs[2180] = &licmpe_ul_impl;
    impl_funcs[2181] = &liucmpe_ul_impl;
    impl_funcs[2182] = &licmple_ul_impl;
    impl_funcs[2183] = &liucmple_ul_impl;
    impl_funcs[2184] = &licmpge_ul_impl;
    impl_funcs[2185] = &liucmpge_ul_impl;
    impl_funcs[2186] = &licmpne_ul_impl;
    impl_funcs[2187] = &liucmpne_ul_impl;
    impl_funcs[2188] = &liswapl_impl;
    impl_funcs[2189] = &limod_li_impl;
    impl_funcs[2190] = &licast_uli_impl;
    impl_funcs[2191] = &liucast_uli_impl;
    impl_funcs[2192] = &liadd_uli_impl;
    impl_funcs[2193] = &liuadd_uli_impl;
    impl_funcs[2194] = &lisub_uli_impl;
    impl_funcs[2195] = &liusub_uli_impl;
    impl_funcs[2196] = &limul_uli_impl;
    impl_funcs[2197] = &liumul_uli_impl;
    impl_funcs[2198] = &lidiv_uli_impl;
    impl_funcs[2199] = &liudiv_uli_impl;
    impl_funcs[2200] = &licmpl_uli_impl;
    impl_funcs[2201] = &liucmpl_uli_impl;
    impl_funcs[2202] = &licmpg_uli_impl;
    impl_funcs[2203] = &liucmpg_uli_impl;
    impl_funcs[2204] = &licmpe_uli_impl;
    impl_funcs[2205] = &liucmpe_uli_impl;
    impl_funcs[2206] = &licmple_uli_impl;
    impl_funcs[2207] = &liucmple_uli_impl;
    impl_funcs[2208] = &licmpge_uli_impl;
    impl_funcs[2209] = &liucmpge_uli_impl;
    impl_funcs[2210] = &licmpne_uli_impl;
    impl_funcs[2211] = &liucmpne_uli_impl;
    impl_funcs[2212] = &liswapli_impl;
    impl_funcs[2213] = &limod_ll_impl;
    impl_funcs[2214] = &licast_ull_impl;
    impl_funcs[2215] = &liucast_ull_impl;
    impl_funcs[2216] = &liadd_ull_impl;
    impl_funcs[2217] = &liuadd_ull_impl;
    impl_funcs[2218] = &lisub_ull_impl;
    impl_funcs[2219] = &liusub_ull_impl;
    impl_funcs[2220] = &limul_ull_impl;
    impl_funcs[2221] = &liumul_ull_impl;
    impl_funcs[2222] = &lidiv_ull_impl;
    impl_funcs[2223] = &liudiv_ull_impl;
    impl_funcs[2224] = &licmpl_ull_impl;
    impl_funcs[2225] = &liucmpl_ull_impl;
    impl_funcs[2226] = &licmpg_ull_impl;
    impl_funcs[2227] = &liucmpg_ull_impl;
    impl_funcs[2228] = &licmpe_ull_impl;
    impl_funcs[2229] = &liucmpe_ull_impl;
    impl_funcs[2230] = &licmple_ull_impl;
    impl_funcs[2231] = &liucmple_ull_impl;
    impl_funcs[2232] = &licmpge_ull_impl;
    impl_funcs[2233] = &liucmpge_ull_impl;
    impl_funcs[2234] = &licmpne_ull_impl;
    impl_funcs[2235] = &liucmpne_ull_impl;
    impl_funcs[2236] = &liswapll_impl;
    impl_funcs[2237] = &liswapf_impl;
    impl_funcs[2238] = &liswapd_impl;
    impl_funcs[2239] = &liswapdf_impl;
    impl_funcs[2240] = &liswapdd_impl;
    impl_funcs[2241] = &liswapa_impl;
    impl_funcs[2242] = &liand_b_impl;
    impl_funcs[2243] = &lior_b_impl;
    impl_funcs[2244] = &lixor_b_impl;
    impl_funcs[2245] = &lishftr_b_impl;
    impl_funcs[2246] = &lishftl_b_impl;
    impl_funcs[2247] = &liand_s_impl;
    impl_funcs[2248] = &lior_s_impl;
    impl_funcs[2249] = &lixor_s_impl;
    impl_funcs[2250] = &lishftr_s_impl;
    impl_funcs[2251] = &lishftl_s_impl;
    impl_funcs[2252] = &liand_i_impl;
    impl_funcs[2253] = &lior_i_impl;
    impl_funcs[2254] = &lixor_i_impl;
    impl_funcs[2255] = &lishftr_i_impl;
    impl_funcs[2256] = &lishftl_i_impl;
    impl_funcs[2257] = &liand_l_impl;
    impl_funcs[2258] = &lior_l_impl;
    impl_funcs[2259] = &lixor_l_impl;
    impl_funcs[2260] = &lishftr_l_impl;
    impl_funcs[2261] = &lishftl_l_impl;
    impl_funcs[2262] = &liand_li_impl;
    impl_funcs[2263] = &lior_li_impl;
    impl_funcs[2264] = &lixor_li_impl;
    impl_funcs[2265] = &lishftr_li_impl;
    impl_funcs[2266] = &lishftl_li_impl;
    impl_funcs[2267] = &liand_ll_impl;
    impl_funcs[2268] = &lior_ll_impl;
    impl_funcs[2269] = &lixor_ll_impl;
    impl_funcs[2270] = &lishftr_ll_impl;
    impl_funcs[2271] = &lishftl_ll_impl;
    impl_funcs[2272] = &lidup_impl;
    impl_funcs[2273] = &lidup2_impl;
    impl_funcs[2274] = &lidup3_impl;
    impl_funcs[2275] = &lidup4_impl;
    impl_funcs[2276] = &lidup5_impl;
    impl_funcs[2277] = &liswap_impl;
    impl_funcs[2278] = &lirot_impl;
    impl_funcs[2279] = &liset_impl;
    impl_funcs[2280] = &liget_impl;
    impl_funcs[2281] = &livset_impl;
    impl_funcs[2282] = &lisget_impl;
    impl_funcs[2283] = &lisset_impl;
    impl_funcs[2284] = &lisetl_impl;
    impl_funcs[2285] = &liinc_1_impl;
    impl_funcs[2286] = &liinc_2_impl;
    impl_funcs[2287] = &listinc_1_impl;
    impl_funcs[2288] = &listinc_2_impl;
    impl_funcs[2289] = &lireturn_impl;
    impl_funcs[2290] = &limainst_impl;
    impl_funcs[2291] = &limainst_0_impl;
    impl_funcs[2292] = &limainst_1_impl;
    impl_funcs[2293] = &limainst_2_impl;
    impl_funcs[2294] = &limainst_3_impl;
    impl_funcs[2295] = &liprint_impl;
    impl_funcs[2296] = &liuprint_impl;
    impl_funcs[2297] = &llconst_impl;
    impl_funcs[2298] = &llconst_0_impl;
    impl_funcs[2299] = &llconst_1_impl;
    impl_funcs[2300] = &llconst_2_impl;
    impl_funcs[2301] = &llconst_3_impl;
    impl_funcs[2302] = &llconst_4_impl;
    impl_funcs[2303] = &llconst_5_impl;
    impl_funcs[2304] = &llconst_6_impl;
    impl_funcs[2305] = &llconst_9_impl;
    impl_funcs[2306] = &llconst_10_impl;
    impl_funcs[2307] = &llconst_11_impl;
    impl_funcs[2308] = &llconst_12_impl;
    impl_funcs[2309] = &llload_impl;
    impl_funcs[2310] = &llload_0_impl;
    impl_funcs[2311] = &llload_1_impl;
    impl_funcs[2312] = &llload_2_impl;
    impl_funcs[2313] = &llload_3_impl;
    impl_funcs[2314] = &llload_4_impl;
    impl_funcs[2315] = &llstore_impl;
    impl_funcs[2316] = &llstore_0_impl;
    impl_funcs[2317] = &llstore_1_impl;
    impl_funcs[2318] = &llstore_2_impl;
    impl_funcs[2319] = &llstore_3_impl;
    impl_funcs[2320] = &llstore_4_impl;
    impl_funcs[2321] = &llcast_b_impl;
    impl_funcs[2322] = &llucast_b_impl;
    impl_funcs[2323] = &lladd_b_impl;
    impl_funcs[2324] = &lluadd_b_impl;
    impl_funcs[2325] = &llsub_b_impl;
    impl_funcs[2326] = &llusub_b_impl;
    impl_funcs[2327] = &llmul_b_impl;
    impl_funcs[2328] = &llumul_b_impl;
    impl_funcs[2329] = &lldiv_b_impl;
    impl_funcs[2330] = &lludiv_b_impl;
    impl_funcs[2331] = &llcmpl_b_impl;
    impl_funcs[2332] = &llucmpl_b_impl;
    impl_funcs[2333] = &llcmpg_b_impl;
    impl_funcs[2334] = &llucmpg_b_impl;
    impl_funcs[2335] = &llcmpe_b_impl;
    impl_funcs[2336] = &llucmpe_b_impl;
    impl_funcs[2337] = &llcmple_b_impl;
    impl_funcs[2338] = &llucmple_b_impl;
    impl_funcs[2339] = &llcmpge_b_impl;
    impl_funcs[2340] = &llucmpge_b_impl;
    impl_funcs[2341] = &llcmpne_b_impl;
    impl_funcs[2342] = &llucmpne_b_impl;
    impl_funcs[2343] = &llcast_s_impl;
    impl_funcs[2344] = &llucast_s_impl;
    impl_funcs[2345] = &lladd_s_impl;
    impl_funcs[2346] = &lluadd_s_impl;
    impl_funcs[2347] = &llsub_s_impl;
    impl_funcs[2348] = &llusub_s_impl;
    impl_funcs[2349] = &llmul_s_impl;
    impl_funcs[2350] = &llumul_s_impl;
    impl_funcs[2351] = &lldiv_s_impl;
    impl_funcs[2352] = &lludiv_s_impl;
    impl_funcs[2353] = &llcmpl_s_impl;
    impl_funcs[2354] = &llucmpl_s_impl;
    impl_funcs[2355] = &llcmpg_s_impl;
    impl_funcs[2356] = &llucmpg_s_impl;
    impl_funcs[2357] = &llcmpe_s_impl;
    impl_funcs[2358] = &llucmpe_s_impl;
    impl_funcs[2359] = &llcmple_s_impl;
    impl_funcs[2360] = &llucmple_s_impl;
    impl_funcs[2361] = &llcmpge_s_impl;
    impl_funcs[2362] = &llucmpge_s_impl;
    impl_funcs[2363] = &llcmpne_s_impl;
    impl_funcs[2364] = &llucmpne_s_impl;
    impl_funcs[2365] = &llcast_i_impl;
    impl_funcs[2366] = &llucast_i_impl;
    impl_funcs[2367] = &lladd_i_impl;
    impl_funcs[2368] = &lluadd_i_impl;
    impl_funcs[2369] = &llsub_i_impl;
    impl_funcs[2370] = &llusub_i_impl;
    impl_funcs[2371] = &llmul_i_impl;
    impl_funcs[2372] = &llumul_i_impl;
    impl_funcs[2373] = &lldiv_i_impl;
    impl_funcs[2374] = &lludiv_i_impl;
    impl_funcs[2375] = &llcmpl_i_impl;
    impl_funcs[2376] = &llucmpl_i_impl;
    impl_funcs[2377] = &llcmpg_i_impl;
    impl_funcs[2378] = &llucmpg_i_impl;
    impl_funcs[2379] = &llcmpe_i_impl;
    impl_funcs[2380] = &llucmpe_i_impl;
    impl_funcs[2381] = &llcmple_i_impl;
    impl_funcs[2382] = &llucmple_i_impl;
    impl_funcs[2383] = &llcmpge_i_impl;
    impl_funcs[2384] = &llucmpge_i_impl;
    impl_funcs[2385] = &llcmpne_i_impl;
    impl_funcs[2386] = &llucmpne_i_impl;
    impl_funcs[2387] = &llcast_l_impl;
    impl_funcs[2388] = &llucast_l_impl;
    impl_funcs[2389] = &lladd_l_impl;
    impl_funcs[2390] = &lluadd_l_impl;
    impl_funcs[2391] = &llsub_l_impl;
    impl_funcs[2392] = &llusub_l_impl;
    impl_funcs[2393] = &llmul_l_impl;
    impl_funcs[2394] = &llumul_l_impl;
    impl_funcs[2395] = &lldiv_l_impl;
    impl_funcs[2396] = &lludiv_l_impl;
    impl_funcs[2397] = &llcmpl_l_impl;
    impl_funcs[2398] = &llucmpl_l_impl;
    impl_funcs[2399] = &llcmpg_l_impl;
    impl_funcs[2400] = &llucmpg_l_impl;
    impl_funcs[2401] = &llcmpe_l_impl;
    impl_funcs[2402] = &llucmpe_l_impl;
    impl_funcs[2403] = &llcmple_l_impl;
    impl_funcs[2404] = &llucmple_l_impl;
    impl_funcs[2405] = &llcmpge_l_impl;
    impl_funcs[2406] = &llucmpge_l_impl;
    impl_funcs[2407] = &llcmpne_l_impl;
    impl_funcs[2408] = &llucmpne_l_impl;
    impl_funcs[2409] = &llcast_li_impl;
    impl_funcs[2410] = &llucast_li_impl;
    impl_funcs[2411] = &lladd_li_impl;
    impl_funcs[2412] = &lluadd_li_impl;
    impl_funcs[2413] = &llsub_li_impl;
    impl_funcs[2414] = &llusub_li_impl;
    impl_funcs[2415] = &llmul_li_impl;
    impl_funcs[2416] = &llumul_li_impl;
    impl_funcs[2417] = &lldiv_li_impl;
    impl_funcs[2418] = &lludiv_li_impl;
    impl_funcs[2419] = &llcmpl_li_impl;
    impl_funcs[2420] = &llucmpl_li_impl;
    impl_funcs[2421] = &llcmpg_li_impl;
    impl_funcs[2422] = &llucmpg_li_impl;
    impl_funcs[2423] = &llcmpe_li_impl;
    impl_funcs[2424] = &llucmpe_li_impl;
    impl_funcs[2425] = &llcmple_li_impl;
    impl_funcs[2426] = &llucmple_li_impl;
    impl_funcs[2427] = &llcmpge_li_impl;
    impl_funcs[2428] = &llucmpge_li_impl;
    impl_funcs[2429] = &llcmpne_li_impl;
    impl_funcs[2430] = &llucmpne_li_impl;
    impl_funcs[2431] = &llcast_ll_impl;
    impl_funcs[2432] = &llucast_ll_impl;
    impl_funcs[2433] = &lladd_ll_impl;
    impl_funcs[2434] = &lluadd_ll_impl;
    impl_funcs[2435] = &llsub_ll_impl;
    impl_funcs[2436] = &llusub_ll_impl;
    impl_funcs[2437] = &llmul_ll_impl;
    impl_funcs[2438] = &llumul_ll_impl;
    impl_funcs[2439] = &lldiv_ll_impl;
    impl_funcs[2440] = &lludiv_ll_impl;
    impl_funcs[2441] = &llcmpl_ll_impl;
    impl_funcs[2442] = &llucmpl_ll_impl;
    impl_funcs[2443] = &llcmpg_ll_impl;
    impl_funcs[2444] = &llucmpg_ll_impl;
    impl_funcs[2445] = &llcmpe_ll_impl;
    impl_funcs[2446] = &llucmpe_ll_impl;
    impl_funcs[2447] = &llcmple_ll_impl;
    impl_funcs[2448] = &llucmple_ll_impl;
    impl_funcs[2449] = &llcmpge_ll_impl;
    impl_funcs[2450] = &llucmpge_ll_impl;
    impl_funcs[2451] = &llcmpne_ll_impl;
    impl_funcs[2452] = &llucmpne_ll_impl;
    impl_funcs[2453] = &llcast_f_impl;
    impl_funcs[2454] = &llucast_f_impl;
    impl_funcs[2455] = &lladd_f_impl;
    impl_funcs[2456] = &lluadd_f_impl;
    impl_funcs[2457] = &llsub_f_impl;
    impl_funcs[2458] = &llusub_f_impl;
    impl_funcs[2459] = &llmul_f_impl;
    impl_funcs[2460] = &llumul_f_impl;
    impl_funcs[2461] = &lldiv_f_impl;
    impl_funcs[2462] = &lludiv_f_impl;
    impl_funcs[2463] = &llcmpl_f_impl;
    impl_funcs[2464] = &llucmpl_f_impl;
    impl_funcs[2465] = &llcmpg_f_impl;
    impl_funcs[2466] = &llucmpg_f_impl;
    impl_funcs[2467] = &llcmpe_f_impl;
    impl_funcs[2468] = &llucmpe_f_impl;
    impl_funcs[2469] = &llcmple_f_impl;
    impl_funcs[2470] = &llucmple_f_impl;
    impl_funcs[2471] = &llcmpge_f_impl;
    impl_funcs[2472] = &llucmpge_f_impl;
    impl_funcs[2473] = &llcmpne_f_impl;
    impl_funcs[2474] = &llucmpne_f_impl;
    impl_funcs[2475] = &llcast_d_impl;
    impl_funcs[2476] = &llucast_d_impl;
    impl_funcs[2477] = &lladd_d_impl;
    impl_funcs[2478] = &lluadd_d_impl;
    impl_funcs[2479] = &llsub_d_impl;
    impl_funcs[2480] = &llusub_d_impl;
    impl_funcs[2481] = &llmul_d_impl;
    impl_funcs[2482] = &llumul_d_impl;
    impl_funcs[2483] = &lldiv_d_impl;
    impl_funcs[2484] = &lludiv_d_impl;
    impl_funcs[2485] = &llcmpl_d_impl;
    impl_funcs[2486] = &llucmpl_d_impl;
    impl_funcs[2487] = &llcmpg_d_impl;
    impl_funcs[2488] = &llucmpg_d_impl;
    impl_funcs[2489] = &llcmpe_d_impl;
    impl_funcs[2490] = &llucmpe_d_impl;
    impl_funcs[2491] = &llcmple_d_impl;
    impl_funcs[2492] = &llucmple_d_impl;
    impl_funcs[2493] = &llcmpge_d_impl;
    impl_funcs[2494] = &llucmpge_d_impl;
    impl_funcs[2495] = &llcmpne_d_impl;
    impl_funcs[2496] = &llucmpne_d_impl;
    impl_funcs[2497] = &llcast_df_impl;
    impl_funcs[2498] = &llucast_df_impl;
    impl_funcs[2499] = &lladd_df_impl;
    impl_funcs[2500] = &lluadd_df_impl;
    impl_funcs[2501] = &llsub_df_impl;
    impl_funcs[2502] = &llusub_df_impl;
    impl_funcs[2503] = &llmul_df_impl;
    impl_funcs[2504] = &llumul_df_impl;
    impl_funcs[2505] = &lldiv_df_impl;
    impl_funcs[2506] = &lludiv_df_impl;
    impl_funcs[2507] = &llcmpl_df_impl;
    impl_funcs[2508] = &llucmpl_df_impl;
    impl_funcs[2509] = &llcmpg_df_impl;
    impl_funcs[2510] = &llucmpg_df_impl;
    impl_funcs[2511] = &llcmpe_df_impl;
    impl_funcs[2512] = &llucmpe_df_impl;
    impl_funcs[2513] = &llcmple_df_impl;
    impl_funcs[2514] = &llucmple_df_impl;
    impl_funcs[2515] = &llcmpge_df_impl;
    impl_funcs[2516] = &llucmpge_df_impl;
    impl_funcs[2517] = &llcmpne_df_impl;
    impl_funcs[2518] = &llucmpne_df_impl;
    impl_funcs[2519] = &llcast_dd_impl;
    impl_funcs[2520] = &llucast_dd_impl;
    impl_funcs[2521] = &lladd_dd_impl;
    impl_funcs[2522] = &lluadd_dd_impl;
    impl_funcs[2523] = &llsub_dd_impl;
    impl_funcs[2524] = &llusub_dd_impl;
    impl_funcs[2525] = &llmul_dd_impl;
    impl_funcs[2526] = &llumul_dd_impl;
    impl_funcs[2527] = &lldiv_dd_impl;
    impl_funcs[2528] = &lludiv_dd_impl;
    impl_funcs[2529] = &llcmpl_dd_impl;
    impl_funcs[2530] = &llucmpl_dd_impl;
    impl_funcs[2531] = &llcmpg_dd_impl;
    impl_funcs[2532] = &llucmpg_dd_impl;
    impl_funcs[2533] = &llcmpe_dd_impl;
    impl_funcs[2534] = &llucmpe_dd_impl;
    impl_funcs[2535] = &llcmple_dd_impl;
    impl_funcs[2536] = &llucmple_dd_impl;
    impl_funcs[2537] = &llcmpge_dd_impl;
    impl_funcs[2538] = &llucmpge_dd_impl;
    impl_funcs[2539] = &llcmpne_dd_impl;
    impl_funcs[2540] = &llucmpne_dd_impl;
    impl_funcs[2541] = &llmod_b_impl;
    impl_funcs[2542] = &llcast_ub_impl;
    impl_funcs[2543] = &llucast_ub_impl;
    impl_funcs[2544] = &lladd_ub_impl;
    impl_funcs[2545] = &lluadd_ub_impl;
    impl_funcs[2546] = &llsub_ub_impl;
    impl_funcs[2547] = &llusub_ub_impl;
    impl_funcs[2548] = &llmul_ub_impl;
    impl_funcs[2549] = &llumul_ub_impl;
    impl_funcs[2550] = &lldiv_ub_impl;
    impl_funcs[2551] = &lludiv_ub_impl;
    impl_funcs[2552] = &llcmpl_ub_impl;
    impl_funcs[2553] = &llucmpl_ub_impl;
    impl_funcs[2554] = &llcmpg_ub_impl;
    impl_funcs[2555] = &llucmpg_ub_impl;
    impl_funcs[2556] = &llcmpe_ub_impl;
    impl_funcs[2557] = &llucmpe_ub_impl;
    impl_funcs[2558] = &llcmple_ub_impl;
    impl_funcs[2559] = &llucmple_ub_impl;
    impl_funcs[2560] = &llcmpge_ub_impl;
    impl_funcs[2561] = &llucmpge_ub_impl;
    impl_funcs[2562] = &llcmpne_ub_impl;
    impl_funcs[2563] = &llucmpne_ub_impl;
    impl_funcs[2564] = &llswapb_impl;
    impl_funcs[2565] = &llmod_s_impl;
    impl_funcs[2566] = &llcast_us_impl;
    impl_funcs[2567] = &llucast_us_impl;
    impl_funcs[2568] = &lladd_us_impl;
    impl_funcs[2569] = &lluadd_us_impl;
    impl_funcs[2570] = &llsub_us_impl;
    impl_funcs[2571] = &llusub_us_impl;
    impl_funcs[2572] = &llmul_us_impl;
    impl_funcs[2573] = &llumul_us_impl;
    impl_funcs[2574] = &lldiv_us_impl;
    impl_funcs[2575] = &lludiv_us_impl;
    impl_funcs[2576] = &llcmpl_us_impl;
    impl_funcs[2577] = &llucmpl_us_impl;
    impl_funcs[2578] = &llcmpg_us_impl;
    impl_funcs[2579] = &llucmpg_us_impl;
    impl_funcs[2580] = &llcmpe_us_impl;
    impl_funcs[2581] = &llucmpe_us_impl;
    impl_funcs[2582] = &llcmple_us_impl;
    impl_funcs[2583] = &llucmple_us_impl;
    impl_funcs[2584] = &llcmpge_us_impl;
    impl_funcs[2585] = &llucmpge_us_impl;
    impl_funcs[2586] = &llcmpne_us_impl;
    impl_funcs[2587] = &llucmpne_us_impl;
    impl_funcs[2588] = &llswaps_impl;
    impl_funcs[2589] = &llmod_i_impl;
    impl_funcs[2590] = &llcast_ui_impl;
    impl_funcs[2591] = &llucast_ui_impl;
    impl_funcs[2592] = &lladd_ui_impl;
    impl_funcs[2593] = &lluadd_ui_impl;
    impl_funcs[2594] = &llsub_ui_impl;
    impl_funcs[2595] = &llusub_ui_impl;
    impl_funcs[2596] = &llmul_ui_impl;
    impl_funcs[2597] = &llumul_ui_impl;
    impl_funcs[2598] = &lldiv_ui_impl;
    impl_funcs[2599] = &lludiv_ui_impl;
    impl_funcs[2600] = &llcmpl_ui_impl;
    impl_funcs[2601] = &llucmpl_ui_impl;
    impl_funcs[2602] = &llcmpg_ui_impl;
    impl_funcs[2603] = &llucmpg_ui_impl;
    impl_funcs[2604] = &llcmpe_ui_impl;
    impl_funcs[2605] = &llucmpe_ui_impl;
    impl_funcs[2606] = &llcmple_ui_impl;
    impl_funcs[2607] = &llucmple_ui_impl;
    impl_funcs[2608] = &llcmpge_ui_impl;
    impl_funcs[2609] = &llucmpge_ui_impl;
    impl_funcs[2610] = &llcmpne_ui_impl;
    impl_funcs[2611] = &llucmpne_ui_impl;
    impl_funcs[2612] = &llswapi_impl;
    impl_funcs[2613] = &llmod_l_impl;
    impl_funcs[2614] = &llcast_ul_impl;
    impl_funcs[2615] = &llucast_ul_impl;
    impl_funcs[2616] = &lladd_ul_impl;
    impl_funcs[2617] = &lluadd_ul_impl;
    impl_funcs[2618] = &llsub_ul_impl;
    impl_funcs[2619] = &llusub_ul_impl;
    impl_funcs[2620] = &llmul_ul_impl;
    impl_funcs[2621] = &llumul_ul_impl;
    impl_funcs[2622] = &lldiv_ul_impl;
    impl_funcs[2623] = &lludiv_ul_impl;
    impl_funcs[2624] = &llcmpl_ul_impl;
    impl_funcs[2625] = &llucmpl_ul_impl;
    impl_funcs[2626] = &llcmpg_ul_impl;
    impl_funcs[2627] = &llucmpg_ul_impl;
    impl_funcs[2628] = &llcmpe_ul_impl;
    impl_funcs[2629] = &llucmpe_ul_impl;
    impl_funcs[2630] = &llcmple_ul_impl;
    impl_funcs[2631] = &llucmple_ul_impl;
    impl_funcs[2632] = &llcmpge_ul_impl;
    impl_funcs[2633] = &llucmpge_ul_impl;
    impl_funcs[2634] = &llcmpne_ul_impl;
    impl_funcs[2635] = &llucmpne_ul_impl;
    impl_funcs[2636] = &llswapl_impl;
    impl_funcs[2637] = &llmod_li_impl;
    impl_funcs[2638] = &llcast_uli_impl;
    impl_funcs[2639] = &llucast_uli_impl;
    impl_funcs[2640] = &lladd_uli_impl;
    impl_funcs[2641] = &lluadd_uli_impl;
    impl_funcs[2642] = &llsub_uli_impl;
    impl_funcs[2643] = &llusub_uli_impl;
    impl_funcs[2644] = &llmul_uli_impl;
    impl_funcs[2645] = &llumul_uli_impl;
    impl_funcs[2646] = &lldiv_uli_impl;
    impl_funcs[2647] = &lludiv_uli_impl;
    impl_funcs[2648] = &llcmpl_uli_impl;
    impl_funcs[2649] = &llucmpl_uli_impl;
    impl_funcs[2650] = &llcmpg_uli_impl;
    impl_funcs[2651] = &llucmpg_uli_impl;
    impl_funcs[2652] = &llcmpe_uli_impl;
    impl_funcs[2653] = &llucmpe_uli_impl;
    impl_funcs[2654] = &llcmple_uli_impl;
    impl_funcs[2655] = &llucmple_uli_impl;
    impl_funcs[2656] = &llcmpge_uli_impl;
    impl_funcs[2657] = &llucmpge_uli_impl;
    impl_funcs[2658] = &llcmpne_uli_impl;
    impl_funcs[2659] = &llucmpne_uli_impl;
    impl_funcs[2660] = &llswapli_impl;
    impl_funcs[2661] = &llmod_ll_impl;
    impl_funcs[2662] = &llcast_ull_impl;
    impl_funcs[2663] = &llucast_ull_impl;
    impl_funcs[2664] = &lladd_ull_impl;
    impl_funcs[2665] = &lluadd_ull_impl;
    impl_funcs[2666] = &llsub_ull_impl;
    impl_funcs[2667] = &llusub_ull_impl;
    impl_funcs[2668] = &llmul_ull_impl;
    impl_funcs[2669] = &llumul_ull_impl;
    impl_funcs[2670] = &lldiv_ull_impl;
    impl_funcs[2671] = &lludiv_ull_impl;
    impl_funcs[2672] = &llcmpl_ull_impl;
    impl_funcs[2673] = &llucmpl_ull_impl;
    impl_funcs[2674] = &llcmpg_ull_impl;
    impl_funcs[2675] = &llucmpg_ull_impl;
    impl_funcs[2676] = &llcmpe_ull_impl;
    impl_funcs[2677] = &llucmpe_ull_impl;
    impl_funcs[2678] = &llcmple_ull_impl;
    impl_funcs[2679] = &llucmple_ull_impl;
    impl_funcs[2680] = &llcmpge_ull_impl;
    impl_funcs[2681] = &llucmpge_ull_impl;
    impl_funcs[2682] = &llcmpne_ull_impl;
    impl_funcs[2683] = &llucmpne_ull_impl;
    impl_funcs[2684] = &llswapll_impl;
    impl_funcs[2685] = &llswapf_impl;
    impl_funcs[2686] = &llswapd_impl;
    impl_funcs[2687] = &llswapdf_impl;
    impl_funcs[2688] = &llswapdd_impl;
    impl_funcs[2689] = &llswapa_impl;
    impl_funcs[2690] = &lland_b_impl;
    impl_funcs[2691] = &llor_b_impl;
    impl_funcs[2692] = &llxor_b_impl;
    impl_funcs[2693] = &llshftr_b_impl;
    impl_funcs[2694] = &llshftl_b_impl;
    impl_funcs[2695] = &lland_s_impl;
    impl_funcs[2696] = &llor_s_impl;
    impl_funcs[2697] = &llxor_s_impl;
    impl_funcs[2698] = &llshftr_s_impl;
    impl_funcs[2699] = &llshftl_s_impl;
    impl_funcs[2700] = &lland_i_impl;
    impl_funcs[2701] = &llor_i_impl;
    impl_funcs[2702] = &llxor_i_impl;
    impl_funcs[2703] = &llshftr_i_impl;
    impl_funcs[2704] = &llshftl_i_impl;
    impl_funcs[2705] = &lland_l_impl;
    impl_funcs[2706] = &llor_l_impl;
    impl_funcs[2707] = &llxor_l_impl;
    impl_funcs[2708] = &llshftr_l_impl;
    impl_funcs[2709] = &llshftl_l_impl;
    impl_funcs[2710] = &lland_li_impl;
    impl_funcs[2711] = &llor_li_impl;
    impl_funcs[2712] = &llxor_li_impl;
    impl_funcs[2713] = &llshftr_li_impl;
    impl_funcs[2714] = &llshftl_li_impl;
    impl_funcs[2715] = &lland_ll_impl;
    impl_funcs[2716] = &llor_ll_impl;
    impl_funcs[2717] = &llxor_ll_impl;
    impl_funcs[2718] = &llshftr_ll_impl;
    impl_funcs[2719] = &llshftl_ll_impl;
    impl_funcs[2720] = &lldup_impl;
    impl_funcs[2721] = &lldup2_impl;
    impl_funcs[2722] = &lldup3_impl;
    impl_funcs[2723] = &lldup4_impl;
    impl_funcs[2724] = &lldup5_impl;
    impl_funcs[2725] = &llswap_impl;
    impl_funcs[2726] = &llrot_impl;
    impl_funcs[2727] = &llset_impl;
    impl_funcs[2728] = &llget_impl;
    impl_funcs[2729] = &llvset_impl;
    impl_funcs[2730] = &llsget_impl;
    impl_funcs[2731] = &llsset_impl;
    impl_funcs[2732] = &llsetl_impl;
    impl_funcs[2733] = &llinc_1_impl;
    impl_funcs[2734] = &llinc_2_impl;
    impl_funcs[2735] = &llstinc_1_impl;
    impl_funcs[2736] = &llstinc_2_impl;
    impl_funcs[2737] = &llreturn_impl;
    impl_funcs[2738] = &llmainst_impl;
    impl_funcs[2739] = &llmainst_0_impl;
    impl_funcs[2740] = &llmainst_1_impl;
    impl_funcs[2741] = &llmainst_2_impl;
    impl_funcs[2742] = &llmainst_3_impl;
    impl_funcs[2743] = &llprint_impl;
    impl_funcs[2744] = &lluprint_impl;
    impl_funcs[2745] = &fconst_impl;
    impl_funcs[2746] = &fconst_0_impl;
    impl_funcs[2747] = &fload_impl;
    impl_funcs[2748] = &fload_0_impl;
    impl_funcs[2749] = &fload_1_impl;
    impl_funcs[2750] = &fload_2_impl;
    impl_funcs[2751] = &fload_3_impl;
    impl_funcs[2752] = &fload_4_impl;
    impl_funcs[2753] = &fstore_impl;
    impl_funcs[2754] = &fstore_0_impl;
    impl_funcs[2755] = &fstore_1_impl;
    impl_funcs[2756] = &fstore_2_impl;
    impl_funcs[2757] = &fstore_3_impl;
    impl_funcs[2758] = &fstore_4_impl;
    impl_funcs[2759] = &fswapb_impl;
    impl_funcs[2760] = &fswaps_impl;
    impl_funcs[2761] = &fswapi_impl;
    impl_funcs[2762] = &fswapl_impl;
    impl_funcs[2763] = &fswapli_impl;
    impl_funcs[2764] = &fswapll_impl;
    impl_funcs[2765] = &fswapf_impl;
    impl_funcs[2766] = &fswapd_impl;
    impl_funcs[2767] = &fswapdf_impl;
    impl_funcs[2768] = &fswapdd_impl;
    impl_funcs[2769] = &fswapa_impl;
    impl_funcs[2770] = &fdup_impl;
    impl_funcs[2771] = &fdup2_impl;
    impl_funcs[2772] = &fdup3_impl;
    impl_funcs[2773] = &fdup4_impl;
    impl_funcs[2774] = &fdup5_impl;
    impl_funcs[2775] = &fswap_impl;
    impl_funcs[2776] = &frot_impl;
    impl_funcs[2777] = &fset_impl;
    impl_funcs[2778] = &fget_impl;
    impl_funcs[2779] = &fvset_impl;
    impl_funcs[2780] = &fsget_impl;
    impl_funcs[2781] = &fsset_impl;
    impl_funcs[2782] = &fsetl_impl;
    impl_funcs[2783] = &finc_1_impl;
    impl_funcs[2784] = &finc_2_impl;
    impl_funcs[2785] = &fstinc_1_impl;
    impl_funcs[2786] = &fstinc_2_impl;
    impl_funcs[2787] = &freturn_impl;
    impl_funcs[2788] = &fmainst_impl;
    impl_funcs[2789] = &fmainst_0_impl;
    impl_funcs[2790] = &fmainst_1_impl;
    impl_funcs[2791] = &fmainst_2_impl;
    impl_funcs[2792] = &fmainst_3_impl;
    impl_funcs[2793] = &dconst_impl;
    impl_funcs[2794] = &dconst_0_impl;
    impl_funcs[2795] = &dload_impl;
    impl_funcs[2796] = &dload_0_impl;
    impl_funcs[2797] = &dload_1_impl;
    impl_funcs[2798] = &dload_2_impl;
    impl_funcs[2799] = &dload_3_impl;
    impl_funcs[2800] = &dload_4_impl;
    impl_funcs[2801] = &dstore_impl;
    impl_funcs[2802] = &dstore_0_impl;
    impl_funcs[2803] = &dstore_1_impl;
    impl_funcs[2804] = &dstore_2_impl;
    impl_funcs[2805] = &dstore_3_impl;
    impl_funcs[2806] = &dstore_4_impl;
    impl_funcs[2807] = &dswapb_impl;
    impl_funcs[2808] = &dswaps_impl;
    impl_funcs[2809] = &dswapi_impl;
    impl_funcs[2810] = &dswapl_impl;
    impl_funcs[2811] = &dswapli_impl;
    impl_funcs[2812] = &dswapll_impl;
    impl_funcs[2813] = &dswapf_impl;
    impl_funcs[2814] = &dswapd_impl;
    impl_funcs[2815] = &dswapdf_impl;
    impl_funcs[2816] = &dswapdd_impl;
    impl_funcs[2817] = &dswapa_impl;
    impl_funcs[2818] = &ddup_impl;
    impl_funcs[2819] = &ddup2_impl;
    impl_funcs[2820] = &ddup3_impl;
    impl_funcs[2821] = &ddup4_impl;
    impl_funcs[2822] = &ddup5_impl;
    impl_funcs[2823] = &dswap_impl;
    impl_funcs[2824] = &drot_impl;
    impl_funcs[2825] = &dset_impl;
    impl_funcs[2826] = &dget_impl;
    impl_funcs[2827] = &dvset_impl;
    impl_funcs[2828] = &dsget_impl;
    impl_funcs[2829] = &dsset_impl;
    impl_funcs[2830] = &dsetl_impl;
    impl_funcs[2831] = &dinc_1_impl;
    impl_funcs[2832] = &dinc_2_impl;
    impl_funcs[2833] = &dstinc_1_impl;
    impl_funcs[2834] = &dstinc_2_impl;
    impl_funcs[2835] = &dreturn_impl;
    impl_funcs[2836] = &dmainst_impl;
    impl_funcs[2837] = &dmainst_0_impl;
    impl_funcs[2838] = &dmainst_1_impl;
    impl_funcs[2839] = &dmainst_2_impl;
    impl_funcs[2840] = &dmainst_3_impl;
    impl_funcs[2841] = &dfconst_impl;
    impl_funcs[2842] = &dfconst_0_impl;
    impl_funcs[2843] = &dfload_impl;
    impl_funcs[2844] = &dfload_0_impl;
    impl_funcs[2845] = &dfload_1_impl;
    impl_funcs[2846] = &dfload_2_impl;
    impl_funcs[2847] = &dfload_3_impl;
    impl_funcs[2848] = &dfload_4_impl;
    impl_funcs[2849] = &dfstore_impl;
    impl_funcs[2850] = &dfstore_0_impl;
    impl_funcs[2851] = &dfstore_1_impl;
    impl_funcs[2852] = &dfstore_2_impl;
    impl_funcs[2853] = &dfstore_3_impl;
    impl_funcs[2854] = &dfstore_4_impl;
    impl_funcs[2855] = &dfswapb_impl;
    impl_funcs[2856] = &dfswaps_impl;
    impl_funcs[2857] = &dfswapi_impl;
    impl_funcs[2858] = &dfswapl_impl;
    impl_funcs[2859] = &dfswapli_impl;
    impl_funcs[2860] = &dfswapll_impl;
    impl_funcs[2861] = &dfswapf_impl;
    impl_funcs[2862] = &dfswapd_impl;
    impl_funcs[2863] = &dfswapdf_impl;
    impl_funcs[2864] = &dfswapdd_impl;
    impl_funcs[2865] = &dfswapa_impl;
    impl_funcs[2866] = &dfdup_impl;
    impl_funcs[2867] = &dfdup2_impl;
    impl_funcs[2868] = &dfdup3_impl;
    impl_funcs[2869] = &dfdup4_impl;
    impl_funcs[2870] = &dfdup5_impl;
    impl_funcs[2871] = &dfswap_impl;
    impl_funcs[2872] = &dfrot_impl;
    impl_funcs[2873] = &dfset_impl;
    impl_funcs[2874] = &dfget_impl;
    impl_funcs[2875] = &dfvset_impl;
    impl_funcs[2876] = &dfsget_impl;
    impl_funcs[2877] = &dfsset_impl;
    impl_funcs[2878] = &dfsetl_impl;
    impl_funcs[2879] = &dfinc_1_impl;
    impl_funcs[2880] = &dfinc_2_impl;
    impl_funcs[2881] = &dfstinc_1_impl;
    impl_funcs[2882] = &dfstinc_2_impl;
    impl_funcs[2883] = &dfreturn_impl;
    impl_funcs[2884] = &dfmainst_impl;
    impl_funcs[2885] = &dfmainst_0_impl;
    impl_funcs[2886] = &dfmainst_1_impl;
    impl_funcs[2887] = &dfmainst_2_impl;
    impl_funcs[2888] = &dfmainst_3_impl;
    impl_funcs[2889] = &ddconst_impl;
    impl_funcs[2890] = &ddconst_0_impl;
    impl_funcs[2891] = &ddload_impl;
    impl_funcs[2892] = &ddload_0_impl;
    impl_funcs[2893] = &ddload_1_impl;
    impl_funcs[2894] = &ddload_2_impl;
    impl_funcs[2895] = &ddload_3_impl;
    impl_funcs[2896] = &ddload_4_impl;
    impl_funcs[2897] = &ddstore_impl;
    impl_funcs[2898] = &ddstore_0_impl;
    impl_funcs[2899] = &ddstore_1_impl;
    impl_funcs[2900] = &ddstore_2_impl;
    impl_funcs[2901] = &ddstore_3_impl;
    impl_funcs[2902] = &ddstore_4_impl;
    impl_funcs[2903] = &ddswapb_impl;
    impl_funcs[2904] = &ddswaps_impl;
    impl_funcs[2905] = &ddswapi_impl;
    impl_funcs[2906] = &ddswapl_impl;
    impl_funcs[2907] = &ddswapli_impl;
    impl_funcs[2908] = &ddswapll_impl;
    impl_funcs[2909] = &ddswapf_impl;
    impl_funcs[2910] = &ddswapd_impl;
    impl_funcs[2911] = &ddswapdf_impl;
    impl_funcs[2912] = &ddswapdd_impl;
    impl_funcs[2913] = &ddswapa_impl;
    impl_funcs[2914] = &dddup_impl;
    impl_funcs[2915] = &dddup2_impl;
    impl_funcs[2916] = &dddup3_impl;
    impl_funcs[2917] = &dddup4_impl;
    impl_funcs[2918] = &dddup5_impl;
    impl_funcs[2919] = &ddswap_impl;
    impl_funcs[2920] = &ddrot_impl;
    impl_funcs[2921] = &ddset_impl;
    impl_funcs[2922] = &ddget_impl;
    impl_funcs[2923] = &ddvset_impl;
    impl_funcs[2924] = &ddsget_impl;
    impl_funcs[2925] = &ddsset_impl;
    impl_funcs[2926] = &ddsetl_impl;
    impl_funcs[2927] = &ddinc_1_impl;
    impl_funcs[2928] = &ddinc_2_impl;
    impl_funcs[2929] = &ddstinc_1_impl;
    impl_funcs[2930] = &ddstinc_2_impl;
    impl_funcs[2931] = &ddreturn_impl;
    impl_funcs[2932] = &ddmainst_impl;
    impl_funcs[2933] = &ddmainst_0_impl;
    impl_funcs[2934] = &ddmainst_1_impl;
    impl_funcs[2935] = &ddmainst_2_impl;
    impl_funcs[2936] = &ddmainst_3_impl;
    impl_funcs[2937] = &aconst_impl;
    impl_funcs[2938] = &aconst_0_impl;
    impl_funcs[2939] = &aload_impl;
    impl_funcs[2940] = &aload_0_impl;
    impl_funcs[2941] = &aload_1_impl;
    impl_funcs[2942] = &aload_2_impl;
    impl_funcs[2943] = &aload_3_impl;
    impl_funcs[2944] = &aload_4_impl;
    impl_funcs[2945] = &astore_impl;
    impl_funcs[2946] = &astore_0_impl;
    impl_funcs[2947] = &astore_1_impl;
    impl_funcs[2948] = &astore_2_impl;
    impl_funcs[2949] = &astore_3_impl;
    impl_funcs[2950] = &astore_4_impl;
    impl_funcs[2951] = &aswapb_impl;
    impl_funcs[2952] = &aswaps_impl;
    impl_funcs[2953] = &aswapi_impl;
    impl_funcs[2954] = &aswapl_impl;
    impl_funcs[2955] = &aswapli_impl;
    impl_funcs[2956] = &aswapll_impl;
    impl_funcs[2957] = &aswapf_impl;
    impl_funcs[2958] = &aswapd_impl;
    impl_funcs[2959] = &aswapdf_impl;
    impl_funcs[2960] = &aswapdd_impl;
    impl_funcs[2961] = &aswapa_impl;
    impl_funcs[2962] = &adup_impl;
    impl_funcs[2963] = &adup2_impl;
    impl_funcs[2964] = &adup3_impl;
    impl_funcs[2965] = &adup4_impl;
    impl_funcs[2966] = &adup5_impl;
    impl_funcs[2967] = &aswap_impl;
    impl_funcs[2968] = &arot_impl;
    impl_funcs[2969] = &aset_impl;
    impl_funcs[2970] = &aget_impl;
    impl_funcs[2971] = &avset_impl;
    impl_funcs[2972] = &asget_impl;
    impl_funcs[2973] = &asset_impl;
    impl_funcs[2974] = &asetl_impl;
    impl_funcs[2975] = &ainc_1_impl;
    impl_funcs[2976] = &ainc_2_impl;
    impl_funcs[2977] = &astinc_1_impl;
    impl_funcs[2978] = &astinc_2_impl;
    impl_funcs[2979] = &areturn_impl;
    impl_funcs[2980] = &amainst_impl;
    impl_funcs[2981] = &amainst_0_impl;
    impl_funcs[2982] = &amainst_1_impl;
    impl_funcs[2983] = &amainst_2_impl;
    impl_funcs[2984] = &amainst_3_impl;
}
