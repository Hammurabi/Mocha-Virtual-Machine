//
// Created by Riverssen on 10.11.18.
//

#include "executorfuncs.h"

void funcs::func_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * (This opcode won't be interpreted) it creates a marker for an OP_STACK (must end with a return_op of some kind).
 */

	
	

}
void funcs::hash_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * perform a hash on pointer data.
 */

	
	

}
void funcs::timens_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a (uint_64) current time in nanoseconds.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (MvM::gtimens()));
	

}
void funcs::timems_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a (uint_64) current time in milliseconds.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (MvM::gtimems()));
	

}
void funcs::strconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a constant string.
 */

	{ uint_16 size_ = stack.popUnsignedShort(); pointer str = static_cast<pointer> (calloc(size_ * 2 + 2, size_ * 2 + 2)); accessMemoryAndSetUnsignedShort(str, 0, size_); stack.pushPointer(str);}
	

}
void funcs::strload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a string.
 */

	stack.pushUnsignedLong(lvt[ops.getUnsignedShort()].UnsignedLong);
	

}
void funcs::strstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a string.
 */

	lvt[ops.getUnsignedShort()] = lve_Long(stack.popUnsignedLong());
	

}
void funcs::strsizeof_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a string.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (accessMemoryAndGetUnsignedShort(stack.popPointer(), 0)));
	

}
void funcs::strcast_a_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast a string to a pointer.
 */

	{ pointer s = stack.popPointer(); uint_16 l = accessMemoryAndGetUnsignedShort(s, 0); pointer b = static_cast<pointer> (calloc(l * 2, l * 2)); memcpy(b, s + 2, l * 2); stack.pushPointer(b); }
	

}
void funcs::strcast_ba_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast a string to a byte array.
 */

	{ pointer s = stack.popPointer(); uint_16 l = accessMemoryAndGetUnsignedShort(s, 0); pointer b = static_cast<pointer> (calloc(l * 2 + 6, l * 2 + 6)); memcpy(b + 6, s, l * 2); accessMemoryAndSetUnsignedLong(b, 0, static_cast<uint_64> (l)); stack.pushPointer(b); }
	

}
void funcs::strprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a string.
 */

	printString(stack.popPointer());
	

}
void funcs::strreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a string from scope.
 */

	stack_main.pushUnsignedLong(stack.popUnsignedLong()); return;
	

}
void funcs::mark_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * mark a specific location.
 */

	CHECK_POINTS[ops.getUnsignedShort()] = ops.address + 2;
	

}
void funcs::jump_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * jump to a specific location.
 */

	ops.address = ops.getUnsignedLong();
	

}
void funcs::jumptomark_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * jump to a specific marked location.
 */

	ops.address = CHECK_POINTS[ops.getUnsignedShort()];
	

}
void funcs::newline_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a \n character into the console.
 */

	std::cout<<std::endl;
	

}
void funcs::ret_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return from this scope.
 */

	return;
	

}
void funcs::invoke_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * invoke a method.
 */

	execute(globalTable, nativeTable, globalPointer, globalPointer, stack, globalTable[ops.getUnsignedLong()]);
	

}
void funcs::invokedynamic_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * dynamically invoke a method using function pointers.
 */

	execute(globalTable, nativeTable, globalPointer, globalPointer, stack, globalTable[stack.popUnsignedLong()]);
	

}
void funcs::invokespecial_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * invoke a native method using function pointers.
 */

	nativeTable[stack.popUnsignedLong()]->execute(globalTable, nativeTable, globalPointer, globalPointer, stack, globalTable[stack.popUnsignedLong()]);
	

}
void funcs::if_t_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * if true.
 */

	{ uint_32 jump = ops.getUnsignedInt(); if (stack.popByte() == 0) ops.address += jump; }
	

}
void funcs::if_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * if not true.
 */

	{ uint_32 jump = ops.getUnsignedInt(); if (stack.popByte() > 0) ops.address += jump; }
	

}
void funcs::amemcpy_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * copy memory to destination from source.
 */

	memcpy(stack.popPointer(), stack.popPointer(), stack.popUnsignedLong());
	

}
void funcs::bspmemcpy_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * copy memory to destination from base pointer.
 */

	memcpy(stack.popPointer(), base, stack.popUnsignedLong());
	

}
void funcs::amemcpybsp_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * copy memory to pointer from source.
 */

	memcpy(base, stack.popPointer(), stack.popUnsignedLong());
	

}
void funcs::amalloc_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack.
 */

	stack.pushPointer(static_cast<pointer> (malloc(stack.popUnsignedLong())));
	

}
void funcs::acalloc_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack.
 */

	stack.pushPointer(static_cast<pointer> (calloc(stack.popUnsignedLong(), stack.popUnsignedLong())));
	

}
void funcs::amallocs_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack from size_int16_t.
 */

	stack.pushPointer(static_cast<pointer> (malloc(stack.popUnsignedShort())));
	

}
void funcs::acallocs_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer to the stack from size_int16_t.
 */

	stack.pushPointer(static_cast<pointer> (calloc(stack.popUnsignedShort(), stack.popUnsignedShort())));
	

}
void funcs::abload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_8 from a pointer.
 */

	stack.pushByte(accessMemoryAndGetByte(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::asload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_16 from a pointer.
 */

	stack.pushShort(accessMemoryAndGetShort(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::aiload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_32 from a pointer.
 */

	stack.pushInt(accessMemoryAndGetInt(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::alload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_64 from a pointer.
 */

	stack.pushLong(accessMemoryAndGetLong(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::aliload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_128 from a pointer.
 */

	stack.pushLongInt(accessMemoryAndGetLongInt(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::allload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an int_256 from a pointer.
 */

	stack.pushLongLong(accessMemoryAndGetLongLong(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::afload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_32 from a pointer.
 */

	stack.pushFloat(accessMemoryAndGetFloat(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::adload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_64 from a pointer.
 */

	stack.pushDouble(accessMemoryAndGetDouble(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::adfload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_128 from a pointer.
 */

	stack.pushDoubleFloat(accessMemoryAndGetDoubleFloat(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::addload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load an flt_256 from a pointer.
 */

	stack.pushDoubleDouble(accessMemoryAndGetDoubleDouble(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::aaload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer from a pointer.
 */

	stack.pushPointer(accessMemoryAndGetPointer(stack.popPointer(), stack.popUnsignedLong()));
	

}
void funcs::abstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_8 in a pointer.
 */

	(accessMemoryAndSetByte(stack.popPointer(), stack.popUnsignedLong(), stack.popByte()));
	

}
void funcs::asstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_16 in a pointer.
 */

	(accessMemoryAndSetShort(stack.popPointer(), stack.popUnsignedLong(), stack.popShort()));
	

}
void funcs::aistore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_32 in a pointer.
 */

	(accessMemoryAndSetInt(stack.popPointer(), stack.popUnsignedLong(), stack.popInt()));
	

}
void funcs::alstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_64 in a pointer.
 */

	(accessMemoryAndSetLong(stack.popPointer(), stack.popUnsignedLong(), stack.popLong()));
	

}
void funcs::alistore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_128 in a pointer.
 */

	(accessMemoryAndSetLongInt(stack.popPointer(), stack.popUnsignedLong(), stack.popLongInt()));
	

}
void funcs::allstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an int_256 in a pointer.
 */

	(accessMemoryAndSetLongLong(stack.popPointer(), stack.popUnsignedLong(), stack.popLongLong()));
	

}
void funcs::afstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_32 in a pointer.
 */

	(accessMemoryAndSetFloat(stack.popPointer(), stack.popUnsignedLong(), stack.popFloat()));
	

}
void funcs::adstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_64 in a pointer.
 */

	(accessMemoryAndSetDouble(stack.popPointer(), stack.popUnsignedLong(), stack.popDouble()));
	

}
void funcs::adfstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_128 in a pointer.
 */

	(accessMemoryAndSetDoubleFloat(stack.popPointer(), stack.popUnsignedLong(), stack.popDoubleFloat()));
	

}
void funcs::addstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store an flt_256 in a pointer.
 */

	(accessMemoryAndSetDoubleDouble(stack.popPointer(), stack.popUnsignedLong(), stack.popDoubleDouble()));
	

}
void funcs::aastore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer in a pointer.
 */

	(accessMemoryAndSetPointer(stack.popPointer(), stack.popUnsignedLong(), stack.popPointer()));
	

}
void funcs::baconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a byte array.
 */

	{ uint_64 length = stack.popUnsignedLong(); pointer p = static_cast<pointer> (calloc(length, length)); stack.pushPointer(p); accessMemoryAndSetUnsignedLong(p, 0, length); }
	

}
void funcs::baconsts_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a byte array using size_int16_t
 */

	{ uint_64 length = static_cast<uint_64> (stack.popUnsignedShort()); pointer p = static_cast<pointer> (calloc(length, length)); stack.pushPointer(p); accessMemoryAndSetUnsignedLong(p, 0, length); }
	

}
void funcs::baconsti_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a byte array using size_int32_t
 */

	{ uint_64 length = static_cast<uint_64> (stack.popUnsignedInt()); pointer p = static_cast<pointer> (calloc(length, length)); stack.pushPointer(p); accessMemoryAndSetUnsignedLong(p, 0, length); }
	

}
void funcs::bacast_a_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast a byte array into a pointer
 */

	{ stack.pushPointer(stack.popPointer() + 8); }
	

}
void funcs::basizeof_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push the size of a byte array to stack
 */

	{ stack.pushUnsignedLong(static_cast<uint_64> (accessMemoryAndGetLong(stack.popPointer(), 0))); }
	

}
void funcs::printba_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a byte array.
 */

	{ pointer bytearray = stack.popPointer(); uint_64 bytearraysize   = static_cast<uint_64> (accessMemoryAndGetLong(bytearray, 0)); std::string data = "["; for (uint_64 i = 0; i < bytearraysize; i ++) data += std::to_string(accessMemoryAndGetByte(bytearray + 8, i)) + ((i < bytearraysize - 1) ? ", " : "]"); log(data); }
	

}
void funcs::bconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack.
 */

	stack.pushByte(ops.getByte());
	

}
void funcs::bconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 0).
 */

	stack.pushByte(0);
	

}
void funcs::bconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 1).
 */

	stack.pushByte(1);
	

}
void funcs::bconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 2).
 */

	stack.pushByte(2);
	

}
void funcs::bconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 3).
 */

	stack.pushByte(3);
	

}
void funcs::bconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 4).
 */

	stack.pushByte(4);
	

}
void funcs::bconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 5).
 */

	stack.pushByte(5);
	

}
void funcs::bconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 6).
 */

	stack.pushByte(6);
	

}
void funcs::bconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 9).
 */

	stack.pushByte(9);
	

}
void funcs::bconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 10).
 */

	stack.pushByte(10);
	

}
void funcs::bconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 11).
 */

	stack.pushByte(11);
	

}
void funcs::bconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_8 into the stack (value = 12).
 */

	stack.pushByte(12);
	

}
void funcs::bload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable.
 */

	stack.pushByte(lvt[ops.getUnsignedShort()].Byte);
	

}
void funcs::bload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 0.
 */

	stack.pushByte(lvt[0].Byte);
	

}
void funcs::bload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 1.
 */

	stack.pushByte(lvt[1].Byte);
	

}
void funcs::bload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 2.
 */

	stack.pushByte(lvt[2].Byte);
	

}
void funcs::bload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 3.
 */

	stack.pushByte(lvt[3].Byte);
	

}
void funcs::bload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_8 into the stack from local variable 4.
 */

	stack.pushByte(lvt[4].Byte);
	

}
void funcs::bstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Byte(stack.popByte());
	

}
void funcs::bstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 0.
 */

	lvt[0] = lve_Byte(stack.popByte());
	

}
void funcs::bstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 1.
 */

	lvt[1] = lve_Byte(stack.popByte());
	

}
void funcs::bstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 2.
 */

	lvt[2] = lve_Byte(stack.popByte());
	

}
void funcs::bstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 3.
 */

	lvt[3] = lve_Byte(stack.popByte());
	

}
void funcs::bstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from stack into local variable 4.
 */

	lvt[4] = lve_Byte(stack.popByte());
	

}
void funcs::bcast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Byte.
 */

	stack.pushByte(static_cast<int_8> (stack.popByte()));
	

}
void funcs::bucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Byte.
 */
 
	stack.pushByte(static_cast<int_8> (stack.popUnsignedByte()));
	;
}
void funcs::badd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a + b);
	}
	

}
void funcs::buadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte(a + b);
	}
	;
}
void funcs::bsub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a - b);
	}
	

}
void funcs::busub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte(a - b);
	}
	;
}
void funcs::bmul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a * b);
	}
	

}
void funcs::bumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte(a * b);
	}
	;
}
void funcs::bdiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a / b);
	}
	

}
void funcs::budiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte(a / b);
	}
	;
}
void funcs::bcmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Short.
 */

	stack.pushShort(static_cast<int_16> (stack.popByte()));
	

}
void funcs::bucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Short.
 */
 
	stack.pushShort(static_cast<int_16> (stack.popUnsignedByte()));
	;
}
void funcs::badd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a + b);
	}
	

}
void funcs::buadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushShort(a + b);
	}
	;
}
void funcs::bsub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a - b);
	}
	

}
void funcs::busub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushShort(a - b);
	}
	;
}
void funcs::bmul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a * b);
	}
	

}
void funcs::bumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushShort(a * b);
	}
	;
}
void funcs::bdiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a / b);
	}
	

}
void funcs::budiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushShort(a / b);
	}
	;
}
void funcs::bcmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Int.
 */

	stack.pushInt(static_cast<int_32> (stack.popByte()));
	

}
void funcs::bucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Int.
 */
 
	stack.pushInt(static_cast<int_32> (stack.popUnsignedByte()));
	;
}
void funcs::badd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a + b);
	}
	

}
void funcs::buadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushInt(a + b);
	}
	;
}
void funcs::bsub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a - b);
	}
	

}
void funcs::busub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushInt(a - b);
	}
	;
}
void funcs::bmul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a * b);
	}
	

}
void funcs::bumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushInt(a * b);
	}
	;
}
void funcs::bdiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a / b);
	}
	

}
void funcs::budiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushInt(a / b);
	}
	;
}
void funcs::bcmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Long.
 */

	stack.pushLong(static_cast<int_64> (stack.popByte()));
	

}
void funcs::bucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Long.
 */
 
	stack.pushLong(static_cast<int_64> (stack.popUnsignedByte()));
	;
}
void funcs::badd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	

}
void funcs::buadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	;
}
void funcs::bsub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	

}
void funcs::busub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	;
}
void funcs::bmul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	

}
void funcs::bumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	;
}
void funcs::bdiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	

}
void funcs::budiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	;
}
void funcs::bcmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type LongInt.
 */

	stack.pushLongInt(static_cast<int_128> (stack.popByte()));
	

}
void funcs::bucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type LongInt.
 */
 
	stack.pushLongInt(static_cast<int_128> (stack.popUnsignedByte()));
	;
}
void funcs::badd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::buadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::bsub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::busub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::bmul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::bumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::bdiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::budiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::bcmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type LongLong.
 */

	stack.pushLongLong(static_cast<int_256> (stack.popByte()));
	

}
void funcs::bucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type LongLong.
 */
 
	stack.pushLongLong(static_cast<int_256> (stack.popUnsignedByte()));
	;
}
void funcs::badd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::buadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::bsub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::busub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::bmul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::bumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::bdiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::budiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::bcmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Float.
 */

	stack.pushFloat(static_cast<flt_32> (stack.popByte()));
	

}
void funcs::bucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Float.
 */
 
	stack.pushFloat(static_cast<flt_32> (stack.popUnsignedByte()));
	;
}
void funcs::badd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a + b);
	}
	

}
void funcs::buadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a + b);
	}
	;
}
void funcs::bsub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a - b);
	}
	

}
void funcs::busub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a - b);
	}
	;
}
void funcs::bmul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a * b);
	}
	

}
void funcs::bumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a * b);
	}
	;
}
void funcs::bdiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a / b);
	}
	

}
void funcs::budiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a / b);
	}
	;
}
void funcs::bcmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Float.
 */

	{
	int_8 b = stack.popByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Float.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type Double.
 */

	stack.pushDouble(static_cast<flt_64> (stack.popByte()));
	

}
void funcs::bucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type Double.
 */
 
	stack.pushDouble(static_cast<flt_64> (stack.popUnsignedByte()));
	;
}
void funcs::badd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a + b);
	}
	

}
void funcs::buadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a + b);
	}
	;
}
void funcs::bsub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a - b);
	}
	

}
void funcs::busub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a - b);
	}
	;
}
void funcs::bmul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a * b);
	}
	

}
void funcs::bumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a * b);
	}
	;
}
void funcs::bdiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a / b);
	}
	

}
void funcs::budiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a / b);
	}
	;
}
void funcs::bcmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type Double.
 */

	{
	int_8 b = stack.popByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type Double.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type DoubleFloat.
 */

	stack.pushDoubleFloat(static_cast<flt_128> (stack.popByte()));
	

}
void funcs::bucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type DoubleFloat.
 */
 
	stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedByte()));
	;
}
void funcs::badd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	

}
void funcs::buadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	;
}
void funcs::bsub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	

}
void funcs::busub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	;
}
void funcs::bmul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	

}
void funcs::bumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	;
}
void funcs::bdiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	

}
void funcs::budiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	;
}
void funcs::bcmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type DoubleFloat.
 */

	{
	int_8 b = stack.popByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type DoubleFloat.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bcast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to type DoubleDouble.
 */

	stack.pushDoubleDouble(static_cast<flt_256> (stack.popByte()));
	

}
void funcs::bucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to type DoubleDouble.
 */
 
	stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedByte()));
	;
}
void funcs::badd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	

}
void funcs::buadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	;
}
void funcs::bsub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	

}
void funcs::busub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	;
}
void funcs::bmul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	

}
void funcs::bumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	;
}
void funcs::bdiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	

}
void funcs::budiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	;
}
void funcs::bcmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with type DoubleDouble.
 */

	{
	int_8 b = stack.popByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with type DoubleDouble.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bmod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a % b);
	}
	

}
void funcs::bcast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Byte.
 */

	stack.pushUnsignedByte(static_cast<uint_8> (stack.popByte()));
	

}
void funcs::bucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Byte.
 */
 
	stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedByte()));
	;
}
void funcs::badd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a + b);
	}
	

}
void funcs::buadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a + b);
	}
	;
}
void funcs::bsub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a - b);
	}
	

}
void funcs::busub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a - b);
	}
	;
}
void funcs::bmul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a * b);
	}
	

}
void funcs::bumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a * b);
	}
	;
}
void funcs::bdiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a / b);
	}
	

}
void funcs::budiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushUnsignedByte(a / b);
	}
	;
}
void funcs::bcmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Byte.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_8 a = stack.popUnsignedByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); int_8 b = stack.popByte(); stack.pushByte(a); stack.pushByte(b); }
	

}
void funcs::bmod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a % b);
	}
	

}
void funcs::bcast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Short.
 */

	stack.pushUnsignedShort(static_cast<uint_16> (stack.popByte()));
	

}
void funcs::bucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Short.
 */
 
	stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedByte()));
	;
}
void funcs::badd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a + b);
	}
	

}
void funcs::buadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a + b);
	}
	;
}
void funcs::bsub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a - b);
	}
	

}
void funcs::busub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a - b);
	}
	;
}
void funcs::bmul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a * b);
	}
	

}
void funcs::bumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a * b);
	}
	;
}
void funcs::bdiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a / b);
	}
	

}
void funcs::budiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a / b);
	}
	;
}
void funcs::bcmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Short.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); int_8 b = stack.popByte(); stack.pushShort(a); stack.pushByte(b); }
	

}
void funcs::bmod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a % b);
	}
	

}
void funcs::bcast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Int.
 */

	stack.pushUnsignedInt(static_cast<uint_32> (stack.popByte()));
	

}
void funcs::bucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Int.
 */
 
	stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedByte()));
	;
}
void funcs::badd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	

}
void funcs::buadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	;
}
void funcs::bsub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	

}
void funcs::busub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	;
}
void funcs::bmul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	

}
void funcs::bumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	;
}
void funcs::bdiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	

}
void funcs::budiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	;
}
void funcs::bcmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Int.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); int_8 b = stack.popByte(); stack.pushInt(a); stack.pushByte(b); }
	

}
void funcs::bmod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::bcast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type Long.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (stack.popByte()));
	

}
void funcs::bucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type Long.
 */
 
	stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedByte()));
	;
}
void funcs::badd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::buadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::bsub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::busub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::bmul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::bumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::bdiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::budiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::bcmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type Long.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); int_8 b = stack.popByte(); stack.pushLong(a); stack.pushByte(b); }
	

}
void funcs::bmod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::bcast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type LongInt.
 */

	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popByte()));
	

}
void funcs::bucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type LongInt.
 */
 
	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedByte()));
	;
}
void funcs::badd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::buadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::bsub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::busub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::bmul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::bumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::bdiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::budiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::bcmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type LongInt.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); int_8 b = stack.popByte(); stack.pushLongInt(a); stack.pushByte(b); }
	

}
void funcs::bmod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::bcast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_8 to unsigned type LongLong.
 */

	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popByte()));
	

}
void funcs::bucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_8 to unsigned type LongLong.
 */
 
	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedByte()));
	;
}
void funcs::badd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_8 with unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::buadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_8 with unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::bsub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_8 with unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::busub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_8 with unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::bmul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_8 with unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::bumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_8 with unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::bdiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_8 with unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::budiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_8 with unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::bcmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::bucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::bcmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::bucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::bcmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 equal with unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::bucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 equal with unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::bcmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 less than or equal to unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::bucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 less than or equal to unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 greater than or equal to unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::bucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 greater than or equal to unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::bcmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_8 not equal with unsigned type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::bucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_8 not equal with unsigned type LongLong.
 */
 
	{
	uint_8 b = stack.popUnsignedByte();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::bswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); int_8 b = stack.popByte(); stack.pushLongLong(a); stack.pushByte(b); }
	

}
void funcs::bswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); int_8 b = stack.popByte(); stack.pushFloat(a); stack.pushByte(b); }
	

}
void funcs::bswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); int_8 b = stack.popByte(); stack.pushDouble(a); stack.pushByte(b); }
	

}
void funcs::bswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); int_8 b = stack.popByte(); stack.pushDoubleFloat(a); stack.pushByte(b); }
	

}
void funcs::bswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); int_8 b = stack.popByte(); stack.pushDoubleDouble(a); stack.pushByte(b); }
	

}
void funcs::bswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); int_8 b = stack.popByte(); stack.pushPointer(a); stack.pushByte(b); }
	

}
void funcs::band_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a & b);
	}
	

}
void funcs::bor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a | b);
	}
	

}
void funcs::bxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a ^ b);
	}
	

}
void funcs::bshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a >> b);
	}
	

}
void funcs::bshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Byte.
 */

	{
	int_8 b = stack.popByte();
	int_8 a = stack.popByte();
	stack.pushByte(a << b);
	}
	

}
void funcs::band_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a & b);
	}
	

}
void funcs::bor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a | b);
	}
	

}
void funcs::bxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a ^ b);
	}
	

}
void funcs::bshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a >> b);
	}
	

}
void funcs::bshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Short.
 */

	{
	int_8 b = stack.popByte();
	int_16 a = stack.popShort();
	stack.pushShort(a << b);
	}
	

}
void funcs::band_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a & b);
	}
	

}
void funcs::bor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a | b);
	}
	

}
void funcs::bxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a ^ b);
	}
	

}
void funcs::bshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a >> b);
	}
	

}
void funcs::bshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Int.
 */

	{
	int_8 b = stack.popByte();
	int_32 a = stack.popInt();
	stack.pushInt(a << b);
	}
	

}
void funcs::band_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a & b);
	}
	

}
void funcs::bor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a | b);
	}
	

}
void funcs::bxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::bshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a >> b);
	}
	

}
void funcs::bshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type Long.
 */

	{
	int_8 b = stack.popByte();
	int_64 a = stack.popLong();
	stack.pushLong(a << b);
	}
	

}
void funcs::band_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::bor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::bxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::bshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::bshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type LongInt.
 */

	{
	int_8 b = stack.popByte();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::band_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::bor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::bxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::bshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::bshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_8 with type LongLong.
 */

	{
	int_8 b = stack.popByte();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::bdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 on the stack.
 */

	stack.pushByte(stack.peekByte());
	

}
void funcs::bdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 2 times on the stack.
 */

	stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());
	

}
void funcs::bdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 3 times on the stack.
 */

	stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());
	

}
void funcs::bdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 4 times on the stack.
 */

	stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());
	

}
void funcs::bdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_8 5 times on the stack.
 */

	stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());stack.pushByte(stack.peekByte());
	

}
void funcs::bswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_8 elements.
 */

	{ int_8 a = stack.popByte(); int_8 b = stack.popByte(); stack.pushByte(a); stack.pushByte(b); }
	

}
void funcs::brot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_8 elements.
 */

	{ int_8 a = stack.popByte(); int_8 b = stack.popByte(); int_8 c = stack.popByte(); stack.pushByte(a); stack.pushByte(b); stack.pushByte(c); }
	

}
void funcs::bset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from stack into a field on base pointer.
 */

	accessMemoryAndSetByte(base, ops.getUnsignedInt(), stack.popByte());
	

}
void funcs::bget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_8 from a field on base pointer to stack.
 */

	stack.pushByte(accessMemoryAndGetByte(base, ops.getUnsignedInt()));
	

}
void funcs::bvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from value into a field on base pointer.
 */

	accessMemoryAndSetByte(base, ops.getUnsignedInt(), ops.getByte());
	

}
void funcs::bsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_8 from a field on base pointer to stack using address from stack.
 */

	stack.pushByte(accessMemoryAndGetByte(base, stack.popUnsignedInt()));
	

}
void funcs::bsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetByte(base, stack.popUnsignedInt(), stack.popByte());
	

}
void funcs::bsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_8 from local variable into a field on base pointer.
 */

	accessMemoryAndSetByte(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Byte);
	

}
void funcs::binc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Byte = lvt[point].Byte + 1; }
	

}
void funcs::binc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Byte = lvt[point].Byte + 2; }
	

}
void funcs::bstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 1 on stack.
 */

	stack.pushByte(stack.popByte() + 1);
	

}
void funcs::bstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_8 by 2 on stack.
 */

	stack.pushByte(stack.popByte() + 2);
	

}
void funcs::breturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_8 into the main stack.
 */

	stack_main.pushByte(stack.popByte()); return;
	

}
void funcs::bmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Byte = stack_main.popByte();
	

}
void funcs::bmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 0.
 */

	lvt[0].Byte = stack_main.popByte();;
	

}
void funcs::bmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 1.
 */

	lvt[1].Byte = stack_main.popByte();;
	

}
void funcs::bmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 2.
 */

	lvt[2].Byte = stack_main.popByte();;
	

}
void funcs::bmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_8 from main stack in local variable 3.
 */

	lvt[3].Byte = stack_main.popByte();;
	

}
void funcs::bprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_8 from stack.
 */

	log(std::to_string(stack.popByte()));
	

}
void funcs::buprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_8 from stack.
 */
 
	log(std::to_string(stack.popUnsignedByte()));
	;
}
void funcs::sconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack.
 */

	stack.pushShort(ops.getShort());
	

}
void funcs::sconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 0).
 */

	stack.pushShort(0);
	

}
void funcs::sconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 1).
 */

	stack.pushShort(1);
	

}
void funcs::sconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 2).
 */

	stack.pushShort(2);
	

}
void funcs::sconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 3).
 */

	stack.pushShort(3);
	

}
void funcs::sconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 4).
 */

	stack.pushShort(4);
	

}
void funcs::sconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 5).
 */

	stack.pushShort(5);
	

}
void funcs::sconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 6).
 */

	stack.pushShort(6);
	

}
void funcs::sconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 9).
 */

	stack.pushShort(9);
	

}
void funcs::sconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 10).
 */

	stack.pushShort(10);
	

}
void funcs::sconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 11).
 */

	stack.pushShort(11);
	

}
void funcs::sconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_16 into the stack (value = 12).
 */

	stack.pushShort(12);
	

}
void funcs::sload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable.
 */

	stack.pushShort(lvt[ops.getUnsignedShort()].Short);
	

}
void funcs::sload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 0.
 */

	stack.pushShort(lvt[0].Short);
	

}
void funcs::sload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 1.
 */

	stack.pushShort(lvt[1].Short);
	

}
void funcs::sload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 2.
 */

	stack.pushShort(lvt[2].Short);
	

}
void funcs::sload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 3.
 */

	stack.pushShort(lvt[3].Short);
	

}
void funcs::sload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_16 into the stack from local variable 4.
 */

	stack.pushShort(lvt[4].Short);
	

}
void funcs::sstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Short(stack.popShort());
	

}
void funcs::sstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 0.
 */

	lvt[0] = lve_Short(stack.popShort());
	

}
void funcs::sstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 1.
 */

	lvt[1] = lve_Short(stack.popShort());
	

}
void funcs::sstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 2.
 */

	lvt[2] = lve_Short(stack.popShort());
	

}
void funcs::sstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 3.
 */

	lvt[3] = lve_Short(stack.popShort());
	

}
void funcs::sstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from stack into local variable 4.
 */

	lvt[4] = lve_Short(stack.popShort());
	

}
void funcs::scast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Byte.
 */

	stack.pushByte(static_cast<int_8> (stack.popShort()));
	

}
void funcs::sucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Byte.
 */
 
	stack.pushByte(static_cast<int_8> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a + b);
	}
	

}
void funcs::suadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushShort(a + b);
	}
	;
}
void funcs::ssub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a - b);
	}
	

}
void funcs::susub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushShort(a - b);
	}
	;
}
void funcs::smul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a * b);
	}
	

}
void funcs::sumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushShort(a * b);
	}
	;
}
void funcs::sdiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a / b);
	}
	

}
void funcs::sudiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushShort(a / b);
	}
	;
}
void funcs::scmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Short.
 */

	stack.pushShort(static_cast<int_16> (stack.popShort()));
	

}
void funcs::sucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Short.
 */
 
	stack.pushShort(static_cast<int_16> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a + b);
	}
	

}
void funcs::suadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushShort(a + b);
	}
	;
}
void funcs::ssub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a - b);
	}
	

}
void funcs::susub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushShort(a - b);
	}
	;
}
void funcs::smul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a * b);
	}
	

}
void funcs::sumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushShort(a * b);
	}
	;
}
void funcs::sdiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a / b);
	}
	

}
void funcs::sudiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushShort(a / b);
	}
	;
}
void funcs::scmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Int.
 */

	stack.pushInt(static_cast<int_32> (stack.popShort()));
	

}
void funcs::sucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Int.
 */
 
	stack.pushInt(static_cast<int_32> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a + b);
	}
	

}
void funcs::suadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushInt(a + b);
	}
	;
}
void funcs::ssub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a - b);
	}
	

}
void funcs::susub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushInt(a - b);
	}
	;
}
void funcs::smul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a * b);
	}
	

}
void funcs::sumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushInt(a * b);
	}
	;
}
void funcs::sdiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a / b);
	}
	

}
void funcs::sudiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushInt(a / b);
	}
	;
}
void funcs::scmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Long.
 */

	stack.pushLong(static_cast<int_64> (stack.popShort()));
	

}
void funcs::sucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Long.
 */
 
	stack.pushLong(static_cast<int_64> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	

}
void funcs::suadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	;
}
void funcs::ssub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	

}
void funcs::susub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	;
}
void funcs::smul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	

}
void funcs::sumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	;
}
void funcs::sdiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	

}
void funcs::sudiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	;
}
void funcs::scmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type LongInt.
 */

	stack.pushLongInt(static_cast<int_128> (stack.popShort()));
	

}
void funcs::sucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type LongInt.
 */
 
	stack.pushLongInt(static_cast<int_128> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::suadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::ssub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::susub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::smul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::sumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::sdiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::sudiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::scmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type LongLong.
 */

	stack.pushLongLong(static_cast<int_256> (stack.popShort()));
	

}
void funcs::sucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type LongLong.
 */
 
	stack.pushLongLong(static_cast<int_256> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::suadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::ssub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::susub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::smul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::sumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::sdiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::sudiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::scmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Float.
 */

	stack.pushFloat(static_cast<flt_32> (stack.popShort()));
	

}
void funcs::sucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Float.
 */
 
	stack.pushFloat(static_cast<flt_32> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a + b);
	}
	

}
void funcs::suadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a + b);
	}
	;
}
void funcs::ssub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a - b);
	}
	

}
void funcs::susub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a - b);
	}
	;
}
void funcs::smul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a * b);
	}
	

}
void funcs::sumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a * b);
	}
	;
}
void funcs::sdiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a / b);
	}
	

}
void funcs::sudiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushFloat(a / b);
	}
	;
}
void funcs::scmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Float.
 */

	{
	int_16 b = stack.popShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Float.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type Double.
 */

	stack.pushDouble(static_cast<flt_64> (stack.popShort()));
	

}
void funcs::sucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type Double.
 */
 
	stack.pushDouble(static_cast<flt_64> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a + b);
	}
	

}
void funcs::suadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a + b);
	}
	;
}
void funcs::ssub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a - b);
	}
	

}
void funcs::susub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a - b);
	}
	;
}
void funcs::smul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a * b);
	}
	

}
void funcs::sumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a * b);
	}
	;
}
void funcs::sdiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a / b);
	}
	

}
void funcs::sudiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a / b);
	}
	;
}
void funcs::scmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type Double.
 */

	{
	int_16 b = stack.popShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type Double.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type DoubleFloat.
 */

	stack.pushDoubleFloat(static_cast<flt_128> (stack.popShort()));
	

}
void funcs::sucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type DoubleFloat.
 */
 
	stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	

}
void funcs::suadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	;
}
void funcs::ssub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	

}
void funcs::susub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	;
}
void funcs::smul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	

}
void funcs::sumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	;
}
void funcs::sdiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	

}
void funcs::sudiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	;
}
void funcs::scmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type DoubleFloat.
 */

	{
	int_16 b = stack.popShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type DoubleFloat.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::scast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to type DoubleDouble.
 */

	stack.pushDoubleDouble(static_cast<flt_256> (stack.popShort()));
	

}
void funcs::sucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to type DoubleDouble.
 */
 
	stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	

}
void funcs::suadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	;
}
void funcs::ssub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	

}
void funcs::susub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	;
}
void funcs::smul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	

}
void funcs::sumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	;
}
void funcs::sdiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	

}
void funcs::sudiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	;
}
void funcs::scmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with type DoubleDouble.
 */

	{
	int_16 b = stack.popShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with type DoubleDouble.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::smod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a % b);
	}
	

}
void funcs::scast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Byte.
 */

	stack.pushUnsignedByte(static_cast<uint_8> (stack.popShort()));
	

}
void funcs::sucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Byte.
 */
 
	stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a + b);
	}
	

}
void funcs::suadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a + b);
	}
	;
}
void funcs::ssub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a - b);
	}
	

}
void funcs::susub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a - b);
	}
	;
}
void funcs::smul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a * b);
	}
	

}
void funcs::sumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a * b);
	}
	;
}
void funcs::sdiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a / b);
	}
	

}
void funcs::sudiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a / b);
	}
	;
}
void funcs::scmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Byte.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_8 a = stack.popUnsignedShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::sswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); int_16 b = stack.popShort(); stack.pushByte(a); stack.pushShort(b); }
	

}
void funcs::smod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a % b);
	}
	

}
void funcs::scast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Short.
 */

	stack.pushUnsignedShort(static_cast<uint_16> (stack.popShort()));
	

}
void funcs::sucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Short.
 */
 
	stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a + b);
	}
	

}
void funcs::suadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a + b);
	}
	;
}
void funcs::ssub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a - b);
	}
	

}
void funcs::susub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a - b);
	}
	;
}
void funcs::smul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a * b);
	}
	

}
void funcs::sumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a * b);
	}
	;
}
void funcs::sdiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a / b);
	}
	

}
void funcs::sudiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushUnsignedShort(a / b);
	}
	;
}
void funcs::scmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Short.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_16 a = stack.popUnsignedShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::sswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); int_16 b = stack.popShort(); stack.pushShort(a); stack.pushShort(b); }
	

}
void funcs::smod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a % b);
	}
	

}
void funcs::scast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Int.
 */

	stack.pushUnsignedInt(static_cast<uint_32> (stack.popShort()));
	

}
void funcs::sucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Int.
 */
 
	stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	

}
void funcs::suadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	;
}
void funcs::ssub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	

}
void funcs::susub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	;
}
void funcs::smul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	

}
void funcs::sumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	;
}
void funcs::sdiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	

}
void funcs::sudiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	;
}
void funcs::scmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Int.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::sswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); int_16 b = stack.popShort(); stack.pushInt(a); stack.pushShort(b); }
	

}
void funcs::smod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::scast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type Long.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (stack.popShort()));
	

}
void funcs::sucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type Long.
 */
 
	stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::suadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::ssub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::susub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::smul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::sumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::sdiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::sudiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::scmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type Long.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::sswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); int_16 b = stack.popShort(); stack.pushLong(a); stack.pushShort(b); }
	

}
void funcs::smod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::scast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type LongInt.
 */

	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popShort()));
	

}
void funcs::sucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type LongInt.
 */
 
	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::suadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::ssub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::susub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::smul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::sumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::sdiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::sudiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::scmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type LongInt.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::sswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); int_16 b = stack.popShort(); stack.pushLongInt(a); stack.pushShort(b); }
	

}
void funcs::smod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::scast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_16 to unsigned type LongLong.
 */

	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popShort()));
	

}
void funcs::sucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_16 to unsigned type LongLong.
 */
 
	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedShort()));
	;
}
void funcs::sadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_16 with unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::suadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_16 with unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::ssub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_16 with unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::susub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_16 with unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::smul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_16 with unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::sumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_16 with unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::sdiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_16 with unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::sudiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_16 with unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::scmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::sucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::scmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::sucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::scmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 equal with unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::sucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 equal with unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::scmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 less than or equal to unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::sucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 less than or equal to unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::scmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 greater than or equal to unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::sucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 greater than or equal to unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::scmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_16 not equal with unsigned type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::sucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_16 not equal with unsigned type LongLong.
 */
 
	{
	uint_16 b = stack.popUnsignedShort();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::sswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); int_16 b = stack.popShort(); stack.pushLongLong(a); stack.pushShort(b); }
	

}
void funcs::sswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); int_16 b = stack.popShort(); stack.pushFloat(a); stack.pushShort(b); }
	

}
void funcs::sswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); int_16 b = stack.popShort(); stack.pushDouble(a); stack.pushShort(b); }
	

}
void funcs::sswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); int_16 b = stack.popShort(); stack.pushDoubleFloat(a); stack.pushShort(b); }
	

}
void funcs::sswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); int_16 b = stack.popShort(); stack.pushDoubleDouble(a); stack.pushShort(b); }
	

}
void funcs::sswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); int_16 b = stack.popShort(); stack.pushPointer(a); stack.pushShort(b); }
	

}
void funcs::sand_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a & b);
	}
	

}
void funcs::sor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a | b);
	}
	

}
void funcs::sxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a ^ b);
	}
	

}
void funcs::sshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a >> b);
	}
	

}
void funcs::sshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Byte.
 */

	{
	int_16 b = stack.popShort();
	int_8 a = stack.popByte();
	stack.pushShort(a << b);
	}
	

}
void funcs::sand_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a & b);
	}
	

}
void funcs::sor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a | b);
	}
	

}
void funcs::sxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a ^ b);
	}
	

}
void funcs::sshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a >> b);
	}
	

}
void funcs::sshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Short.
 */

	{
	int_16 b = stack.popShort();
	int_16 a = stack.popShort();
	stack.pushShort(a << b);
	}
	

}
void funcs::sand_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a & b);
	}
	

}
void funcs::sor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a | b);
	}
	

}
void funcs::sxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a ^ b);
	}
	

}
void funcs::sshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a >> b);
	}
	

}
void funcs::sshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Int.
 */

	{
	int_16 b = stack.popShort();
	int_32 a = stack.popInt();
	stack.pushInt(a << b);
	}
	

}
void funcs::sand_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a & b);
	}
	

}
void funcs::sor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a | b);
	}
	

}
void funcs::sxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::sshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a >> b);
	}
	

}
void funcs::sshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type Long.
 */

	{
	int_16 b = stack.popShort();
	int_64 a = stack.popLong();
	stack.pushLong(a << b);
	}
	

}
void funcs::sand_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::sor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::sxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::sshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::sshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type LongInt.
 */

	{
	int_16 b = stack.popShort();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::sand_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::sor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::sxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::sshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::sshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_16 with type LongLong.
 */

	{
	int_16 b = stack.popShort();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::sdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 on the stack.
 */

	stack.pushShort(stack.peekShort());
	

}
void funcs::sdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 2 times on the stack.
 */

	stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());
	

}
void funcs::sdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 3 times on the stack.
 */

	stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());
	

}
void funcs::sdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 4 times on the stack.
 */

	stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());
	

}
void funcs::sdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_16 5 times on the stack.
 */

	stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());stack.pushShort(stack.peekShort());
	

}
void funcs::sswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_16 elements.
 */

	{ int_16 a = stack.popShort(); int_16 b = stack.popShort(); stack.pushShort(a); stack.pushShort(b); }
	

}
void funcs::srot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_16 elements.
 */

	{ int_16 a = stack.popShort(); int_16 b = stack.popShort(); int_16 c = stack.popShort(); stack.pushShort(a); stack.pushShort(b); stack.pushShort(c); }
	

}
void funcs::sset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from stack into a field on base pointer.
 */

	accessMemoryAndSetShort(base, ops.getUnsignedInt(), stack.popShort());
	

}
void funcs::sget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_16 from a field on base pointer to stack.
 */

	stack.pushShort(accessMemoryAndGetShort(base, ops.getUnsignedInt()));
	

}
void funcs::svset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from value into a field on base pointer.
 */

	accessMemoryAndSetShort(base, ops.getUnsignedInt(), ops.getShort());
	

}
void funcs::ssget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_16 from a field on base pointer to stack using address from stack.
 */

	stack.pushShort(accessMemoryAndGetShort(base, stack.popUnsignedInt()));
	

}
void funcs::ssset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetShort(base, stack.popUnsignedInt(), stack.popShort());
	

}
void funcs::ssetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_16 from local variable into a field on base pointer.
 */

	accessMemoryAndSetShort(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Short);
	

}
void funcs::sinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Short = lvt[point].Short + 1; }
	

}
void funcs::sinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Short = lvt[point].Short + 2; }
	

}
void funcs::sstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 1 on stack.
 */

	stack.pushShort(stack.popShort() + 1);
	

}
void funcs::sstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_16 by 2 on stack.
 */

	stack.pushShort(stack.popShort() + 2);
	

}
void funcs::sreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_16 into the main stack.
 */

	stack_main.pushShort(stack.popShort()); return;
	

}
void funcs::smainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Short = stack_main.popShort();
	

}
void funcs::smainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 0.
 */

	lvt[0].Short = stack_main.popShort();;
	

}
void funcs::smainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 1.
 */

	lvt[1].Short = stack_main.popShort();;
	

}
void funcs::smainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 2.
 */

	lvt[2].Short = stack_main.popShort();;
	

}
void funcs::smainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_16 from main stack in local variable 3.
 */

	lvt[3].Short = stack_main.popShort();;
	

}
void funcs::sprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_16 from stack.
 */

	log(std::to_string(stack.popShort()));
	

}
void funcs::suprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_16 from stack.
 */
 
	log(std::to_string(stack.popUnsignedShort()));
	;
}
void funcs::iconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack.
 */

	stack.pushInt(ops.getInt());
	

}
void funcs::iconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 0).
 */

	stack.pushInt(0);
	

}
void funcs::iconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 1).
 */

	stack.pushInt(1);
	

}
void funcs::iconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 2).
 */

	stack.pushInt(2);
	

}
void funcs::iconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 3).
 */

	stack.pushInt(3);
	

}
void funcs::iconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 4).
 */

	stack.pushInt(4);
	

}
void funcs::iconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 5).
 */

	stack.pushInt(5);
	

}
void funcs::iconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 6).
 */

	stack.pushInt(6);
	

}
void funcs::iconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 9).
 */

	stack.pushInt(9);
	

}
void funcs::iconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 10).
 */

	stack.pushInt(10);
	

}
void funcs::iconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 11).
 */

	stack.pushInt(11);
	

}
void funcs::iconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_32 into the stack (value = 12).
 */

	stack.pushInt(12);
	

}
void funcs::iload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable.
 */

	stack.pushInt(lvt[ops.getUnsignedShort()].Int);
	

}
void funcs::iload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 0.
 */

	stack.pushInt(lvt[0].Int);
	

}
void funcs::iload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 1.
 */

	stack.pushInt(lvt[1].Int);
	

}
void funcs::iload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 2.
 */

	stack.pushInt(lvt[2].Int);
	

}
void funcs::iload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 3.
 */

	stack.pushInt(lvt[3].Int);
	

}
void funcs::iload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_32 into the stack from local variable 4.
 */

	stack.pushInt(lvt[4].Int);
	

}
void funcs::istore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Int(stack.popInt());
	

}
void funcs::istore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 0.
 */

	lvt[0] = lve_Int(stack.popInt());
	

}
void funcs::istore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 1.
 */

	lvt[1] = lve_Int(stack.popInt());
	

}
void funcs::istore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 2.
 */

	lvt[2] = lve_Int(stack.popInt());
	

}
void funcs::istore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 3.
 */

	lvt[3] = lve_Int(stack.popInt());
	

}
void funcs::istore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from stack into local variable 4.
 */

	lvt[4] = lve_Int(stack.popInt());
	

}
void funcs::icast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Byte.
 */

	stack.pushByte(static_cast<int_8> (stack.popInt()));
	

}
void funcs::iucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Byte.
 */
 
	stack.pushByte(static_cast<int_8> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a + b);
	}
	

}
void funcs::iuadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushInt(a + b);
	}
	;
}
void funcs::isub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a - b);
	}
	

}
void funcs::iusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushInt(a - b);
	}
	;
}
void funcs::imul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a * b);
	}
	

}
void funcs::iumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushInt(a * b);
	}
	;
}
void funcs::idiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a / b);
	}
	

}
void funcs::iudiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushInt(a / b);
	}
	;
}
void funcs::icmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Short.
 */

	stack.pushShort(static_cast<int_16> (stack.popInt()));
	

}
void funcs::iucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Short.
 */
 
	stack.pushShort(static_cast<int_16> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a + b);
	}
	

}
void funcs::iuadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushInt(a + b);
	}
	;
}
void funcs::isub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a - b);
	}
	

}
void funcs::iusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushInt(a - b);
	}
	;
}
void funcs::imul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a * b);
	}
	

}
void funcs::iumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushInt(a * b);
	}
	;
}
void funcs::idiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a / b);
	}
	

}
void funcs::iudiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushInt(a / b);
	}
	;
}
void funcs::icmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Int.
 */

	stack.pushInt(static_cast<int_32> (stack.popInt()));
	

}
void funcs::iucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Int.
 */
 
	stack.pushInt(static_cast<int_32> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a + b);
	}
	

}
void funcs::iuadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushInt(a + b);
	}
	;
}
void funcs::isub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a - b);
	}
	

}
void funcs::iusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushInt(a - b);
	}
	;
}
void funcs::imul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a * b);
	}
	

}
void funcs::iumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushInt(a * b);
	}
	;
}
void funcs::idiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a / b);
	}
	

}
void funcs::iudiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushInt(a / b);
	}
	;
}
void funcs::icmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Long.
 */

	stack.pushLong(static_cast<int_64> (stack.popInt()));
	

}
void funcs::iucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Long.
 */
 
	stack.pushLong(static_cast<int_64> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	

}
void funcs::iuadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	;
}
void funcs::isub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	

}
void funcs::iusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	;
}
void funcs::imul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	

}
void funcs::iumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	;
}
void funcs::idiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	

}
void funcs::iudiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	;
}
void funcs::icmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type LongInt.
 */

	stack.pushLongInt(static_cast<int_128> (stack.popInt()));
	

}
void funcs::iucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type LongInt.
 */
 
	stack.pushLongInt(static_cast<int_128> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::iuadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::isub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::iusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::imul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::iumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::idiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::iudiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::icmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type LongLong.
 */

	stack.pushLongLong(static_cast<int_256> (stack.popInt()));
	

}
void funcs::iucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type LongLong.
 */
 
	stack.pushLongLong(static_cast<int_256> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::iuadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::isub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::iusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::imul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::iumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::idiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::iudiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::icmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Float.
 */

	stack.pushFloat(static_cast<flt_32> (stack.popInt()));
	

}
void funcs::iucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Float.
 */
 
	stack.pushFloat(static_cast<flt_32> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a + b);
	}
	

}
void funcs::iuadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a + b);
	}
	;
}
void funcs::isub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a - b);
	}
	

}
void funcs::iusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a - b);
	}
	;
}
void funcs::imul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a * b);
	}
	

}
void funcs::iumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a * b);
	}
	;
}
void funcs::idiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a / b);
	}
	

}
void funcs::iudiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushInt(a / b);
	}
	;
}
void funcs::icmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Float.
 */

	{
	int_32 b = stack.popInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Float.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type Double.
 */

	stack.pushDouble(static_cast<flt_64> (stack.popInt()));
	

}
void funcs::iucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type Double.
 */
 
	stack.pushDouble(static_cast<flt_64> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a + b);
	}
	

}
void funcs::iuadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a + b);
	}
	;
}
void funcs::isub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a - b);
	}
	

}
void funcs::iusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a - b);
	}
	;
}
void funcs::imul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a * b);
	}
	

}
void funcs::iumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a * b);
	}
	;
}
void funcs::idiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a / b);
	}
	

}
void funcs::iudiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushDouble(a / b);
	}
	;
}
void funcs::icmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type Double.
 */

	{
	int_32 b = stack.popInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type Double.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type DoubleFloat.
 */

	stack.pushDoubleFloat(static_cast<flt_128> (stack.popInt()));
	

}
void funcs::iucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type DoubleFloat.
 */
 
	stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	

}
void funcs::iuadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	;
}
void funcs::isub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	

}
void funcs::iusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	;
}
void funcs::imul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	

}
void funcs::iumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	;
}
void funcs::idiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	

}
void funcs::iudiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	;
}
void funcs::icmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type DoubleFloat.
 */

	{
	int_32 b = stack.popInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type DoubleFloat.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::icast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to type DoubleDouble.
 */

	stack.pushDoubleDouble(static_cast<flt_256> (stack.popInt()));
	

}
void funcs::iucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to type DoubleDouble.
 */
 
	stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	

}
void funcs::iuadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	;
}
void funcs::isub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	

}
void funcs::iusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	;
}
void funcs::imul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	

}
void funcs::iumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	;
}
void funcs::idiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	

}
void funcs::iudiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	;
}
void funcs::icmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with type DoubleDouble.
 */

	{
	int_32 b = stack.popInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with type DoubleDouble.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::imod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a % b);
	}
	

}
void funcs::icast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Byte.
 */

	stack.pushUnsignedByte(static_cast<uint_8> (stack.popInt()));
	

}
void funcs::iucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Byte.
 */
 
	stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	

}
void funcs::iuadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	;
}
void funcs::isub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	

}
void funcs::iusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	;
}
void funcs::imul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	

}
void funcs::iumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	;
}
void funcs::idiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	

}
void funcs::iudiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	;
}
void funcs::icmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Byte.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_8 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::iswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); int_32 b = stack.popInt(); stack.pushByte(a); stack.pushInt(b); }
	

}
void funcs::imod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a % b);
	}
	

}
void funcs::icast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Short.
 */

	stack.pushUnsignedShort(static_cast<uint_16> (stack.popInt()));
	

}
void funcs::iucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Short.
 */
 
	stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	

}
void funcs::iuadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	;
}
void funcs::isub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	

}
void funcs::iusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	;
}
void funcs::imul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	

}
void funcs::iumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	;
}
void funcs::idiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	

}
void funcs::iudiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	;
}
void funcs::icmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Short.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_16 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::iswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); int_32 b = stack.popInt(); stack.pushShort(a); stack.pushInt(b); }
	

}
void funcs::imod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a % b);
	}
	

}
void funcs::icast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Int.
 */

	stack.pushUnsignedInt(static_cast<uint_32> (stack.popInt()));
	

}
void funcs::iucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Int.
 */
 
	stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	

}
void funcs::iuadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a + b);
	}
	;
}
void funcs::isub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	

}
void funcs::iusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a - b);
	}
	;
}
void funcs::imul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	

}
void funcs::iumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a * b);
	}
	;
}
void funcs::idiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	

}
void funcs::iudiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushUnsignedInt(a / b);
	}
	;
}
void funcs::icmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Int.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_32 a = stack.popUnsignedInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::iswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); int_32 b = stack.popInt(); stack.pushInt(a); stack.pushInt(b); }
	

}
void funcs::imod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::icast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type Long.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (stack.popInt()));
	

}
void funcs::iucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type Long.
 */
 
	stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::iuadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::isub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::iusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::imul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::iumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::idiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::iudiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::icmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type Long.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::iswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); int_32 b = stack.popInt(); stack.pushLong(a); stack.pushInt(b); }
	

}
void funcs::imod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::icast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type LongInt.
 */

	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popInt()));
	

}
void funcs::iucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type LongInt.
 */
 
	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::iuadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::isub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::iusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::imul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::iumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::idiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::iudiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::icmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type LongInt.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::iswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); int_32 b = stack.popInt(); stack.pushLongInt(a); stack.pushInt(b); }
	

}
void funcs::imod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::icast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_32 to unsigned type LongLong.
 */

	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popInt()));
	

}
void funcs::iucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_32 to unsigned type LongLong.
 */
 
	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedInt()));
	;
}
void funcs::iadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_32 with unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::iuadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_32 with unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::isub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_32 with unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::iusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_32 with unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::imul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_32 with unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::iumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_32 with unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::idiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_32 with unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::iudiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_32 with unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::icmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::iucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::icmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::iucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::icmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 equal with unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::iucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 equal with unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::icmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 less than or equal to unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::iucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 less than or equal to unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::icmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 greater than or equal to unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::iucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 greater than or equal to unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::icmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_32 not equal with unsigned type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::iucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_32 not equal with unsigned type LongLong.
 */
 
	{
	uint_32 b = stack.popUnsignedInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::iswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); int_32 b = stack.popInt(); stack.pushLongLong(a); stack.pushInt(b); }
	

}
void funcs::iswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); int_32 b = stack.popInt(); stack.pushFloat(a); stack.pushInt(b); }
	

}
void funcs::iswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); int_32 b = stack.popInt(); stack.pushDouble(a); stack.pushInt(b); }
	

}
void funcs::iswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); int_32 b = stack.popInt(); stack.pushDoubleFloat(a); stack.pushInt(b); }
	

}
void funcs::iswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); int_32 b = stack.popInt(); stack.pushDoubleDouble(a); stack.pushInt(b); }
	

}
void funcs::iswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); int_32 b = stack.popInt(); stack.pushPointer(a); stack.pushInt(b); }
	

}
void funcs::iand_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a & b);
	}
	

}
void funcs::ior_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a | b);
	}
	

}
void funcs::ixor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a ^ b);
	}
	

}
void funcs::ishftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a >> b);
	}
	

}
void funcs::ishftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Byte.
 */

	{
	int_32 b = stack.popInt();
	int_8 a = stack.popByte();
	stack.pushInt(a << b);
	}
	

}
void funcs::iand_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a & b);
	}
	

}
void funcs::ior_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a | b);
	}
	

}
void funcs::ixor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a ^ b);
	}
	

}
void funcs::ishftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a >> b);
	}
	

}
void funcs::ishftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Short.
 */

	{
	int_32 b = stack.popInt();
	int_16 a = stack.popShort();
	stack.pushInt(a << b);
	}
	

}
void funcs::iand_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a & b);
	}
	

}
void funcs::ior_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a | b);
	}
	

}
void funcs::ixor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a ^ b);
	}
	

}
void funcs::ishftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a >> b);
	}
	

}
void funcs::ishftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Int.
 */

	{
	int_32 b = stack.popInt();
	int_32 a = stack.popInt();
	stack.pushInt(a << b);
	}
	

}
void funcs::iand_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a & b);
	}
	

}
void funcs::ior_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a | b);
	}
	

}
void funcs::ixor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::ishftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a >> b);
	}
	

}
void funcs::ishftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type Long.
 */

	{
	int_32 b = stack.popInt();
	int_64 a = stack.popLong();
	stack.pushLong(a << b);
	}
	

}
void funcs::iand_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::ior_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::ixor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::ishftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::ishftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type LongInt.
 */

	{
	int_32 b = stack.popInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::iand_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::ior_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::ixor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::ishftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::ishftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_32 with type LongLong.
 */

	{
	int_32 b = stack.popInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::idup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 on the stack.
 */

	stack.pushInt(stack.peekInt());
	

}
void funcs::idup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 2 times on the stack.
 */

	stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());
	

}
void funcs::idup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 3 times on the stack.
 */

	stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());
	

}
void funcs::idup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 4 times on the stack.
 */

	stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());
	

}
void funcs::idup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_32 5 times on the stack.
 */

	stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());stack.pushInt(stack.peekInt());
	

}
void funcs::iswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_32 elements.
 */

	{ int_32 a = stack.popInt(); int_32 b = stack.popInt(); stack.pushInt(a); stack.pushInt(b); }
	

}
void funcs::irot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_32 elements.
 */

	{ int_32 a = stack.popInt(); int_32 b = stack.popInt(); int_32 c = stack.popInt(); stack.pushInt(a); stack.pushInt(b); stack.pushInt(c); }
	

}
void funcs::iset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from stack into a field on base pointer.
 */

	accessMemoryAndSetInt(base, ops.getUnsignedInt(), stack.popInt());
	

}
void funcs::iget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_32 from a field on base pointer to stack.
 */

	stack.pushInt(accessMemoryAndGetInt(base, ops.getUnsignedInt()));
	

}
void funcs::ivset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from value into a field on base pointer.
 */

	accessMemoryAndSetInt(base, ops.getUnsignedInt(), ops.getInt());
	

}
void funcs::isget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_32 from a field on base pointer to stack using address from stack.
 */

	stack.pushInt(accessMemoryAndGetInt(base, stack.popUnsignedInt()));
	

}
void funcs::isset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetInt(base, stack.popUnsignedInt(), stack.popInt());
	

}
void funcs::isetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_32 from local variable into a field on base pointer.
 */

	accessMemoryAndSetInt(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Int);
	

}
void funcs::iinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Int = lvt[point].Int + 1; }
	

}
void funcs::iinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Int = lvt[point].Int + 2; }
	

}
void funcs::istinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 1 on stack.
 */

	stack.pushInt(stack.popInt() + 1);
	

}
void funcs::istinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_32 by 2 on stack.
 */

	stack.pushInt(stack.popInt() + 2);
	

}
void funcs::ireturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_32 into the main stack.
 */

	stack_main.pushInt(stack.popInt()); return;
	

}
void funcs::imainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Int = stack_main.popInt();
	

}
void funcs::imainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 0.
 */

	lvt[0].Int = stack_main.popInt();;
	

}
void funcs::imainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 1.
 */

	lvt[1].Int = stack_main.popInt();;
	

}
void funcs::imainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 2.
 */

	lvt[2].Int = stack_main.popInt();;
	

}
void funcs::imainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_32 from main stack in local variable 3.
 */

	lvt[3].Int = stack_main.popInt();;
	

}
void funcs::iprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_32 from stack.
 */

	log(std::to_string(stack.popInt()));
	

}
void funcs::iuprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_32 from stack.
 */
 
	log(std::to_string(stack.popUnsignedInt()));
	;
}
void funcs::lconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack.
 */

	stack.pushLong(ops.getLong());
	

}
void funcs::lconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 0).
 */

	stack.pushLong(0);
	

}
void funcs::lconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 1).
 */

	stack.pushLong(1);
	

}
void funcs::lconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 2).
 */

	stack.pushLong(2);
	

}
void funcs::lconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 3).
 */

	stack.pushLong(3);
	

}
void funcs::lconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 4).
 */

	stack.pushLong(4);
	

}
void funcs::lconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 5).
 */

	stack.pushLong(5);
	

}
void funcs::lconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 6).
 */

	stack.pushLong(6);
	

}
void funcs::lconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 9).
 */

	stack.pushLong(9);
	

}
void funcs::lconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 10).
 */

	stack.pushLong(10);
	

}
void funcs::lconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 11).
 */

	stack.pushLong(11);
	

}
void funcs::lconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_64 into the stack (value = 12).
 */

	stack.pushLong(12);
	

}
void funcs::lload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable.
 */

	stack.pushLong(lvt[ops.getUnsignedShort()].Long);
	

}
void funcs::lload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 0.
 */

	stack.pushLong(lvt[0].Long);
	

}
void funcs::lload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 1.
 */

	stack.pushLong(lvt[1].Long);
	

}
void funcs::lload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 2.
 */

	stack.pushLong(lvt[2].Long);
	

}
void funcs::lload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 3.
 */

	stack.pushLong(lvt[3].Long);
	

}
void funcs::lload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_64 into the stack from local variable 4.
 */

	stack.pushLong(lvt[4].Long);
	

}
void funcs::lstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Long(stack.popLong());
	

}
void funcs::lstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 0.
 */

	lvt[0] = lve_Long(stack.popLong());
	

}
void funcs::lstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 1.
 */

	lvt[1] = lve_Long(stack.popLong());
	

}
void funcs::lstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 2.
 */

	lvt[2] = lve_Long(stack.popLong());
	

}
void funcs::lstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 3.
 */

	lvt[3] = lve_Long(stack.popLong());
	

}
void funcs::lstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from stack into local variable 4.
 */

	lvt[4] = lve_Long(stack.popLong());
	

}
void funcs::lcast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Byte.
 */

	stack.pushByte(static_cast<int_8> (stack.popLong()));
	

}
void funcs::lucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Byte.
 */
 
	stack.pushByte(static_cast<int_8> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a + b);
	}
	

}
void funcs::luadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushLong(a + b);
	}
	;
}
void funcs::lsub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a - b);
	}
	

}
void funcs::lusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushLong(a - b);
	}
	;
}
void funcs::lmul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a * b);
	}
	

}
void funcs::lumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushLong(a * b);
	}
	;
}
void funcs::ldiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a / b);
	}
	

}
void funcs::ludiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushLong(a / b);
	}
	;
}
void funcs::lcmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Short.
 */

	stack.pushShort(static_cast<int_16> (stack.popLong()));
	

}
void funcs::lucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Short.
 */
 
	stack.pushShort(static_cast<int_16> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a + b);
	}
	

}
void funcs::luadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushLong(a + b);
	}
	;
}
void funcs::lsub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a - b);
	}
	

}
void funcs::lusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushLong(a - b);
	}
	;
}
void funcs::lmul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a * b);
	}
	

}
void funcs::lumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushLong(a * b);
	}
	;
}
void funcs::ldiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a / b);
	}
	

}
void funcs::ludiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushLong(a / b);
	}
	;
}
void funcs::lcmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Int.
 */

	stack.pushInt(static_cast<int_32> (stack.popLong()));
	

}
void funcs::lucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Int.
 */
 
	stack.pushInt(static_cast<int_32> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a + b);
	}
	

}
void funcs::luadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushLong(a + b);
	}
	;
}
void funcs::lsub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a - b);
	}
	

}
void funcs::lusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushLong(a - b);
	}
	;
}
void funcs::lmul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a * b);
	}
	

}
void funcs::lumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushLong(a * b);
	}
	;
}
void funcs::ldiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a / b);
	}
	

}
void funcs::ludiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushLong(a / b);
	}
	;
}
void funcs::lcmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Long.
 */

	stack.pushLong(static_cast<int_64> (stack.popLong()));
	

}
void funcs::lucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Long.
 */
 
	stack.pushLong(static_cast<int_64> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	

}
void funcs::luadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushLong(a + b);
	}
	;
}
void funcs::lsub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	

}
void funcs::lusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushLong(a - b);
	}
	;
}
void funcs::lmul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	

}
void funcs::lumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushLong(a * b);
	}
	;
}
void funcs::ldiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	

}
void funcs::ludiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushLong(a / b);
	}
	;
}
void funcs::lcmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type LongInt.
 */

	stack.pushLongInt(static_cast<int_128> (stack.popLong()));
	

}
void funcs::lucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type LongInt.
 */
 
	stack.pushLongInt(static_cast<int_128> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::luadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lsub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::lusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::lmul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::lumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::ldiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::ludiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::lcmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type LongLong.
 */

	stack.pushLongLong(static_cast<int_256> (stack.popLong()));
	

}
void funcs::lucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type LongLong.
 */
 
	stack.pushLongLong(static_cast<int_256> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::luadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::lsub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::lusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::lmul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::lumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::ldiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::ludiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::lcmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Float.
 */

	stack.pushFloat(static_cast<flt_32> (stack.popLong()));
	

}
void funcs::lucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Float.
 */
 
	stack.pushFloat(static_cast<flt_32> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a + b);
	}
	

}
void funcs::luadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a + b);
	}
	;
}
void funcs::lsub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a - b);
	}
	

}
void funcs::lusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a - b);
	}
	;
}
void funcs::lmul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a * b);
	}
	

}
void funcs::lumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a * b);
	}
	;
}
void funcs::ldiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a / b);
	}
	

}
void funcs::ludiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushLong(a / b);
	}
	;
}
void funcs::lcmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Float.
 */

	{
	int_64 b = stack.popLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Float.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type Double.
 */

	stack.pushDouble(static_cast<flt_64> (stack.popLong()));
	

}
void funcs::lucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type Double.
 */
 
	stack.pushDouble(static_cast<flt_64> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a + b);
	}
	

}
void funcs::luadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a + b);
	}
	;
}
void funcs::lsub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a - b);
	}
	

}
void funcs::lusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a - b);
	}
	;
}
void funcs::lmul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a * b);
	}
	

}
void funcs::lumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a * b);
	}
	;
}
void funcs::ldiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a / b);
	}
	

}
void funcs::ludiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushLong(a / b);
	}
	;
}
void funcs::lcmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type Double.
 */

	{
	int_64 b = stack.popLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type Double.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type DoubleFloat.
 */

	stack.pushDoubleFloat(static_cast<flt_128> (stack.popLong()));
	

}
void funcs::lucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type DoubleFloat.
 */
 
	stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	

}
void funcs::luadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a + b);
	}
	;
}
void funcs::lsub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	

}
void funcs::lusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a - b);
	}
	;
}
void funcs::lmul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	

}
void funcs::lumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a * b);
	}
	;
}
void funcs::ldiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	

}
void funcs::ludiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushDoubleFloat(a / b);
	}
	;
}
void funcs::lcmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type DoubleFloat.
 */

	{
	int_64 b = stack.popLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type DoubleFloat.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lcast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to type DoubleDouble.
 */

	stack.pushDoubleDouble(static_cast<flt_256> (stack.popLong()));
	

}
void funcs::lucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to type DoubleDouble.
 */
 
	stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	

}
void funcs::luadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	;
}
void funcs::lsub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	

}
void funcs::lusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	;
}
void funcs::lmul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	

}
void funcs::lumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	;
}
void funcs::ldiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	

}
void funcs::ludiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	;
}
void funcs::lcmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with type DoubleDouble.
 */

	{
	int_64 b = stack.popLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with type DoubleDouble.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lmod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::lcast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Byte.
 */

	stack.pushUnsignedByte(static_cast<uint_8> (stack.popLong()));
	

}
void funcs::lucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Byte.
 */
 
	stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::luadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::lsub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::lusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::lmul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::lumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::ldiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::ludiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::lcmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Byte.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_8 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); int_64 b = stack.popLong(); stack.pushByte(a); stack.pushLong(b); }
	

}
void funcs::lmod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::lcast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Short.
 */

	stack.pushUnsignedShort(static_cast<uint_16> (stack.popLong()));
	

}
void funcs::lucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Short.
 */
 
	stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::luadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::lsub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::lusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::lmul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::lumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::ldiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::ludiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::lcmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Short.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_16 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); int_64 b = stack.popLong(); stack.pushShort(a); stack.pushLong(b); }
	

}
void funcs::lmod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::lcast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Int.
 */

	stack.pushUnsignedInt(static_cast<uint_32> (stack.popLong()));
	

}
void funcs::lucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Int.
 */
 
	stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::luadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::lsub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::lusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::lmul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::lumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::ldiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::ludiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::lcmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Int.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_32 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); int_64 b = stack.popLong(); stack.pushInt(a); stack.pushLong(b); }
	

}
void funcs::lmod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a % b);
	}
	

}
void funcs::lcast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type Long.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (stack.popLong()));
	

}
void funcs::lucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type Long.
 */
 
	stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	

}
void funcs::luadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a + b);
	}
	;
}
void funcs::lsub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	

}
void funcs::lusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a - b);
	}
	;
}
void funcs::lmul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	

}
void funcs::lumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a * b);
	}
	;
}
void funcs::ldiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	

}
void funcs::ludiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushUnsignedLong(a / b);
	}
	;
}
void funcs::lcmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type Long.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_64 a = stack.popUnsignedLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); int_64 b = stack.popLong(); stack.pushLong(a); stack.pushLong(b); }
	

}
void funcs::lmod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::lcast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type LongInt.
 */

	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popLong()));
	

}
void funcs::lucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type LongInt.
 */
 
	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::luadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::lsub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::lusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::lmul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::lumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::ldiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::ludiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::lcmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type LongInt.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); int_64 b = stack.popLong(); stack.pushLongInt(a); stack.pushLong(b); }
	

}
void funcs::lmod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::lcast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_64 to unsigned type LongLong.
 */

	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popLong()));
	

}
void funcs::lucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_64 to unsigned type LongLong.
 */
 
	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedLong()));
	;
}
void funcs::ladd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_64 with unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::luadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_64 with unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::lsub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_64 with unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::lusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_64 with unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::lmul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_64 with unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::lumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_64 with unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::ldiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_64 with unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::ludiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_64 with unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::lcmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::lucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::lcmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::lucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::lcmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 equal with unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::lucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 equal with unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::lcmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 less than or equal to unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::lucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 less than or equal to unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 greater than or equal to unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::lucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 greater than or equal to unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::lcmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_64 not equal with unsigned type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::lucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_64 not equal with unsigned type LongLong.
 */
 
	{
	uint_64 b = stack.popUnsignedLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::lswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); int_64 b = stack.popLong(); stack.pushLongLong(a); stack.pushLong(b); }
	

}
void funcs::lswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); int_64 b = stack.popLong(); stack.pushFloat(a); stack.pushLong(b); }
	

}
void funcs::lswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); int_64 b = stack.popLong(); stack.pushDouble(a); stack.pushLong(b); }
	

}
void funcs::lswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); int_64 b = stack.popLong(); stack.pushDoubleFloat(a); stack.pushLong(b); }
	

}
void funcs::lswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); int_64 b = stack.popLong(); stack.pushDoubleDouble(a); stack.pushLong(b); }
	

}
void funcs::lswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); int_64 b = stack.popLong(); stack.pushPointer(a); stack.pushLong(b); }
	

}
void funcs::land_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a & b);
	}
	

}
void funcs::lor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a | b);
	}
	

}
void funcs::lxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::lshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a >> b);
	}
	

}
void funcs::lshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Byte.
 */

	{
	int_64 b = stack.popLong();
	int_8 a = stack.popByte();
	stack.pushLong(a << b);
	}
	

}
void funcs::land_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a & b);
	}
	

}
void funcs::lor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a | b);
	}
	

}
void funcs::lxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::lshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a >> b);
	}
	

}
void funcs::lshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Short.
 */

	{
	int_64 b = stack.popLong();
	int_16 a = stack.popShort();
	stack.pushLong(a << b);
	}
	

}
void funcs::land_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a & b);
	}
	

}
void funcs::lor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a | b);
	}
	

}
void funcs::lxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::lshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a >> b);
	}
	

}
void funcs::lshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Int.
 */

	{
	int_64 b = stack.popLong();
	int_32 a = stack.popInt();
	stack.pushLong(a << b);
	}
	

}
void funcs::land_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a & b);
	}
	

}
void funcs::lor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a | b);
	}
	

}
void funcs::lxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a ^ b);
	}
	

}
void funcs::lshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a >> b);
	}
	

}
void funcs::lshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type Long.
 */

	{
	int_64 b = stack.popLong();
	int_64 a = stack.popLong();
	stack.pushLong(a << b);
	}
	

}
void funcs::land_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::lor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::lxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::lshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::lshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type LongInt.
 */

	{
	int_64 b = stack.popLong();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::land_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::lor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::lxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::lshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::lshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_64 with type LongLong.
 */

	{
	int_64 b = stack.popLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::ldup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 on the stack.
 */

	stack.pushLong(stack.peekLong());
	

}
void funcs::ldup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 2 times on the stack.
 */

	stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());
	

}
void funcs::ldup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 3 times on the stack.
 */

	stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());
	

}
void funcs::ldup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 4 times on the stack.
 */

	stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());
	

}
void funcs::ldup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_64 5 times on the stack.
 */

	stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());stack.pushLong(stack.peekLong());
	

}
void funcs::lswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_64 elements.
 */

	{ int_64 a = stack.popLong(); int_64 b = stack.popLong(); stack.pushLong(a); stack.pushLong(b); }
	

}
void funcs::lrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_64 elements.
 */

	{ int_64 a = stack.popLong(); int_64 b = stack.popLong(); int_64 c = stack.popLong(); stack.pushLong(a); stack.pushLong(b); stack.pushLong(c); }
	

}
void funcs::lset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from stack into a field on base pointer.
 */

	accessMemoryAndSetLong(base, ops.getUnsignedInt(), stack.popLong());
	

}
void funcs::lget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_64 from a field on base pointer to stack.
 */

	stack.pushLong(accessMemoryAndGetLong(base, ops.getUnsignedInt()));
	

}
void funcs::lvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from value into a field on base pointer.
 */

	accessMemoryAndSetLong(base, ops.getUnsignedInt(), ops.getLong());
	

}
void funcs::lsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_64 from a field on base pointer to stack using address from stack.
 */

	stack.pushLong(accessMemoryAndGetLong(base, stack.popUnsignedInt()));
	

}
void funcs::lsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetLong(base, stack.popUnsignedInt(), stack.popLong());
	

}
void funcs::lsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_64 from local variable into a field on base pointer.
 */

	accessMemoryAndSetLong(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Long);
	

}
void funcs::linc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Long = lvt[point].Long + 1; }
	

}
void funcs::linc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Long = lvt[point].Long + 2; }
	

}
void funcs::lstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 1 on stack.
 */

	stack.pushLong(stack.popLong() + 1);
	

}
void funcs::lstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_64 by 2 on stack.
 */

	stack.pushLong(stack.popLong() + 2);
	

}
void funcs::lreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_64 into the main stack.
 */

	stack_main.pushLong(stack.popLong()); return;
	

}
void funcs::lmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Long = stack_main.popLong();
	

}
void funcs::lmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 0.
 */

	lvt[0].Long = stack_main.popLong();;
	

}
void funcs::lmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 1.
 */

	lvt[1].Long = stack_main.popLong();;
	

}
void funcs::lmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 2.
 */

	lvt[2].Long = stack_main.popLong();;
	

}
void funcs::lmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_64 from main stack in local variable 3.
 */

	lvt[3].Long = stack_main.popLong();;
	

}
void funcs::lprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_64 from stack.
 */

	log(std::to_string(stack.popLong()));
	

}
void funcs::luprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_64 from stack.
 */
 
	log(std::to_string(stack.popUnsignedLong()));
	;
}
void funcs::liconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack.
 */

	stack.pushLongInt(ops.getLongInt());
	

}
void funcs::liconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 0).
 */

	stack.pushLongInt(0);
	

}
void funcs::liconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 1).
 */

	stack.pushLongInt(1);
	

}
void funcs::liconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 2).
 */

	stack.pushLongInt(2);
	

}
void funcs::liconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 3).
 */

	stack.pushLongInt(3);
	

}
void funcs::liconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 4).
 */

	stack.pushLongInt(4);
	

}
void funcs::liconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 5).
 */

	stack.pushLongInt(5);
	

}
void funcs::liconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 6).
 */

	stack.pushLongInt(6);
	

}
void funcs::liconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 9).
 */

	stack.pushLongInt(9);
	

}
void funcs::liconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 10).
 */

	stack.pushLongInt(10);
	

}
void funcs::liconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 11).
 */

	stack.pushLongInt(11);
	

}
void funcs::liconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_128 into the stack (value = 12).
 */

	stack.pushLongInt(12);
	

}
void funcs::liload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable.
 */

	stack.pushLongInt(lvt[ops.getUnsignedShort()].LongInt);
	

}
void funcs::liload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 0.
 */

	stack.pushLongInt(lvt[0].LongInt);
	

}
void funcs::liload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 1.
 */

	stack.pushLongInt(lvt[1].LongInt);
	

}
void funcs::liload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 2.
 */

	stack.pushLongInt(lvt[2].LongInt);
	

}
void funcs::liload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 3.
 */

	stack.pushLongInt(lvt[3].LongInt);
	

}
void funcs::liload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_128 into the stack from local variable 4.
 */

	stack.pushLongInt(lvt[4].LongInt);
	

}
void funcs::listore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_LongInt(stack.popLongInt());
	

}
void funcs::listore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 0.
 */

	lvt[0] = lve_LongInt(stack.popLongInt());
	

}
void funcs::listore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 1.
 */

	lvt[1] = lve_LongInt(stack.popLongInt());
	

}
void funcs::listore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 2.
 */

	lvt[2] = lve_LongInt(stack.popLongInt());
	

}
void funcs::listore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 3.
 */

	lvt[3] = lve_LongInt(stack.popLongInt());
	

}
void funcs::listore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from stack into local variable 4.
 */

	lvt[4] = lve_LongInt(stack.popLongInt());
	

}
void funcs::licast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Byte.
 */

	stack.pushByte(static_cast<int_8> (stack.popLongInt()));
	

}
void funcs::liucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Byte.
 */
 
	stack.pushByte(static_cast<int_8> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Short.
 */

	stack.pushShort(static_cast<int_16> (stack.popLongInt()));
	

}
void funcs::liucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Short.
 */
 
	stack.pushShort(static_cast<int_16> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Int.
 */

	stack.pushInt(static_cast<int_32> (stack.popLongInt()));
	

}
void funcs::liucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Int.
 */
 
	stack.pushInt(static_cast<int_32> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Long.
 */

	stack.pushLong(static_cast<int_64> (stack.popLongInt()));
	

}
void funcs::liucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Long.
 */
 
	stack.pushLong(static_cast<int_64> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type LongInt.
 */

	stack.pushLongInt(static_cast<int_128> (stack.popLongInt()));
	

}
void funcs::liucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type LongInt.
 */
 
	stack.pushLongInt(static_cast<int_128> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type LongLong.
 */

	stack.pushLongLong(static_cast<int_256> (stack.popLongInt()));
	

}
void funcs::liucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type LongLong.
 */
 
	stack.pushLongLong(static_cast<int_256> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::liuadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::lisub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::liusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::limul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::liumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lidiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::liudiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::licmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Float.
 */

	stack.pushFloat(static_cast<flt_32> (stack.popLongInt()));
	

}
void funcs::liucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Float.
 */
 
	stack.pushFloat(static_cast<flt_32> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Float.
 */

	{
	int_128 b = stack.popLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Float.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type Double.
 */

	stack.pushDouble(static_cast<flt_64> (stack.popLongInt()));
	

}
void funcs::liucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type Double.
 */
 
	stack.pushDouble(static_cast<flt_64> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type Double.
 */

	{
	int_128 b = stack.popLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type Double.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type DoubleFloat.
 */

	stack.pushDoubleFloat(static_cast<flt_128> (stack.popLongInt()));
	

}
void funcs::liucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type DoubleFloat.
 */
 
	stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a + b);
	}
	

}
void funcs::liuadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a + b);
	}
	;
}
void funcs::lisub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a - b);
	}
	

}
void funcs::liusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a - b);
	}
	;
}
void funcs::limul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a * b);
	}
	

}
void funcs::liumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a * b);
	}
	;
}
void funcs::lidiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a / b);
	}
	

}
void funcs::liudiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongInt(a / b);
	}
	;
}
void funcs::licmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type DoubleFloat.
 */

	{
	int_128 b = stack.popLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type DoubleFloat.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::licast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to type DoubleDouble.
 */

	stack.pushDoubleDouble(static_cast<flt_256> (stack.popLongInt()));
	

}
void funcs::liucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to type DoubleDouble.
 */
 
	stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	

}
void funcs::liuadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a + b);
	}
	;
}
void funcs::lisub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	

}
void funcs::liusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a - b);
	}
	;
}
void funcs::limul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	

}
void funcs::liumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a * b);
	}
	;
}
void funcs::lidiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	

}
void funcs::liudiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushDoubleDouble(a / b);
	}
	;
}
void funcs::licmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with type DoubleDouble.
 */

	{
	int_128 b = stack.popLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with type DoubleDouble.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::limod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::licast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Byte.
 */

	stack.pushUnsignedByte(static_cast<uint_8> (stack.popLongInt()));
	

}
void funcs::liucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Byte.
 */
 
	stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::liuadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::lisub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::liusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::limul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::liumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::lidiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::liudiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::licmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Byte.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_8 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::liswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); int_128 b = stack.popLongInt(); stack.pushByte(a); stack.pushLongInt(b); }
	

}
void funcs::limod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::licast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Short.
 */

	stack.pushUnsignedShort(static_cast<uint_16> (stack.popLongInt()));
	

}
void funcs::liucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Short.
 */
 
	stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::liuadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::lisub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::liusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::limul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::liumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::lidiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::liudiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::licmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Short.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_16 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::liswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); int_128 b = stack.popLongInt(); stack.pushShort(a); stack.pushLongInt(b); }
	

}
void funcs::limod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::licast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Int.
 */

	stack.pushUnsignedInt(static_cast<uint_32> (stack.popLongInt()));
	

}
void funcs::liucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Int.
 */
 
	stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::liuadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::lisub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::liusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::limul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::liumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::lidiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::liudiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::licmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Int.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_32 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::liswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); int_128 b = stack.popLongInt(); stack.pushInt(a); stack.pushLongInt(b); }
	

}
void funcs::limod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::licast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type Long.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (stack.popLongInt()));
	

}
void funcs::liucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type Long.
 */
 
	stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::liuadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::lisub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::liusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::limul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::liumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::lidiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::liudiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::licmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type Long.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_64 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::liswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); int_128 b = stack.popLongInt(); stack.pushLong(a); stack.pushLongInt(b); }
	

}
void funcs::limod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a % b);
	}
	

}
void funcs::licast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type LongInt.
 */

	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popLongInt()));
	

}
void funcs::liucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type LongInt.
 */
 
	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	

}
void funcs::liuadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a + b);
	}
	;
}
void funcs::lisub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	

}
void funcs::liusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a - b);
	}
	;
}
void funcs::limul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	

}
void funcs::liumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a * b);
	}
	;
}
void funcs::lidiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	

}
void funcs::liudiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushUnsignedLongInt(a / b);
	}
	;
}
void funcs::licmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type LongInt.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_128 a = stack.popUnsignedLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::liswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); int_128 b = stack.popLongInt(); stack.pushLongInt(a); stack.pushLongInt(b); }
	

}
void funcs::limod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::licast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_128 to unsigned type LongLong.
 */

	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popLongInt()));
	

}
void funcs::liucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_128 to unsigned type LongLong.
 */
 
	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedLongInt()));
	;
}
void funcs::liadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_128 with unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::liuadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_128 with unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::lisub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_128 with unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::liusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_128 with unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::limul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_128 with unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::liumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_128 with unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lidiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_128 with unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::liudiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_128 with unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::licmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::liucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::licmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::liucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::licmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 equal with unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::liucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 equal with unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::licmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 less than or equal to unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::liucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 less than or equal to unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::licmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 greater than or equal to unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::liucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 greater than or equal to unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::licmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_128 not equal with unsigned type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::liucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_128 not equal with unsigned type LongLong.
 */
 
	{
	uint_128 b = stack.popUnsignedLongInt();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::liswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); int_128 b = stack.popLongInt(); stack.pushLongLong(a); stack.pushLongInt(b); }
	

}
void funcs::liswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); int_128 b = stack.popLongInt(); stack.pushFloat(a); stack.pushLongInt(b); }
	

}
void funcs::liswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); int_128 b = stack.popLongInt(); stack.pushDouble(a); stack.pushLongInt(b); }
	

}
void funcs::liswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); int_128 b = stack.popLongInt(); stack.pushDoubleFloat(a); stack.pushLongInt(b); }
	

}
void funcs::liswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); int_128 b = stack.popLongInt(); stack.pushDoubleDouble(a); stack.pushLongInt(b); }
	

}
void funcs::liswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); int_128 b = stack.popLongInt(); stack.pushPointer(a); stack.pushLongInt(b); }
	

}
void funcs::liand_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::lior_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::lixor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::lishftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::lishftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Byte.
 */

	{
	int_128 b = stack.popLongInt();
	int_8 a = stack.popByte();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::liand_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::lior_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::lixor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::lishftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::lishftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Short.
 */

	{
	int_128 b = stack.popLongInt();
	int_16 a = stack.popShort();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::liand_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::lior_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::lixor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::lishftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::lishftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Int.
 */

	{
	int_128 b = stack.popLongInt();
	int_32 a = stack.popInt();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::liand_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::lior_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::lixor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::lishftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::lishftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type Long.
 */

	{
	int_128 b = stack.popLongInt();
	int_64 a = stack.popLong();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::liand_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a & b);
	}
	

}
void funcs::lior_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a | b);
	}
	

}
void funcs::lixor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a ^ b);
	}
	

}
void funcs::lishftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a >> b);
	}
	

}
void funcs::lishftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type LongInt.
 */

	{
	int_128 b = stack.popLongInt();
	int_128 a = stack.popLongInt();
	stack.pushLongInt(a << b);
	}
	

}
void funcs::liand_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::lior_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::lixor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::lishftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::lishftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_128 with type LongLong.
 */

	{
	int_128 b = stack.popLongInt();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lidup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 on the stack.
 */

	stack.pushLongInt(stack.peekLongInt());
	

}
void funcs::lidup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 2 times on the stack.
 */

	stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());
	

}
void funcs::lidup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 3 times on the stack.
 */

	stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());
	

}
void funcs::lidup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 4 times on the stack.
 */

	stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());
	

}
void funcs::lidup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_128 5 times on the stack.
 */

	stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());stack.pushLongInt(stack.peekLongInt());
	

}
void funcs::liswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_128 elements.
 */

	{ int_128 a = stack.popLongInt(); int_128 b = stack.popLongInt(); stack.pushLongInt(a); stack.pushLongInt(b); }
	

}
void funcs::lirot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_128 elements.
 */

	{ int_128 a = stack.popLongInt(); int_128 b = stack.popLongInt(); int_128 c = stack.popLongInt(); stack.pushLongInt(a); stack.pushLongInt(b); stack.pushLongInt(c); }
	

}
void funcs::liset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from stack into a field on base pointer.
 */

	accessMemoryAndSetLongInt(base, ops.getUnsignedInt(), stack.popLongInt());
	

}
void funcs::liget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_128 from a field on base pointer to stack.
 */

	stack.pushLongInt(accessMemoryAndGetLongInt(base, ops.getUnsignedInt()));
	

}
void funcs::livset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from value into a field on base pointer.
 */

	accessMemoryAndSetLongInt(base, ops.getUnsignedInt(), ops.getLongInt());
	

}
void funcs::lisget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_128 from a field on base pointer to stack using address from stack.
 */

	stack.pushLongInt(accessMemoryAndGetLongInt(base, stack.popUnsignedInt()));
	

}
void funcs::lisset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetLongInt(base, stack.popUnsignedInt(), stack.popLongInt());
	

}
void funcs::lisetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_128 from local variable into a field on base pointer.
 */

	accessMemoryAndSetLongInt(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].LongInt);
	

}
void funcs::liinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].LongInt = lvt[point].LongInt + 1; }
	

}
void funcs::liinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].LongInt = lvt[point].LongInt + 2; }
	

}
void funcs::listinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 1 on stack.
 */

	stack.pushLongInt(stack.popLongInt() + 1);
	

}
void funcs::listinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_128 by 2 on stack.
 */

	stack.pushLongInt(stack.popLongInt() + 2);
	

}
void funcs::lireturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_128 into the main stack.
 */

	stack_main.pushLongInt(stack.popLongInt()); return;
	

}
void funcs::limainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].LongInt = stack_main.popLongInt();
	

}
void funcs::limainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 0.
 */

	lvt[0].LongInt = stack_main.popLongInt();;
	

}
void funcs::limainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 1.
 */

	lvt[1].LongInt = stack_main.popLongInt();;
	

}
void funcs::limainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 2.
 */

	lvt[2].LongInt = stack_main.popLongInt();;
	

}
void funcs::limainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_128 from main stack in local variable 3.
 */

	lvt[3].LongInt = stack_main.popLongInt();;
	

}
void funcs::liprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_128 from stack.
 */

	log(std::to_string(stack.popLongInt()));
	

}
void funcs::liuprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_128 from stack.
 */
 
	log(std::to_string(stack.popUnsignedLongInt()));
	;
}
void funcs::llconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack.
 */

	stack.pushLongLong(ops.getLongLong());
	

}
void funcs::llconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 0).
 */

	stack.pushLongLong(0);
	

}
void funcs::llconst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 1).
 */

	stack.pushLongLong(1);
	

}
void funcs::llconst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 2).
 */

	stack.pushLongLong(2);
	

}
void funcs::llconst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 3).
 */

	stack.pushLongLong(3);
	

}
void funcs::llconst_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 4).
 */

	stack.pushLongLong(4);
	

}
void funcs::llconst_5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 5).
 */

	stack.pushLongLong(5);
	

}
void funcs::llconst_6_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 6).
 */

	stack.pushLongLong(6);
	

}
void funcs::llconst_9_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 9).
 */

	stack.pushLongLong(9);
	

}
void funcs::llconst_10_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 10).
 */

	stack.pushLongLong(10);
	

}
void funcs::llconst_11_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 11).
 */

	stack.pushLongLong(11);
	

}
void funcs::llconst_12_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const int_256 into the stack (value = 12).
 */

	stack.pushLongLong(12);
	

}
void funcs::llload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable.
 */

	stack.pushLongLong(lvt[ops.getUnsignedShort()].LongLong);
	

}
void funcs::llload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 0.
 */

	stack.pushLongLong(lvt[0].LongLong);
	

}
void funcs::llload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 1.
 */

	stack.pushLongLong(lvt[1].LongLong);
	

}
void funcs::llload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 2.
 */

	stack.pushLongLong(lvt[2].LongLong);
	

}
void funcs::llload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 3.
 */

	stack.pushLongLong(lvt[3].LongLong);
	

}
void funcs::llload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a int_256 into the stack from local variable 4.
 */

	stack.pushLongLong(lvt[4].LongLong);
	

}
void funcs::llstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_LongLong(stack.popLongLong());
	

}
void funcs::llstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 0.
 */

	lvt[0] = lve_LongLong(stack.popLongLong());
	

}
void funcs::llstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 1.
 */

	lvt[1] = lve_LongLong(stack.popLongLong());
	

}
void funcs::llstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 2.
 */

	lvt[2] = lve_LongLong(stack.popLongLong());
	

}
void funcs::llstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 3.
 */

	lvt[3] = lve_LongLong(stack.popLongLong());
	

}
void funcs::llstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from stack into local variable 4.
 */

	lvt[4] = lve_LongLong(stack.popLongLong());
	

}
void funcs::llcast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Byte.
 */

	stack.pushByte(static_cast<int_8> (stack.popLongLong()));
	

}
void funcs::llucast_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Byte.
 */
 
	stack.pushByte(static_cast<int_8> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popByte();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Short.
 */

	stack.pushShort(static_cast<int_16> (stack.popLongLong()));
	

}
void funcs::llucast_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Short.
 */
 
	stack.pushShort(static_cast<int_16> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popShort();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Int.
 */

	stack.pushInt(static_cast<int_32> (stack.popLongLong()));
	

}
void funcs::llucast_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Int.
 */
 
	stack.pushInt(static_cast<int_32> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Long.
 */

	stack.pushLong(static_cast<int_64> (stack.popLongLong()));
	

}
void funcs::llucast_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Long.
 */
 
	stack.pushLong(static_cast<int_64> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type LongInt.
 */

	stack.pushLongInt(static_cast<int_128> (stack.popLongLong()));
	

}
void funcs::llucast_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type LongInt.
 */
 
	stack.pushLongInt(static_cast<int_128> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popLongInt();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type LongLong.
 */

	stack.pushLongLong(static_cast<int_256> (stack.popLongLong()));
	

}
void funcs::llucast_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type LongLong.
 */
 
	stack.pushLongLong(static_cast<int_256> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Float.
 */

	stack.pushFloat(static_cast<flt_32> (stack.popLongLong()));
	

}
void funcs::llucast_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Float.
 */
 
	stack.pushFloat(static_cast<flt_32> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Float.
 */

	{
	int_256 b = stack.popLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_f_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Float.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_32 a = stack.popFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type Double.
 */

	stack.pushDouble(static_cast<flt_64> (stack.popLongLong()));
	

}
void funcs::llucast_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type Double.
 */
 
	stack.pushDouble(static_cast<flt_64> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type Double.
 */

	{
	int_256 b = stack.popLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_d_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type Double.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_64 a = stack.popDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type DoubleFloat.
 */

	stack.pushDoubleFloat(static_cast<flt_128> (stack.popLongLong()));
	

}
void funcs::llucast_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type DoubleFloat.
 */
 
	stack.pushDoubleFloat(static_cast<flt_128> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type DoubleFloat.
 */

	{
	int_256 b = stack.popLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_df_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type DoubleFloat.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_128 a = stack.popDoubleFloat();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llcast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to type DoubleDouble.
 */

	stack.pushDoubleDouble(static_cast<flt_256> (stack.popLongLong()));
	

}
void funcs::llucast_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to type DoubleDouble.
 */
 
	stack.pushDoubleDouble(static_cast<flt_256> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a + b);
	}
	

}
void funcs::lluadd_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a + b);
	}
	;
}
void funcs::llsub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a - b);
	}
	

}
void funcs::llusub_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a - b);
	}
	;
}
void funcs::llmul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a * b);
	}
	

}
void funcs::llumul_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a * b);
	}
	;
}
void funcs::lldiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a / b);
	}
	

}
void funcs::lludiv_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushLongLong(a / b);
	}
	;
}
void funcs::llcmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with type DoubleDouble.
 */

	{
	int_256 b = stack.popLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_dd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with type DoubleDouble.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	flt_256 a = stack.popDoubleDouble();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llmod_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::llcast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Byte.
 */

	stack.pushUnsignedByte(static_cast<uint_8> (stack.popLongLong()));
	

}
void funcs::llucast_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Byte.
 */
 
	stack.pushUnsignedByte(static_cast<uint_8> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::lluadd_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::llsub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::llusub_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::llmul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::llumul_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lldiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::lludiv_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::llcmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_ub_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Byte.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_8 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); int_256 b = stack.popLongLong(); stack.pushByte(a); stack.pushLongLong(b); }
	

}
void funcs::llmod_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::llcast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Short.
 */

	stack.pushUnsignedShort(static_cast<uint_16> (stack.popLongLong()));
	

}
void funcs::llucast_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Short.
 */
 
	stack.pushUnsignedShort(static_cast<uint_16> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::lluadd_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::llsub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::llusub_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::llmul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::llumul_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lldiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::lludiv_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::llcmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_us_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Short.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_16 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); int_256 b = stack.popLongLong(); stack.pushShort(a); stack.pushLongLong(b); }
	

}
void funcs::llmod_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::llcast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Int.
 */

	stack.pushUnsignedInt(static_cast<uint_32> (stack.popLongLong()));
	

}
void funcs::llucast_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Int.
 */
 
	stack.pushUnsignedInt(static_cast<uint_32> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::lluadd_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::llsub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::llusub_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::llmul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::llumul_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lldiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::lludiv_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::llcmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_ui_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Int.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_32 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); int_256 b = stack.popLongLong(); stack.pushInt(a); stack.pushLongLong(b); }
	

}
void funcs::llmod_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::llcast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type Long.
 */

	stack.pushUnsignedLong(static_cast<uint_64> (stack.popLongLong()));
	

}
void funcs::llucast_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type Long.
 */
 
	stack.pushUnsignedLong(static_cast<uint_64> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::lluadd_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::llsub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::llusub_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::llmul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::llumul_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lldiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::lludiv_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::llcmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_ul_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type Long.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_64 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); int_256 b = stack.popLongLong(); stack.pushLong(a); stack.pushLongLong(b); }
	

}
void funcs::llmod_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::llcast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type LongInt.
 */

	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popLongLong()));
	

}
void funcs::llucast_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type LongInt.
 */
 
	stack.pushUnsignedLongInt(static_cast<uint_128> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::lluadd_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::llsub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::llusub_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::llmul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::llumul_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lldiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::lludiv_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::llcmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_uli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type LongInt.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_128 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); int_256 b = stack.popLongLong(); stack.pushLongInt(a); stack.pushLongLong(b); }
	

}
void funcs::llmod_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * modulo int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a % b);
	}
	

}
void funcs::llcast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast int_256 to unsigned type LongLong.
 */

	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popLongLong()));
	

}
void funcs::llucast_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * cast unsigned uint_256 to unsigned type LongLong.
 */
 
	stack.pushUnsignedLongLong(static_cast<uint_256> (stack.popUnsignedLongLong()));
	;
}
void funcs::lladd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add int_256 with unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	

}
void funcs::lluadd_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * add unsigned uint_256 with unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a + b);
	}
	;
}
void funcs::llsub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract int_256 with unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	

}
void funcs::llusub_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * subtract unsigned uint_256 with unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a - b);
	}
	;
}
void funcs::llmul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply int_256 with unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	

}
void funcs::llumul_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * multiply unsigned uint_256 with unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a * b);
	}
	;
}
void funcs::lldiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide int_256 with unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	

}
void funcs::lludiv_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * divide unsigned uint_256 with unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushUnsignedLongLong(a / b);
	}
	;
}
void funcs::llcmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	

}
void funcs::llucmpl_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a < b) ? 1 : 0);
	}
	;
}
void funcs::llcmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	

}
void funcs::llucmpg_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a > b) ? 1 : 0);
	}
	;
}
void funcs::llcmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 equal with unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	

}
void funcs::llucmpe_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 equal with unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a == b) ? 1 : 0);
	}
	;
}
void funcs::llcmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 less than or equal to unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	

}
void funcs::llucmple_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 less than or equal to unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a <= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 greater than or equal to unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	

}
void funcs::llucmpge_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 greater than or equal to unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a >= b) ? 1 : 0);
	}
	;
}
void funcs::llcmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare int_256 not equal with unsigned type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	

}
void funcs::llucmpne_ull_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * compare unsigned uint_256 not equal with unsigned type LongLong.
 */
 
	{
	uint_256 b = stack.popUnsignedLongLong();
	int_256 a = stack.popUnsignedLongLong();
	stack.pushByte((a != b) ? 1 : 0);
	}
	;
}
void funcs::llswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); int_256 b = stack.popLongLong(); stack.pushLongLong(a); stack.pushLongLong(b); }
	

}
void funcs::llswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); int_256 b = stack.popLongLong(); stack.pushFloat(a); stack.pushLongLong(b); }
	

}
void funcs::llswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); int_256 b = stack.popLongLong(); stack.pushDouble(a); stack.pushLongLong(b); }
	

}
void funcs::llswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); int_256 b = stack.popLongLong(); stack.pushDoubleFloat(a); stack.pushLongLong(b); }
	

}
void funcs::llswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); int_256 b = stack.popLongLong(); stack.pushDoubleDouble(a); stack.pushLongLong(b); }
	

}
void funcs::llswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); int_256 b = stack.popLongLong(); stack.pushPointer(a); stack.pushLongLong(b); }
	

}
void funcs::lland_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::llor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::llxor_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::llshftr_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::llshftl_b_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Byte.
 */

	{
	int_256 b = stack.popLongLong();
	int_8 a = stack.popByte();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lland_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::llor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::llxor_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::llshftr_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::llshftl_s_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Short.
 */

	{
	int_256 b = stack.popLongLong();
	int_16 a = stack.popShort();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lland_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::llor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::llxor_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::llshftr_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::llshftl_i_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Int.
 */

	{
	int_256 b = stack.popLongLong();
	int_32 a = stack.popInt();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lland_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::llor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::llxor_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::llshftr_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::llshftl_l_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type Long.
 */

	{
	int_256 b = stack.popLongLong();
	int_64 a = stack.popLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lland_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::llor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::llxor_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::llshftr_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::llshftl_li_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type LongInt.
 */

	{
	int_256 b = stack.popLongLong();
	int_128 a = stack.popLongInt();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lland_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise and int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a & b);
	}
	

}
void funcs::llor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise or int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a | b);
	}
	

}
void funcs::llxor_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * bitwise xor int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a ^ b);
	}
	

}
void funcs::llshftr_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift right int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a >> b);
	}
	

}
void funcs::llshftl_ll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * shift left xor int_256 with type LongLong.
 */

	{
	int_256 b = stack.popLongLong();
	int_256 a = stack.popLongLong();
	stack.pushLongLong(a << b);
	}
	

}
void funcs::lldup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 on the stack.
 */

	stack.pushLongLong(stack.peekLongLong());
	

}
void funcs::lldup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 2 times on the stack.
 */

	stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());
	

}
void funcs::lldup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 3 times on the stack.
 */

	stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());
	

}
void funcs::lldup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 4 times on the stack.
 */

	stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());
	

}
void funcs::lldup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a int_256 5 times on the stack.
 */

	stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());stack.pushLongLong(stack.peekLongLong());
	

}
void funcs::llswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost int_256 elements.
 */

	{ int_256 a = stack.popLongLong(); int_256 b = stack.popLongLong(); stack.pushLongLong(a); stack.pushLongLong(b); }
	

}
void funcs::llrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost int_256 elements.
 */

	{ int_256 a = stack.popLongLong(); int_256 b = stack.popLongLong(); int_256 c = stack.popLongLong(); stack.pushLongLong(a); stack.pushLongLong(b); stack.pushLongLong(c); }
	

}
void funcs::llset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from stack into a field on base pointer.
 */

	accessMemoryAndSetLongLong(base, ops.getUnsignedInt(), stack.popLongLong());
	

}
void funcs::llget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_256 from a field on base pointer to stack.
 */

	stack.pushLongLong(accessMemoryAndGetLongLong(base, ops.getUnsignedInt()));
	

}
void funcs::llvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from value into a field on base pointer.
 */

	accessMemoryAndSetLongLong(base, ops.getUnsignedInt(), ops.getLongLong());
	

}
void funcs::llsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a int_256 from a field on base pointer to stack using address from stack.
 */

	stack.pushLongLong(accessMemoryAndGetLongLong(base, stack.popUnsignedInt()));
	

}
void funcs::llsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetLongLong(base, stack.popUnsignedInt(), stack.popLongLong());
	

}
void funcs::llsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a int_256 from local variable into a field on base pointer.
 */

	accessMemoryAndSetLongLong(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].LongLong);
	

}
void funcs::llinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].LongLong = lvt[point].LongLong + 1; }
	

}
void funcs::llinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].LongLong = lvt[point].LongLong + 2; }
	

}
void funcs::llstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 1 on stack.
 */

	stack.pushLongLong(stack.popLongLong() + 1);
	

}
void funcs::llstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment int_256 by 2 on stack.
 */

	stack.pushLongLong(stack.popLongLong() + 2);
	

}
void funcs::llreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a int_256 into the main stack.
 */

	stack_main.pushLongLong(stack.popLongLong()); return;
	

}
void funcs::llmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].LongLong = stack_main.popLongLong();
	

}
void funcs::llmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 0.
 */

	lvt[0].LongLong = stack_main.popLongLong();;
	

}
void funcs::llmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 1.
 */

	lvt[1].LongLong = stack_main.popLongLong();;
	

}
void funcs::llmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 2.
 */

	lvt[2].LongLong = stack_main.popLongLong();;
	

}
void funcs::llmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a int_256 from main stack in local variable 3.
 */

	lvt[3].LongLong = stack_main.popLongLong();;
	

}
void funcs::llprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a int_256 from stack.
 */

	log(std::to_string(stack.popLongLong()));
	

}
void funcs::lluprint_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * print a unsigned uint_256 from stack.
 */
 
	log(std::to_string(stack.popUnsignedLongLong()));
	;
}
void funcs::fconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_32 into the stack.
 */

	stack.pushFloat(ops.getFloat());
	

}
void funcs::fconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_32 into the stack (value = 0).
 */

	stack.pushFloat(0);
	

}
void funcs::fload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable.
 */

	stack.pushFloat(lvt[ops.getUnsignedShort()].Float);
	

}
void funcs::fload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 0.
 */

	stack.pushFloat(lvt[0].Float);
	

}
void funcs::fload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 1.
 */

	stack.pushFloat(lvt[1].Float);
	

}
void funcs::fload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 2.
 */

	stack.pushFloat(lvt[2].Float);
	

}
void funcs::fload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 3.
 */

	stack.pushFloat(lvt[3].Float);
	

}
void funcs::fload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_32 into the stack from local variable 4.
 */

	stack.pushFloat(lvt[4].Float);
	

}
void funcs::fstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Float(stack.popFloat());
	

}
void funcs::fstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 0.
 */

	lvt[0] = lve_Float(stack.popFloat());
	

}
void funcs::fstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 1.
 */

	lvt[1] = lve_Float(stack.popFloat());
	

}
void funcs::fstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 2.
 */

	lvt[2] = lve_Float(stack.popFloat());
	

}
void funcs::fstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 3.
 */

	lvt[3] = lve_Float(stack.popFloat());
	

}
void funcs::fstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from stack into local variable 4.
 */

	lvt[4] = lve_Float(stack.popFloat());
	

}
void funcs::fswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); flt_32 b = stack.popFloat(); stack.pushByte(a); stack.pushFloat(b); }
	

}
void funcs::fswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); flt_32 b = stack.popFloat(); stack.pushShort(a); stack.pushFloat(b); }
	

}
void funcs::fswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); flt_32 b = stack.popFloat(); stack.pushInt(a); stack.pushFloat(b); }
	

}
void funcs::fswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); flt_32 b = stack.popFloat(); stack.pushLong(a); stack.pushFloat(b); }
	

}
void funcs::fswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); flt_32 b = stack.popFloat(); stack.pushLongInt(a); stack.pushFloat(b); }
	

}
void funcs::fswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); flt_32 b = stack.popFloat(); stack.pushLongLong(a); stack.pushFloat(b); }
	

}
void funcs::fswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); flt_32 b = stack.popFloat(); stack.pushFloat(a); stack.pushFloat(b); }
	

}
void funcs::fswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); flt_32 b = stack.popFloat(); stack.pushDouble(a); stack.pushFloat(b); }
	

}
void funcs::fswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); flt_32 b = stack.popFloat(); stack.pushDoubleFloat(a); stack.pushFloat(b); }
	

}
void funcs::fswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); flt_32 b = stack.popFloat(); stack.pushDoubleDouble(a); stack.pushFloat(b); }
	

}
void funcs::fswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); flt_32 b = stack.popFloat(); stack.pushPointer(a); stack.pushFloat(b); }
	

}
void funcs::fdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 on the stack.
 */

	stack.pushFloat(stack.peekFloat());
	

}
void funcs::fdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 2 times on the stack.
 */

	stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());
	

}
void funcs::fdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 3 times on the stack.
 */

	stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());
	

}
void funcs::fdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 4 times on the stack.
 */

	stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());
	

}
void funcs::fdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_32 5 times on the stack.
 */

	stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());stack.pushFloat(stack.peekFloat());
	

}
void funcs::fswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_32 elements.
 */

	{ flt_32 a = stack.popFloat(); flt_32 b = stack.popFloat(); stack.pushFloat(a); stack.pushFloat(b); }
	

}
void funcs::frot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_32 elements.
 */

	{ flt_32 a = stack.popFloat(); flt_32 b = stack.popFloat(); flt_32 c = stack.popFloat(); stack.pushFloat(a); stack.pushFloat(b); stack.pushFloat(c); }
	

}
void funcs::fset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from stack into a field on base pointer.
 */

	accessMemoryAndSetFloat(base, ops.getUnsignedInt(), stack.popFloat());
	

}
void funcs::fget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_32 from a field on base pointer to stack.
 */

	stack.pushFloat(accessMemoryAndGetFloat(base, ops.getUnsignedInt()));
	

}
void funcs::fvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from value into a field on base pointer.
 */

	accessMemoryAndSetFloat(base, ops.getUnsignedInt(), ops.getFloat());
	

}
void funcs::fsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_32 from a field on base pointer to stack using address from stack.
 */

	stack.pushFloat(accessMemoryAndGetFloat(base, stack.popUnsignedInt()));
	

}
void funcs::fsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetFloat(base, stack.popUnsignedInt(), stack.popFloat());
	

}
void funcs::fsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_32 from local variable into a field on base pointer.
 */

	accessMemoryAndSetFloat(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Float);
	

}
void funcs::finc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Float = lvt[point].Float + 1; }
	

}
void funcs::finc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Float = lvt[point].Float + 2; }
	

}
void funcs::fstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 1 on stack.
 */

	stack.pushFloat(stack.popFloat() + 1);
	

}
void funcs::fstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_32 by 2 on stack.
 */

	stack.pushFloat(stack.popFloat() + 2);
	

}
void funcs::freturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_32 into the main stack.
 */

	stack_main.pushFloat(stack.popFloat()); return;
	

}
void funcs::fmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Float = stack_main.popFloat();
	

}
void funcs::fmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 0.
 */

	lvt[0].Float = stack_main.popFloat();;
	

}
void funcs::fmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 1.
 */

	lvt[1].Float = stack_main.popFloat();;
	

}
void funcs::fmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 2.
 */

	lvt[2].Float = stack_main.popFloat();;
	

}
void funcs::fmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_32 from main stack in local variable 3.
 */

	lvt[3].Float = stack_main.popFloat();;
	

}
void funcs::dconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_64 into the stack.
 */

	stack.pushDouble(ops.getDouble());
	

}
void funcs::dconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_64 into the stack (value = 0).
 */

	stack.pushDouble(0);
	

}
void funcs::dload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable.
 */

	stack.pushDouble(lvt[ops.getUnsignedShort()].Double);
	

}
void funcs::dload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 0.
 */

	stack.pushDouble(lvt[0].Double);
	

}
void funcs::dload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 1.
 */

	stack.pushDouble(lvt[1].Double);
	

}
void funcs::dload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 2.
 */

	stack.pushDouble(lvt[2].Double);
	

}
void funcs::dload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 3.
 */

	stack.pushDouble(lvt[3].Double);
	

}
void funcs::dload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_64 into the stack from local variable 4.
 */

	stack.pushDouble(lvt[4].Double);
	

}
void funcs::dstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Double(stack.popDouble());
	

}
void funcs::dstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 0.
 */

	lvt[0] = lve_Double(stack.popDouble());
	

}
void funcs::dstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 1.
 */

	lvt[1] = lve_Double(stack.popDouble());
	

}
void funcs::dstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 2.
 */

	lvt[2] = lve_Double(stack.popDouble());
	

}
void funcs::dstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 3.
 */

	lvt[3] = lve_Double(stack.popDouble());
	

}
void funcs::dstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from stack into local variable 4.
 */

	lvt[4] = lve_Double(stack.popDouble());
	

}
void funcs::dswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); flt_64 b = stack.popDouble(); stack.pushByte(a); stack.pushDouble(b); }
	

}
void funcs::dswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); flt_64 b = stack.popDouble(); stack.pushShort(a); stack.pushDouble(b); }
	

}
void funcs::dswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); flt_64 b = stack.popDouble(); stack.pushInt(a); stack.pushDouble(b); }
	

}
void funcs::dswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); flt_64 b = stack.popDouble(); stack.pushLong(a); stack.pushDouble(b); }
	

}
void funcs::dswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); flt_64 b = stack.popDouble(); stack.pushLongInt(a); stack.pushDouble(b); }
	

}
void funcs::dswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); flt_64 b = stack.popDouble(); stack.pushLongLong(a); stack.pushDouble(b); }
	

}
void funcs::dswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); flt_64 b = stack.popDouble(); stack.pushFloat(a); stack.pushDouble(b); }
	

}
void funcs::dswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); flt_64 b = stack.popDouble(); stack.pushDouble(a); stack.pushDouble(b); }
	

}
void funcs::dswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); flt_64 b = stack.popDouble(); stack.pushDoubleFloat(a); stack.pushDouble(b); }
	

}
void funcs::dswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); flt_64 b = stack.popDouble(); stack.pushDoubleDouble(a); stack.pushDouble(b); }
	

}
void funcs::dswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); flt_64 b = stack.popDouble(); stack.pushPointer(a); stack.pushDouble(b); }
	

}
void funcs::ddup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 on the stack.
 */

	stack.pushDouble(stack.peekDouble());
	

}
void funcs::ddup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 2 times on the stack.
 */

	stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());
	

}
void funcs::ddup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 3 times on the stack.
 */

	stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());
	

}
void funcs::ddup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 4 times on the stack.
 */

	stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());
	

}
void funcs::ddup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_64 5 times on the stack.
 */

	stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());stack.pushDouble(stack.peekDouble());
	

}
void funcs::dswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_64 elements.
 */

	{ flt_64 a = stack.popDouble(); flt_64 b = stack.popDouble(); stack.pushDouble(a); stack.pushDouble(b); }
	

}
void funcs::drot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_64 elements.
 */

	{ flt_64 a = stack.popDouble(); flt_64 b = stack.popDouble(); flt_64 c = stack.popDouble(); stack.pushDouble(a); stack.pushDouble(b); stack.pushDouble(c); }
	

}
void funcs::dset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from stack into a field on base pointer.
 */

	accessMemoryAndSetDouble(base, ops.getUnsignedInt(), stack.popDouble());
	

}
void funcs::dget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_64 from a field on base pointer to stack.
 */

	stack.pushDouble(accessMemoryAndGetDouble(base, ops.getUnsignedInt()));
	

}
void funcs::dvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from value into a field on base pointer.
 */

	accessMemoryAndSetDouble(base, ops.getUnsignedInt(), ops.getDouble());
	

}
void funcs::dsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_64 from a field on base pointer to stack using address from stack.
 */

	stack.pushDouble(accessMemoryAndGetDouble(base, stack.popUnsignedInt()));
	

}
void funcs::dsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetDouble(base, stack.popUnsignedInt(), stack.popDouble());
	

}
void funcs::dsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_64 from local variable into a field on base pointer.
 */

	accessMemoryAndSetDouble(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Double);
	

}
void funcs::dinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Double = lvt[point].Double + 1; }
	

}
void funcs::dinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Double = lvt[point].Double + 2; }
	

}
void funcs::dstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 1 on stack.
 */

	stack.pushDouble(stack.popDouble() + 1);
	

}
void funcs::dstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_64 by 2 on stack.
 */

	stack.pushDouble(stack.popDouble() + 2);
	

}
void funcs::dreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_64 into the main stack.
 */

	stack_main.pushDouble(stack.popDouble()); return;
	

}
void funcs::dmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Double = stack_main.popDouble();
	

}
void funcs::dmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 0.
 */

	lvt[0].Double = stack_main.popDouble();;
	

}
void funcs::dmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 1.
 */

	lvt[1].Double = stack_main.popDouble();;
	

}
void funcs::dmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 2.
 */

	lvt[2].Double = stack_main.popDouble();;
	

}
void funcs::dmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_64 from main stack in local variable 3.
 */

	lvt[3].Double = stack_main.popDouble();;
	

}
void funcs::dfconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_128 into the stack.
 */

	stack.pushDoubleFloat(ops.getDoubleFloat());
	

}
void funcs::dfconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_128 into the stack (value = 0).
 */

	stack.pushDoubleFloat(0);
	

}
void funcs::dfload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable.
 */

	stack.pushDoubleFloat(lvt[ops.getUnsignedShort()].DoubleFloat);
	

}
void funcs::dfload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 0.
 */

	stack.pushDoubleFloat(lvt[0].DoubleFloat);
	

}
void funcs::dfload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 1.
 */

	stack.pushDoubleFloat(lvt[1].DoubleFloat);
	

}
void funcs::dfload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 2.
 */

	stack.pushDoubleFloat(lvt[2].DoubleFloat);
	

}
void funcs::dfload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 3.
 */

	stack.pushDoubleFloat(lvt[3].DoubleFloat);
	

}
void funcs::dfload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_128 into the stack from local variable 4.
 */

	stack.pushDoubleFloat(lvt[4].DoubleFloat);
	

}
void funcs::dfstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_DoubleFloat(stack.popDoubleFloat());
	

}
void funcs::dfstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 0.
 */

	lvt[0] = lve_DoubleFloat(stack.popDoubleFloat());
	

}
void funcs::dfstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 1.
 */

	lvt[1] = lve_DoubleFloat(stack.popDoubleFloat());
	

}
void funcs::dfstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 2.
 */

	lvt[2] = lve_DoubleFloat(stack.popDoubleFloat());
	

}
void funcs::dfstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 3.
 */

	lvt[3] = lve_DoubleFloat(stack.popDoubleFloat());
	

}
void funcs::dfstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from stack into local variable 4.
 */

	lvt[4] = lve_DoubleFloat(stack.popDoubleFloat());
	

}
void funcs::dfswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); flt_128 b = stack.popDoubleFloat(); stack.pushByte(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); flt_128 b = stack.popDoubleFloat(); stack.pushShort(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); flt_128 b = stack.popDoubleFloat(); stack.pushInt(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); flt_128 b = stack.popDoubleFloat(); stack.pushLong(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); flt_128 b = stack.popDoubleFloat(); stack.pushLongInt(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); flt_128 b = stack.popDoubleFloat(); stack.pushLongLong(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); flt_128 b = stack.popDoubleFloat(); stack.pushFloat(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); flt_128 b = stack.popDoubleFloat(); stack.pushDouble(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); flt_128 b = stack.popDoubleFloat(); stack.pushDoubleFloat(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); flt_128 b = stack.popDoubleFloat(); stack.pushDoubleDouble(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); flt_128 b = stack.popDoubleFloat(); stack.pushPointer(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfdup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 on the stack.
 */

	stack.pushDoubleFloat(stack.peekDoubleFloat());
	

}
void funcs::dfdup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 2 times on the stack.
 */

	stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());
	

}
void funcs::dfdup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 3 times on the stack.
 */

	stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());
	

}
void funcs::dfdup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 4 times on the stack.
 */

	stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());
	

}
void funcs::dfdup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_128 5 times on the stack.
 */

	stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());stack.pushDoubleFloat(stack.peekDoubleFloat());
	

}
void funcs::dfswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_128 elements.
 */

	{ flt_128 a = stack.popDoubleFloat(); flt_128 b = stack.popDoubleFloat(); stack.pushDoubleFloat(a); stack.pushDoubleFloat(b); }
	

}
void funcs::dfrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_128 elements.
 */

	{ flt_128 a = stack.popDoubleFloat(); flt_128 b = stack.popDoubleFloat(); flt_128 c = stack.popDoubleFloat(); stack.pushDoubleFloat(a); stack.pushDoubleFloat(b); stack.pushDoubleFloat(c); }
	

}
void funcs::dfset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from stack into a field on base pointer.
 */

	accessMemoryAndSetDoubleFloat(base, ops.getUnsignedInt(), stack.popDoubleFloat());
	

}
void funcs::dfget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_128 from a field on base pointer to stack.
 */

	stack.pushDoubleFloat(accessMemoryAndGetDoubleFloat(base, ops.getUnsignedInt()));
	

}
void funcs::dfvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from value into a field on base pointer.
 */

	accessMemoryAndSetDoubleFloat(base, ops.getUnsignedInt(), ops.getDoubleFloat());
	

}
void funcs::dfsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_128 from a field on base pointer to stack using address from stack.
 */

	stack.pushDoubleFloat(accessMemoryAndGetDoubleFloat(base, stack.popUnsignedInt()));
	

}
void funcs::dfsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetDoubleFloat(base, stack.popUnsignedInt(), stack.popDoubleFloat());
	

}
void funcs::dfsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_128 from local variable into a field on base pointer.
 */

	accessMemoryAndSetDoubleFloat(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].DoubleFloat);
	

}
void funcs::dfinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleFloat = lvt[point].DoubleFloat + 1; }
	

}
void funcs::dfinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleFloat = lvt[point].DoubleFloat + 2; }
	

}
void funcs::dfstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 1 on stack.
 */

	stack.pushDoubleFloat(stack.popDoubleFloat() + 1);
	

}
void funcs::dfstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_128 by 2 on stack.
 */

	stack.pushDoubleFloat(stack.popDoubleFloat() + 2);
	

}
void funcs::dfreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_128 into the main stack.
 */

	stack_main.pushDoubleFloat(stack.popDoubleFloat()); return;
	

}
void funcs::dfmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].DoubleFloat = stack_main.popDoubleFloat();
	

}
void funcs::dfmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 0.
 */

	lvt[0].DoubleFloat = stack_main.popDoubleFloat();;
	

}
void funcs::dfmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 1.
 */

	lvt[1].DoubleFloat = stack_main.popDoubleFloat();;
	

}
void funcs::dfmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 2.
 */

	lvt[2].DoubleFloat = stack_main.popDoubleFloat();;
	

}
void funcs::dfmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_128 from main stack in local variable 3.
 */

	lvt[3].DoubleFloat = stack_main.popDoubleFloat();;
	

}
void funcs::ddconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_256 into the stack.
 */

	stack.pushDoubleDouble(ops.getDoubleDouble());
	

}
void funcs::ddconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const flt_256 into the stack (value = 0).
 */

	stack.pushDoubleDouble(0);
	

}
void funcs::ddload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable.
 */

	stack.pushDoubleDouble(lvt[ops.getUnsignedShort()].DoubleDouble);
	

}
void funcs::ddload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 0.
 */

	stack.pushDoubleDouble(lvt[0].DoubleDouble);
	

}
void funcs::ddload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 1.
 */

	stack.pushDoubleDouble(lvt[1].DoubleDouble);
	

}
void funcs::ddload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 2.
 */

	stack.pushDoubleDouble(lvt[2].DoubleDouble);
	

}
void funcs::ddload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 3.
 */

	stack.pushDoubleDouble(lvt[3].DoubleDouble);
	

}
void funcs::ddload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a flt_256 into the stack from local variable 4.
 */

	stack.pushDoubleDouble(lvt[4].DoubleDouble);
	

}
void funcs::ddstore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_DoubleDouble(stack.popDoubleDouble());
	

}
void funcs::ddstore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 0.
 */

	lvt[0] = lve_DoubleDouble(stack.popDoubleDouble());
	

}
void funcs::ddstore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 1.
 */

	lvt[1] = lve_DoubleDouble(stack.popDoubleDouble());
	

}
void funcs::ddstore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 2.
 */

	lvt[2] = lve_DoubleDouble(stack.popDoubleDouble());
	

}
void funcs::ddstore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 3.
 */

	lvt[3] = lve_DoubleDouble(stack.popDoubleDouble());
	

}
void funcs::ddstore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from stack into local variable 4.
 */

	lvt[4] = lve_DoubleDouble(stack.popDoubleDouble());
	

}
void funcs::ddswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); flt_256 b = stack.popDoubleDouble(); stack.pushByte(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); flt_256 b = stack.popDoubleDouble(); stack.pushShort(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); flt_256 b = stack.popDoubleDouble(); stack.pushInt(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); flt_256 b = stack.popDoubleDouble(); stack.pushLong(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); flt_256 b = stack.popDoubleDouble(); stack.pushLongInt(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); flt_256 b = stack.popDoubleDouble(); stack.pushLongLong(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); flt_256 b = stack.popDoubleDouble(); stack.pushFloat(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); flt_256 b = stack.popDoubleDouble(); stack.pushDouble(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); flt_256 b = stack.popDoubleDouble(); stack.pushDoubleFloat(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); flt_256 b = stack.popDoubleDouble(); stack.pushDoubleDouble(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); flt_256 b = stack.popDoubleDouble(); stack.pushPointer(a); stack.pushDoubleDouble(b); }
	

}
void funcs::dddup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 on the stack.
 */

	stack.pushDoubleDouble(stack.peekDoubleDouble());
	

}
void funcs::dddup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 2 times on the stack.
 */

	stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());
	

}
void funcs::dddup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 3 times on the stack.
 */

	stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());
	

}
void funcs::dddup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 4 times on the stack.
 */

	stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());
	

}
void funcs::dddup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a flt_256 5 times on the stack.
 */

	stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());stack.pushDoubleDouble(stack.peekDoubleDouble());
	

}
void funcs::ddswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost flt_256 elements.
 */

	{ flt_256 a = stack.popDoubleDouble(); flt_256 b = stack.popDoubleDouble(); stack.pushDoubleDouble(a); stack.pushDoubleDouble(b); }
	

}
void funcs::ddrot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost flt_256 elements.
 */

	{ flt_256 a = stack.popDoubleDouble(); flt_256 b = stack.popDoubleDouble(); flt_256 c = stack.popDoubleDouble(); stack.pushDoubleDouble(a); stack.pushDoubleDouble(b); stack.pushDoubleDouble(c); }
	

}
void funcs::ddset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from stack into a field on base pointer.
 */

	accessMemoryAndSetDoubleDouble(base, ops.getUnsignedInt(), stack.popDoubleDouble());
	

}
void funcs::ddget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_256 from a field on base pointer to stack.
 */

	stack.pushDoubleDouble(accessMemoryAndGetDoubleDouble(base, ops.getUnsignedInt()));
	

}
void funcs::ddvset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from value into a field on base pointer.
 */

	accessMemoryAndSetDoubleDouble(base, ops.getUnsignedInt(), ops.getDoubleDouble());
	

}
void funcs::ddsget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a flt_256 from a field on base pointer to stack using address from stack.
 */

	stack.pushDoubleDouble(accessMemoryAndGetDoubleDouble(base, stack.popUnsignedInt()));
	

}
void funcs::ddsset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetDoubleDouble(base, stack.popUnsignedInt(), stack.popDoubleDouble());
	

}
void funcs::ddsetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a flt_256 from local variable into a field on base pointer.
 */

	accessMemoryAndSetDoubleDouble(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].DoubleDouble);
	

}
void funcs::ddinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleDouble = lvt[point].DoubleDouble + 1; }
	

}
void funcs::ddinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].DoubleDouble = lvt[point].DoubleDouble + 2; }
	

}
void funcs::ddstinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 1 on stack.
 */

	stack.pushDoubleDouble(stack.popDoubleDouble() + 1);
	

}
void funcs::ddstinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment flt_256 by 2 on stack.
 */

	stack.pushDoubleDouble(stack.popDoubleDouble() + 2);
	

}
void funcs::ddreturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a flt_256 into the main stack.
 */

	stack_main.pushDoubleDouble(stack.popDoubleDouble()); return;
	

}
void funcs::ddmainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].DoubleDouble = stack_main.popDoubleDouble();
	

}
void funcs::ddmainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 0.
 */

	lvt[0].DoubleDouble = stack_main.popDoubleDouble();;
	

}
void funcs::ddmainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 1.
 */

	lvt[1].DoubleDouble = stack_main.popDoubleDouble();;
	

}
void funcs::ddmainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 2.
 */

	lvt[2].DoubleDouble = stack_main.popDoubleDouble();;
	

}
void funcs::ddmainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a flt_256 from main stack in local variable 3.
 */

	lvt[3].DoubleDouble = stack_main.popDoubleDouble();;
	

}
void funcs::aconst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer into the stack.
 */

	stack.pushPointer(ops.getPointer());
	

}
void funcs::aconst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * push a const pointer into the stack (value = 0).
 */

	stack.pushPointer(0);
	

}
void funcs::aload_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable.
 */

	stack.pushPointer(lvt[ops.getUnsignedShort()].Pointer);
	

}
void funcs::aload_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 0.
 */

	stack.pushPointer(lvt[0].Pointer);
	

}
void funcs::aload_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 1.
 */

	stack.pushPointer(lvt[1].Pointer);
	

}
void funcs::aload_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 2.
 */

	stack.pushPointer(lvt[2].Pointer);
	

}
void funcs::aload_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 3.
 */

	stack.pushPointer(lvt[3].Pointer);
	

}
void funcs::aload_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * load a pointer into the stack from local variable 4.
 */

	stack.pushPointer(lvt[4].Pointer);
	

}
void funcs::astore_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable.
 */

	lvt[ops.getUnsignedShort()] = lve_Pointer(stack.popPointer());
	

}
void funcs::astore_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 0.
 */

	lvt[0] = lve_Pointer(stack.popPointer());
	

}
void funcs::astore_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 1.
 */

	lvt[1] = lve_Pointer(stack.popPointer());
	

}
void funcs::astore_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 2.
 */

	lvt[2] = lve_Pointer(stack.popPointer());
	

}
void funcs::astore_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 3.
 */

	lvt[3] = lve_Pointer(stack.popPointer());
	

}
void funcs::astore_4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from stack into local variable 4.
 */

	lvt[4] = lve_Pointer(stack.popPointer());
	

}
void funcs::aswapb_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Byte.
 */

	{ int_8 a = stack.popByte(); pointer b = stack.popPointer(); stack.pushByte(a); stack.pushPointer(b); }
	

}
void funcs::aswaps_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Short.
 */

	{ int_16 a = stack.popShort(); pointer b = stack.popPointer(); stack.pushShort(a); stack.pushPointer(b); }
	

}
void funcs::aswapi_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Int.
 */

	{ int_32 a = stack.popInt(); pointer b = stack.popPointer(); stack.pushInt(a); stack.pushPointer(b); }
	

}
void funcs::aswapl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Long.
 */

	{ int_64 a = stack.popLong(); pointer b = stack.popPointer(); stack.pushLong(a); stack.pushPointer(b); }
	

}
void funcs::aswapli_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a LongInt.
 */

	{ int_128 a = stack.popLongInt(); pointer b = stack.popPointer(); stack.pushLongInt(a); stack.pushPointer(b); }
	

}
void funcs::aswapll_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a LongLong.
 */

	{ int_256 a = stack.popLongLong(); pointer b = stack.popPointer(); stack.pushLongLong(a); stack.pushPointer(b); }
	

}
void funcs::aswapf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Float.
 */

	{ flt_32 a = stack.popFloat(); pointer b = stack.popPointer(); stack.pushFloat(a); stack.pushPointer(b); }
	

}
void funcs::aswapd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Double.
 */

	{ flt_64 a = stack.popDouble(); pointer b = stack.popPointer(); stack.pushDouble(a); stack.pushPointer(b); }
	

}
void funcs::aswapdf_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a DoubleFloat.
 */

	{ flt_128 a = stack.popDoubleFloat(); pointer b = stack.popPointer(); stack.pushDoubleFloat(a); stack.pushPointer(b); }
	

}
void funcs::aswapdd_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a DoubleDouble.
 */

	{ flt_256 a = stack.popDoubleDouble(); pointer b = stack.popPointer(); stack.pushDoubleDouble(a); stack.pushPointer(b); }
	

}
void funcs::aswapa_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements where the top element is a Pointer.
 */

	{ pointer a = stack.popPointer(); pointer b = stack.popPointer(); stack.pushPointer(a); stack.pushPointer(b); }
	

}
void funcs::adup_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer on the stack.
 */

	stack.pushPointer(stack.peekPointer());
	

}
void funcs::adup2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 2 times on the stack.
 */

	stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());
	

}
void funcs::adup3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 3 times on the stack.
 */

	stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());
	

}
void funcs::adup4_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 4 times on the stack.
 */

	stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());
	

}
void funcs::adup5_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * duplicate a pointer 5 times on the stack.
 */

	stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());stack.pushPointer(stack.peekPointer());
	

}
void funcs::aswap_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * swap the 2 topmost pointer elements.
 */

	{ pointer a = stack.popPointer(); pointer b = stack.popPointer(); stack.pushPointer(a); stack.pushPointer(b); }
	

}
void funcs::arot_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * rotate the 3 topmost pointer elements.
 */

	{ pointer a = stack.popPointer(); pointer b = stack.popPointer(); pointer c = stack.popPointer(); stack.pushPointer(a); stack.pushPointer(b); stack.pushPointer(c); }
	

}
void funcs::aset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from stack into a field on base pointer.
 */

	accessMemoryAndSetPointer(base, ops.getUnsignedInt(), stack.popPointer());
	

}
void funcs::aget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a pointer from a field on base pointer to stack.
 */

	stack.pushPointer(accessMemoryAndGetPointer(base, ops.getUnsignedInt()));
	

}
void funcs::avset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from value into a field on base pointer.
 */

	accessMemoryAndSetPointer(base, ops.getUnsignedInt(), ops.getPointer());
	

}
void funcs::asget_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * get a pointer from a field on base pointer to stack using address from stack.
 */

	stack.pushPointer(accessMemoryAndGetPointer(base, stack.popUnsignedInt()));
	

}
void funcs::asset_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from stack into a field on base pointer using address from stack.
 */

	accessMemoryAndSetPointer(base, stack.popUnsignedInt(), stack.popPointer());
	

}
void funcs::asetl_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * set a pointer from local variable into a field on base pointer.
 */

	accessMemoryAndSetPointer(base, ops.getUnsignedInt(), lvt[ops.getUnsignedShort()].Pointer);
	

}
void funcs::ainc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 1 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Pointer = lvt[point].Pointer + 1; }
	

}
void funcs::ainc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 2 on stack.
 */

	{ uint_16 point = ops.getUnsignedShort(); lvt[point].Pointer = lvt[point].Pointer + 2; }
	

}
void funcs::astinc_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 1 on stack.
 */

	stack.pushPointer(stack.popPointer() + 1);
	

}
void funcs::astinc_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * increment pointer by 2 on stack.
 */

	stack.pushPointer(stack.popPointer() + 2);
	

}
void funcs::areturn_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * return a pointer into the main stack.
 */

	stack_main.pushPointer(stack.popPointer()); return;
	

}
void funcs::amainst_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in a local variable..
 */

	lvt[ops.getUnsignedShort()].Pointer = stack_main.popPointer();
	

}
void funcs::amainst_0_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 0.
 */

	lvt[0].Pointer = stack_main.popPointer();;
	

}
void funcs::amainst_1_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 1.
 */

	lvt[1].Pointer = stack_main.popPointer();;
	

}
void funcs::amainst_2_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 2.
 */

	lvt[2].Pointer = stack_main.popPointer();;
	

}
void funcs::amainst_3_impl(OP_STACK* globalTable, MochaNativeInterface** nativeTable, pointer globalPointer, pointer basePointer, Stack& stack_main, Stack& stack, OP_STACK& ops, std::map<uint_32, localvarelement>& lvt, std::map<uint_32, uint_64>& CHECK_POINTS, pointer base)
{	/**
 * store a pointer from main stack in local variable 3.
 */

	lvt[3].Pointer = stack_main.popPointer();;
	

}



void funcs::getAllImplementations(implptr_t *_opfuncs_, uint_64 _opfuncindex_)
{
    _opfuncs_[_opfuncindex_ ++] = &func_impl;
    _opfuncs_[_opfuncindex_ ++] = &hash_impl;
    _opfuncs_[_opfuncindex_ ++] = &timens_impl;
    _opfuncs_[_opfuncindex_ ++] = &timems_impl;
    _opfuncs_[_opfuncindex_ ++] = &strconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &strload_impl;
    _opfuncs_[_opfuncindex_ ++] = &strstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &strsizeof_impl;
    _opfuncs_[_opfuncindex_ ++] = &strcast_a_impl;
    _opfuncs_[_opfuncindex_ ++] = &strcast_ba_impl;
    _opfuncs_[_opfuncindex_ ++] = &strprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &strreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &mark_impl;
    _opfuncs_[_opfuncindex_ ++] = &jump_impl;
    _opfuncs_[_opfuncindex_ ++] = &jumptomark_impl;
    _opfuncs_[_opfuncindex_ ++] = &newline_impl;
    _opfuncs_[_opfuncindex_ ++] = &ret_impl;
    _opfuncs_[_opfuncindex_ ++] = &invoke_impl;
    _opfuncs_[_opfuncindex_ ++] = &invokedynamic_impl;
    _opfuncs_[_opfuncindex_ ++] = &invokespecial_impl;
    _opfuncs_[_opfuncindex_ ++] = &if_t_impl;
    _opfuncs_[_opfuncindex_ ++] = &if_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &amemcpy_impl;
    _opfuncs_[_opfuncindex_ ++] = &bspmemcpy_impl;
    _opfuncs_[_opfuncindex_ ++] = &amemcpybsp_impl;
    _opfuncs_[_opfuncindex_ ++] = &amalloc_impl;
    _opfuncs_[_opfuncindex_ ++] = &acalloc_impl;
    _opfuncs_[_opfuncindex_ ++] = &amallocs_impl;
    _opfuncs_[_opfuncindex_ ++] = &acallocs_impl;
    _opfuncs_[_opfuncindex_ ++] = &abload_impl;
    _opfuncs_[_opfuncindex_ ++] = &asload_impl;
    _opfuncs_[_opfuncindex_ ++] = &aiload_impl;
    _opfuncs_[_opfuncindex_ ++] = &alload_impl;
    _opfuncs_[_opfuncindex_ ++] = &aliload_impl;
    _opfuncs_[_opfuncindex_ ++] = &allload_impl;
    _opfuncs_[_opfuncindex_ ++] = &afload_impl;
    _opfuncs_[_opfuncindex_ ++] = &adload_impl;
    _opfuncs_[_opfuncindex_ ++] = &adfload_impl;
    _opfuncs_[_opfuncindex_ ++] = &addload_impl;
    _opfuncs_[_opfuncindex_ ++] = &aaload_impl;
    _opfuncs_[_opfuncindex_ ++] = &abstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &asstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &aistore_impl;
    _opfuncs_[_opfuncindex_ ++] = &alstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &alistore_impl;
    _opfuncs_[_opfuncindex_ ++] = &allstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &afstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &adstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &adfstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &addstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &aastore_impl;
    _opfuncs_[_opfuncindex_ ++] = &baconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &baconsts_impl;
    _opfuncs_[_opfuncindex_ ++] = &baconsti_impl;
    _opfuncs_[_opfuncindex_ ++] = &bacast_a_impl;
    _opfuncs_[_opfuncindex_ ++] = &basizeof_impl;
    _opfuncs_[_opfuncindex_ ++] = &printba_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_5_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_6_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_9_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_10_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_11_impl;
    _opfuncs_[_opfuncindex_ ++] = &bconst_12_impl;
    _opfuncs_[_opfuncindex_ ++] = &bload_impl;
    _opfuncs_[_opfuncindex_ ++] = &bload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &bload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &bload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &bload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &bload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmod_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmod_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmod_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmod_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmod_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmod_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &badd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &buadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &busub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bumul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &budiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bcmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bucmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &band_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bxor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftr_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &band_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bxor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftr_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &band_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bxor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftr_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &band_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bxor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftr_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &band_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bxor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftr_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &band_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bxor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftr_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bshftl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdup_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &bdup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &bswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &brot_impl;
    _opfuncs_[_opfuncindex_ ++] = &bset_impl;
    _opfuncs_[_opfuncindex_ ++] = &bget_impl;
    _opfuncs_[_opfuncindex_ ++] = &bvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &bsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &binc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &binc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &bstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &breturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &bmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &bprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &buprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_5_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_6_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_9_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_10_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_11_impl;
    _opfuncs_[_opfuncindex_ ++] = &sconst_12_impl;
    _opfuncs_[_opfuncindex_ ++] = &sload_impl;
    _opfuncs_[_opfuncindex_ ++] = &sload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &sload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &sload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &sload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &sload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &smod_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &smod_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &smod_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &smod_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &smod_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &smod_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &scast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &suadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &susub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &smul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sumul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sudiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &scmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sucmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &sand_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sxor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftr_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &sand_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sxor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftr_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &sand_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sxor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftr_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &sand_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sxor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftr_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &sand_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sxor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftr_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &sand_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sxor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftr_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sshftl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdup_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &sdup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &sswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &srot_impl;
    _opfuncs_[_opfuncindex_ ++] = &sset_impl;
    _opfuncs_[_opfuncindex_ ++] = &sget_impl;
    _opfuncs_[_opfuncindex_ ++] = &svset_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssget_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssset_impl;
    _opfuncs_[_opfuncindex_ ++] = &ssetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &sinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &sinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &sstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &sreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &smainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &smainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &smainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &smainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &smainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &sprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &suprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_5_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_6_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_9_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_10_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_11_impl;
    _opfuncs_[_opfuncindex_ ++] = &iconst_12_impl;
    _opfuncs_[_opfuncindex_ ++] = &iload_impl;
    _opfuncs_[_opfuncindex_ ++] = &iload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &iload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &iload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &iload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &iload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &istore_impl;
    _opfuncs_[_opfuncindex_ ++] = &istore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &istore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &istore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &istore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &istore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &imod_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &imod_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &imod_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &imod_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &imod_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &imod_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &icast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &isub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iusub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &imul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iumul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &idiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iudiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &icmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iucmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &iand_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ior_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ixor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftr_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &iand_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ior_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ixor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftr_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &iand_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ior_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ixor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftr_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &iand_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ior_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ixor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftr_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &iand_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ior_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ixor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftr_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &iand_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ior_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ixor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftr_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ishftl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &idup_impl;
    _opfuncs_[_opfuncindex_ ++] = &idup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &idup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &idup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &idup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &iswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &irot_impl;
    _opfuncs_[_opfuncindex_ ++] = &iset_impl;
    _opfuncs_[_opfuncindex_ ++] = &iget_impl;
    _opfuncs_[_opfuncindex_ ++] = &ivset_impl;
    _opfuncs_[_opfuncindex_ ++] = &isget_impl;
    _opfuncs_[_opfuncindex_ ++] = &isset_impl;
    _opfuncs_[_opfuncindex_ ++] = &isetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &iinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &iinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &istinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &istinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ireturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &imainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &imainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &imainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &imainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &imainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &iprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &iuprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_5_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_6_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_9_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_10_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_11_impl;
    _opfuncs_[_opfuncindex_ ++] = &lconst_12_impl;
    _opfuncs_[_opfuncindex_ ++] = &lload_impl;
    _opfuncs_[_opfuncindex_ ++] = &lload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &lload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &lload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &lload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmod_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmod_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmod_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmod_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmod_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmod_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &ladd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &luadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lusub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lumul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &ludiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lcmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lucmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &land_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lxor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftr_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &land_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lxor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftr_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &land_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lxor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftr_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &land_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lxor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftr_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &land_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lxor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftr_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &land_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lxor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftr_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lshftl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldup_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &ldup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &lswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &lrot_impl;
    _opfuncs_[_opfuncindex_ ++] = &lset_impl;
    _opfuncs_[_opfuncindex_ ++] = &lget_impl;
    _opfuncs_[_opfuncindex_ ++] = &lvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &lsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &linc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &linc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &lstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &lprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &luprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_5_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_6_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_9_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_10_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_11_impl;
    _opfuncs_[_opfuncindex_ ++] = &liconst_12_impl;
    _opfuncs_[_opfuncindex_ ++] = &liload_impl;
    _opfuncs_[_opfuncindex_ ++] = &liload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &liload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &liload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &liload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &liload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &listore_impl;
    _opfuncs_[_opfuncindex_ ++] = &listore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &listore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &listore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &listore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &listore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &limod_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &limod_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &limod_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &limod_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &limod_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &limod_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &licast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liusub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &limul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liumul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liudiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &licmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liucmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &liand_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lior_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lixor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftr_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &liand_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lior_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lixor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftr_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &liand_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lior_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lixor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftr_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &liand_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lior_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lixor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftr_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &liand_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lior_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lixor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftr_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &liand_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lior_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lixor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftr_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lishftl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidup_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &lidup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &liswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &lirot_impl;
    _opfuncs_[_opfuncindex_ ++] = &liset_impl;
    _opfuncs_[_opfuncindex_ ++] = &liget_impl;
    _opfuncs_[_opfuncindex_ ++] = &livset_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisget_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisset_impl;
    _opfuncs_[_opfuncindex_ ++] = &lisetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &liinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &liinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &listinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &listinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lireturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &limainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &limainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &limainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &limainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &limainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &liprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &liuprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_5_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_6_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_9_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_10_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_11_impl;
    _opfuncs_[_opfuncindex_ ++] = &llconst_12_impl;
    _opfuncs_[_opfuncindex_ ++] = &llload_impl;
    _opfuncs_[_opfuncindex_ ++] = &llload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &llload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &llload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &llload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &llload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_f_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_d_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_df_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_dd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmod_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_ub_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmod_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_us_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmod_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_ui_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmod_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_ul_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmod_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_uli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmod_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucast_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lladd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluadd_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llusub_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llumul_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &lludiv_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpl_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpg_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpe_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmple_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpge_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llcmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llucmpne_ull_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &lland_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llxor_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftr_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftl_b_impl;
    _opfuncs_[_opfuncindex_ ++] = &lland_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llxor_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftr_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftl_s_impl;
    _opfuncs_[_opfuncindex_ ++] = &lland_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llxor_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftr_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftl_i_impl;
    _opfuncs_[_opfuncindex_ ++] = &lland_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llxor_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftr_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftl_l_impl;
    _opfuncs_[_opfuncindex_ ++] = &lland_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llxor_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftr_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftl_li_impl;
    _opfuncs_[_opfuncindex_ ++] = &lland_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llxor_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftr_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &llshftl_ll_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldup_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &lldup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &llswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &llrot_impl;
    _opfuncs_[_opfuncindex_ ++] = &llset_impl;
    _opfuncs_[_opfuncindex_ ++] = &llget_impl;
    _opfuncs_[_opfuncindex_ ++] = &llvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &llsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &llinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &llinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &llstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &llreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &llmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &llprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &lluprint_impl;
    _opfuncs_[_opfuncindex_ ++] = &fconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &fconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &fload_impl;
    _opfuncs_[_opfuncindex_ ++] = &fload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &fload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &fload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &fload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &fload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &fdup_impl;
    _opfuncs_[_opfuncindex_ ++] = &fdup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &fdup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &fdup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &fdup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &fswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &frot_impl;
    _opfuncs_[_opfuncindex_ ++] = &fset_impl;
    _opfuncs_[_opfuncindex_ ++] = &fget_impl;
    _opfuncs_[_opfuncindex_ ++] = &fvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &fsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &fsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &fsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &finc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &finc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &fstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &freturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &fmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &fmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &fmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &fmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &fmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &dconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dload_impl;
    _opfuncs_[_opfuncindex_ ++] = &dload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddup_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &dswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &drot_impl;
    _opfuncs_[_opfuncindex_ ++] = &dset_impl;
    _opfuncs_[_opfuncindex_ ++] = &dget_impl;
    _opfuncs_[_opfuncindex_ ++] = &dvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &dsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &dsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &dsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &dinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &dmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &dmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfload_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfdup_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfdup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfdup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfdup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfdup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfrot_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfset_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfget_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dfmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddload_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstore_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &dddup_impl;
    _opfuncs_[_opfuncindex_ ++] = &dddup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &dddup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &dddup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &dddup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddrot_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddset_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddget_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddvset_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddsget_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddsset_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddsetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddstinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddreturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddmainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddmainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddmainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddmainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &ddmainst_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &aconst_impl;
    _opfuncs_[_opfuncindex_ ++] = &aconst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &aload_impl;
    _opfuncs_[_opfuncindex_ ++] = &aload_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &aload_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &aload_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &aload_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &aload_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &astore_impl;
    _opfuncs_[_opfuncindex_ ++] = &astore_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &astore_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &astore_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &astore_3_impl;
    _opfuncs_[_opfuncindex_ ++] = &astore_4_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapb_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswaps_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapi_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapl_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapli_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapll_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapf_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapd_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapdf_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapdd_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswapa_impl;
    _opfuncs_[_opfuncindex_ ++] = &adup_impl;
    _opfuncs_[_opfuncindex_ ++] = &adup2_impl;
    _opfuncs_[_opfuncindex_ ++] = &adup3_impl;
    _opfuncs_[_opfuncindex_ ++] = &adup4_impl;
    _opfuncs_[_opfuncindex_ ++] = &adup5_impl;
    _opfuncs_[_opfuncindex_ ++] = &aswap_impl;
    _opfuncs_[_opfuncindex_ ++] = &arot_impl;
    _opfuncs_[_opfuncindex_ ++] = &aset_impl;
    _opfuncs_[_opfuncindex_ ++] = &aget_impl;
    _opfuncs_[_opfuncindex_ ++] = &avset_impl;
    _opfuncs_[_opfuncindex_ ++] = &asget_impl;
    _opfuncs_[_opfuncindex_ ++] = &asset_impl;
    _opfuncs_[_opfuncindex_ ++] = &asetl_impl;
    _opfuncs_[_opfuncindex_ ++] = &ainc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &ainc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &astinc_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &astinc_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &areturn_impl;
    _opfuncs_[_opfuncindex_ ++] = &amainst_impl;
    _opfuncs_[_opfuncindex_ ++] = &amainst_0_impl;
    _opfuncs_[_opfuncindex_ ++] = &amainst_1_impl;
    _opfuncs_[_opfuncindex_ ++] = &amainst_2_impl;
    _opfuncs_[_opfuncindex_ ++] = &amainst_3_impl;
}
